import{_ as r}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as l,c as p,b as t,e as a,w as e,a as o,o as h,d as n}from"./app-DxgGpIM1.js";const d="/images/spring-web-client.png",k={},g={class:"table-of-contents"};function c(u,i){const s=l("router-link");return h(),p("div",null,[i[15]||(i[15]=t("h1",{id:"spring",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#spring"},[t("span",null,"Spring")])],-1)),t("nav",g,[t("ul",null,[t("li",null,[a(s,{to:"#flag"},{default:e(()=>i[0]||(i[0]=[n("Flag")])),_:1})]),t("li",null,[a(s,{to:"#事务"},{default:e(()=>i[1]||(i[1]=[n("事务")])),_:1})]),t("li",null,[a(s,{to:"#依赖注入"},{default:e(()=>i[2]||(i[2]=[n("依赖注入")])),_:1})]),t("li",null,[a(s,{to:"#spring-boot"},{default:e(()=>i[3]||(i[3]=[n("Spring Boot")])),_:1}),t("ul",null,[t("li",null,[a(s,{to:"#默认依赖管理"},{default:e(()=>i[4]||(i[4]=[n("默认依赖管理")])),_:1})]),t("li",null,[a(s,{to:"#配置方式"},{default:e(()=>i[5]||(i[5]=[n("配置方式")])),_:1})])])]),t("li",null,[a(s,{to:"#starters"},{default:e(()=>i[6]||(i[6]=[n("Starters")])),_:1})]),t("li",null,[a(s,{to:"#spring-cloud"},{default:e(()=>i[7]||(i[7]=[n("Spring Cloud")])),_:1})]),t("li",null,[a(s,{to:"#spring-security"},{default:e(()=>i[8]||(i[8]=[n("Spring Security")])),_:1})]),t("li",null,[a(s,{to:"#spring-taskscheduler"},{default:e(()=>i[9]||(i[9]=[n("Spring TaskScheduler")])),_:1})]),t("li",null,[a(s,{to:"#spring-mvc"},{default:e(()=>i[10]||(i[10]=[n("Spring MVC")])),_:1})]),t("li",null,[a(s,{to:"#spring-aop原理"},{default:e(()=>i[11]||(i[11]=[n("Spring AOP原理")])),_:1})]),t("li",null,[a(s,{to:"#jdk动态代理"},{default:e(()=>i[12]||(i[12]=[n("JDK动态代理:")])),_:1})]),t("li",null,[a(s,{to:"#cglib"},{default:e(()=>i[13]||(i[13]=[n("Cglib")])),_:1})]),t("li",null,[a(s,{to:"#lombok原理"},{default:e(()=>i[14]||(i[14]=[n("Lombok原理")])),_:1})])])]),i[16]||(i[16]=o('<h2 id="flag" tabindex="-1"><a class="header-anchor" href="#flag"><span>Flag</span></a></h2><blockquote><p><a href="https://github.com/ityouknow/ityouknow.github.io/blob/master/_posts/2019/releases/2019-01-03-spring-pivotal.md" target="_blank" rel="noopener noreferrer">是时候给大家介绍 Spring Boot/Cloud 背后豪华的研发团队了</a></p></blockquote><ul><li><a href="https://github.com/topics/spring" target="_blank" rel="noopener noreferrer">https://github.com/topics/spring</a></li><li><a href="https://github.com/topics/spring-boot" target="_blank" rel="noopener noreferrer">https://github.com/topics/spring-boot</a></li><li><a href="https://github.com/topics/spring-cloud" target="_blank" rel="noopener noreferrer">https://github.com/topics/spring-cloud</a></li></ul><ul><li><a href="https://github.com/spring-projects" target="_blank" rel="noopener noreferrer">https://github.com/spring-projects</a><ul><li><a href="https://spring.io/projects" target="_blank" rel="noopener noreferrer">https://spring.io/projects</a></li></ul></li><li><a href="https://github.com/spring-projects-experimental" target="_blank" rel="noopener noreferrer">https://github.com/spring-projects-experimental</a></li><li><a href="https://github.com/spring-guides" target="_blank" rel="noopener noreferrer">https://github.com/spring-guides</a></li><li><a href="https://github.com/fmarchioni/masterspringboot" target="_blank" rel="noopener noreferrer">https://github.com/fmarchioni/masterspringboot</a></li><li>启动分析器 <a href="https://github.com/linyimin0812/spring-startup-analyzer" target="_blank" rel="noopener noreferrer">https://github.com/linyimin0812/spring-startup-analyzer</a></li><li>配置中心对比 <a href="https://github.com/hxz393/ConfigCenterComparer" target="_blank" rel="noopener noreferrer">https://github.com/hxz393/ConfigCenterComparer</a></li></ul><ul><li><a href="https://github.com/wuyouzhuguli/SpringAll" target="_blank" rel="noopener noreferrer">https://github.com/wuyouzhuguli/SpringAll</a><ul><li><a href="http://www.spring4all.com" target="_blank" rel="noopener noreferrer">http://www.spring4all.com</a></li></ul></li><li><a href="https://github.com/mingyang66/spring-parent" target="_blank" rel="noopener noreferrer">https://github.com/mingyang66/spring-parent</a></li><li><a href="https://github.com/xuchengsheng/spring-reading" target="_blank" rel="noopener noreferrer">https://github.com/xuchengsheng/spring-reading</a></li><li>Spring源码阅读 <a href="https://github.com/seaswalker/spring-analysis" target="_blank" rel="noopener noreferrer">https://github.com/seaswalker/spring-analysis</a></li><li><a href="https://github.com/DerekYRC/mini-spring" target="_blank" rel="noopener noreferrer">https://github.com/DerekYRC/mini-spring</a></li><li>Spring 实战第五版中文翻译 <a href="https://github.com/PotoYang/spring-in-action-v5-translate" target="_blank" rel="noopener noreferrer">https://github.com/PotoYang/spring-in-action-v5-translate</a></li><li><a href="https://github.com/dunwu/spring-tutorial" target="_blank" rel="noopener noreferrer">https://github.com/dunwu/spring-tutorial</a></li><li><a href="https://github.com/piomin" target="_blank" rel="noopener noreferrer">https://github.com/piomin</a></li></ul><ul><li><a href="https://www.cnblogs.com/pickupmemories/p/16570511.html" target="_blank" rel="noopener noreferrer">spring boot项目，需要写一个接口吗？</a></li><li><a href="https://www.jianshu.com/p/9fa24196d2ad" target="_blank" rel="noopener noreferrer">SpringCloud和Dubbo</a></li><li><a href="https://www.cnblogs.com/top-housekeeper/p/11980973.html" target="_blank" rel="noopener noreferrer">SpringCache自定义过期时间及自动刷新</a></li><li><a href="https://blog.csdn.net/qq_34626094/category_11731455.html" target="_blank" rel="noopener noreferrer">Spring揭秘学习笔记</a></li></ul><p><strong>webmvc与webflux</strong></p><details><summary><b>展开查看示例结构</b></summary><img src="'+d+`" alt></details><ul><li>webmvc是servlet stack based，基于同步阻塞的IO模型 <ul><li>在<code>org.springframework.web</code>包下</li><li><code>artifactId</code>：<code>spring-boot-starter-web</code></li><li><code>RestTemplate</code> 阻塞式客户端，默认使用<code>HttpURLConnection</code>实现</li></ul></li><li>webflux是reactive stack based，一个完全的reactive并且非阻塞的web框架，API公开了<code>Reactor Flux</code>和<code>Mono</code>类型 <ul><li>在<code>org.springframework.web.reactive</code>包下</li><li><code>artifactId</code>：<code>spring-boot-starter-webflux</code></li><li><code>WebClient</code> 非阻塞式客户端，默认使用<code>Reactor Netty</code>实现</li></ul></li></ul><ul><li><a href="https://blog.csdn.net/get_set/article/details/79480233" target="_blank" rel="noopener noreferrer">Spring WebFlux快速上手</a></li></ul><ul><li><a href="https://docs.spring.io/spring/docs/current/spring-framework-reference/web-reactive.html#webflux-framework-choice" target="_blank" rel="noopener noreferrer">Spring MVC or WebFlux?</a></li><li><a href="https://juejin.cn/post/6844903747089334285" target="_blank" rel="noopener noreferrer">让Spring MVC返回HTML类型的视图</a></li></ul><p><strong>注解生成Bean默认命名规则</strong></p><blockquote><p>在使用<code>@Component</code>、<code>@Repository</code>、<code>@Service</code>、<code>@Controller</code>等注解创建bean时，如果不指定bean名称，默认类名的首字母小写</p></blockquote><blockquote><p>如果类名前两个及以上字母都是大写，那么bean名称与类名一样，如： RBACAuthorityService - RBACAuthorityService</p></blockquote><ul><li><a href="https://github.com/cznno/doc/blob/master/doc/%E4%BF%AE%E6%94%B9Spring%E6%B3%A8%E8%A7%A3%E7%94%9F%E6%88%90Bean%E6%97%B6%E5%80%99%E7%9A%84%E5%91%BD%E5%90%8D%E6%96%B9%E5%BC%8F.md" target="_blank" rel="noopener noreferrer">修改Spring注解生成Bean时候的命名方式</a></li></ul><p><strong>启动错误</strong></p><blockquote><p><code>NoClassDefFoundError: Could not initialize class org.springframework.beans.factory.BeanCreationException</code></p><p>可能是内存大小不够，加参数：<code>-Xms1024M -Xmx2048M -XX:MetaspaceSize=512m -XX:MaxMetaspaceSize=2048m -Xss5120k</code></p></blockquote><h2 id="事务" tabindex="-1"><a class="header-anchor" href="#事务"><span>事务</span></a></h2><ul><li><a href="https://docs.spring.io/spring-framework/docs/current/javadoc-api/org/springframework/transaction/annotation/Propagation.html" target="_blank" rel="noopener noreferrer">org.springframework.transaction.annotation.Propagation</a></li></ul><ul><li><a href="https://blog.csdn.net/qq_42216791/article/details/105684663" target="_blank" rel="noopener noreferrer">Spring事务嵌套导致的异常,Transaction rolled back because it has been marked as rollback-only</a></li><li><a href="https://blog.csdn.net/f641385712/article/details/80445912" target="_blank" rel="noopener noreferrer">Spring事务嵌套引发的血案---Transaction rolled back because it has been marked as rollback-only</a></li><li><a href="https://zhuanlan.zhihu.com/p/69215235" target="_blank" rel="noopener noreferrer">Spring事务方法嵌套引发的异常与问题分析</a></li><li><a href="https://blog.csdn.net/levae1024/article/details/82998386" target="_blank" rel="noopener noreferrer">Spring事务管理嵌套事务详解 : 同一个类中，一个方法调用另外一个有事务的方法</a></li><li><a href="https://blog.csdn.net/m0_37701381/article/details/85066711" target="_blank" rel="noopener noreferrer">Spring 事务嵌套无效</a></li><li><a href="https://blog.csdn.net/qq_32300143/article/details/116162515" target="_blank" rel="noopener noreferrer">spring嵌套事务问题</a></li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Propagation.REQUIRED	如果当前存在事务，则加入该事务；如果当前没有事务，则创建一个新的事务。这是默认值。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Propagation.REQUIRES_NEW	创建一个新的事务，如果当前存在事务，则把当前事务挂起。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Propagation.SUPPORTS	如果当前存在事务，则加入该事务；如果当前没有事务，则以非事务的方式继续运行。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Propagation.NOT_SUPPORTED	以非事务方式运行，如果当前存在事务，则把当前事务挂起。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Propagation.NEVER	以非事务方式运行，如果当前存在事务，则抛出异常。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Propagation.MANDATORY	如果当前存在事务，则加入该事务；如果当前没有事务，则抛出异常。</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">Propagation.NESTED	如果当前存在事务，则创建一个事务作为当前事务的嵌套事务来运行；如果当前没有事务，则该取值等价于Propagation.REQUIRED</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">*/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// REQUIRES_NEW 与 NESTED 前者是内层异常影响外层，外层不影响内层；后者正好相反，内层加try catch后 异常不影响外层，外层会影响内层</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Transactional</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">rollbackFor</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Propagation</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">REQUIRES_NEW</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> TransactionTemplate</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> transactionTemplate</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 手动管理事务</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">Autowired</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> DataSourceTransactionManager</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> transactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*@Autowired</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">private PlatformTransactionManager platformTransactionManager;*/</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/*@Autowired</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">private TransactionDefinition transactionDefinition;*/</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 设置事务隔离级别，开启新事务</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">DefaultTransactionDefinition</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> def </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> DefaultTransactionDefinition</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TransactionDefinition</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">PROPAGATION_REQUIRES_NEW</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//def.setPropagationBehavior(TransactionDefinition.PROPAGATION_REQUIRES_NEW);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// foreach start</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 获得事务状态</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">TransactionStatus</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> status </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> transactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTransaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(def);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">try</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">catch</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Exception</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;"> e</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">TransactionAspectSupport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentTransactionStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isRollbackOnly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){ </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 获取当前最大事务</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        TransactionAspectSupport</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">currentTransactionStatus</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRollbackOnly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 标记事务回滚</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isRollbackOnly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setRollbackOnly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 标记事务回滚</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // https://www.cnblogs.com/yaohuiqin/p/9486975.html</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    transactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">rollback</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 回滚事务，设置completed为完成状态，清理事务资源</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">} </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">finally</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> {</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (status </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">null</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isNewTransaction</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isCompleted</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> &amp;&amp;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">status</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">isRollbackOnly</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        transactionManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">commit</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(status);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> // 如果rollBackOnly状态被设置将回滚，否则执行正常的事务提交操作</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// foreach end</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="依赖注入" tabindex="-1"><a class="header-anchor" href="#依赖注入"><span>依赖注入</span></a></h2><ul><li>@Autowired <ul><li>Field （属性变量）<a href="https://zhuanlan.zhihu.com/p/92395282" target="_blank" rel="noopener noreferrer">Field injection is not recommended（不再推荐使用字段注入）</a></li><li>构造器注入适合强制性的注入旨在不变性</li><li>Setter 注入适合可变性的注入。</li></ul></li><li>@Resource</li><li>@Inject</li></ul><ul><li><a href="https://juejin.im/post/5e3811d26fb9a07ca24f3e55" target="_blank" rel="noopener noreferrer">这几个关于Spring 依赖注入的问题你清楚吗？</a></li><li><a href="https://segmentfault.com/a/1190000021044999" target="_blank" rel="noopener noreferrer">Field injection is not recommended（Spring IOC不再推荐使用属性注入）</a></li><li><a href="https://boris1993.github.io/projects/java/coding-tips/idea-warninig-field-injection-is-not-recommended.html" target="_blank" rel="noopener noreferrer">IDEA 警告 Field injection is not recommended</a></li><li><a href="https://www.jianshu.com/p/7f20176f2a40" target="_blank" rel="noopener noreferrer">Field injection is not recommended</a></li><li><a href="https://www.jianshu.com/p/36db3e167958" target="_blank" rel="noopener noreferrer">@Autowired警告：Field injection is not recommended</a></li><li><a href="https://blog.csdn.net/zhangjingao/article/details/81094529" target="_blank" rel="noopener noreferrer">使用@Autowired注解警告Field injection is not recommended</a></li></ul><ul><li><a href="https://www.cnblogs.com/kismetv/p/8757260.html" target="_blank" rel="noopener noreferrer">Spring中获取request的几种方法，及其线程安全性分析</a></li></ul><h2 id="spring-boot" tabindex="-1"><a class="header-anchor" href="#spring-boot"><span>Spring Boot</span></a></h2><ul><li><a href="https://github.com/dyc87112/SpringBoot-Learning" target="_blank" rel="noopener noreferrer">https://github.com/dyc87112/SpringBoot-Learning</a></li><li><a href="https://github.com/macrozheng/mall-learning" target="_blank" rel="noopener noreferrer">https://github.com/macrozheng/mall-learning</a><ul><li><a href="https://macrozheng.github.io/mall-learning" target="_blank" rel="noopener noreferrer">https://macrozheng.github.io/mall-learning</a></li></ul></li><li><a href="https://github.com/vector4wang/spring-boot-quick" target="_blank" rel="noopener noreferrer">https://github.com/vector4wang/spring-boot-quick</a></li><li><a href="https://github.com/kanyways/learning-spring" target="_blank" rel="noopener noreferrer">https://github.com/kanyways/learning-spring</a></li><li><a href="https://github.com/gf-huanchupk/SpringBootLearning" target="_blank" rel="noopener noreferrer">https://github.com/gf-huanchupk/SpringBootLearning</a></li><li><a href="https://github.com/lyb-geek/springboot-learning" target="_blank" rel="noopener noreferrer">https://github.com/lyb-geek/springboot-learning</a></li><li><a href="https://github.com/xkcoding/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/xkcoding/spring-boot-demo</a></li><li><a href="https://github.com/xuwujing/springBoot-study" target="_blank" rel="noopener noreferrer">https://github.com/xuwujing/springBoot-study</a></li><li><a href="https://github.com/houko/SpringBootUnity" target="_blank" rel="noopener noreferrer">https://github.com/houko/SpringBootUnity</a></li><li><a href="https://github.com/hemin1003/spring-boot-study" target="_blank" rel="noopener noreferrer">https://github.com/hemin1003/spring-boot-study</a></li><li><a href="https://github.com/smltq/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/smltq/spring-boot-demo</a></li><li><a href="https://github.com/liuyueyi/spring-boot-demo" target="_blank" rel="noopener noreferrer">https://github.com/liuyueyi/spring-boot-demo</a></li><li><a href="https://github.com/TianShengBingFeiNiuRen/springboot-util" target="_blank" rel="noopener noreferrer">https://github.com/TianShengBingFeiNiuRen/springboot-util</a></li><li><a href="https://github.com/WinterChenS/springboot-learning-experience" target="_blank" rel="noopener noreferrer">https://github.com/WinterChenS/springboot-learning-experience</a></li><li><a href="https://github.com/jesusfc/springboot3-java17" target="_blank" rel="noopener noreferrer">https://github.com/jesusfc/springboot3-java17</a></li><li>测试 <a href="https://github.com/codecentric/chaos-monkey-spring-boot" target="_blank" rel="noopener noreferrer">https://github.com/codecentric/chaos-monkey-spring-boot</a></li></ul><ul><li><a href="https://www.cnblogs.com/huangqingshi/p/11370291.html" target="_blank" rel="noopener noreferrer">Springboot 优雅停止服务的几种方法</a></li><li><a href="https://www.cnblogs.com/exmyth/p/13098831.html" target="_blank" rel="noopener noreferrer">SpringBoot系列: 如何优雅停止服务</a></li><li><a href="https://juejin.im/post/5ec1d89de51d454ddf2367ab" target="_blank" rel="noopener noreferrer">Spring Boot 2.3 新特性优雅停机详解</a></li></ul><ul><li><a href="https://antoniopeng.com/2020/01/03/springboot/Spring%20Boot%20%E7%9B%91%E5%90%AC%20Redis%20Key%20%E5%A4%B1%E6%95%88%E4%BA%8B%E4%BB%B6%E5%AE%9E%E7%8E%B0%E5%AE%9A%E6%97%B6%E4%BB%BB%E5%8A%A1" target="_blank" rel="noopener noreferrer">Spring Boot 监听 Redis Key 失效事件实现定时任务</a></li><li><a href="https://blog.csdn.net/qq_34347620/article/details/102239179" target="_blank" rel="noopener noreferrer">Spring Boot 无侵入式 实现API接口统一JSON格式返回</a></li></ul><blockquote><p>约定优于配置（convention over configuration），也称作按约定编程，是一种软件设计范式， 旨在减少软件开发人员需做决定的数量，获得简单的好处，而又不失灵活性。</p></blockquote><blockquote><p>开发人员仅需规定应用中不符合约定的部分，在没有规定配置的地方，采用默认配置，以力求最简配置为核心思想</p></blockquote><p><strong>有哪些约定</strong></p><ul><li><p>Maven的目录结构</p><ul><li>默认有<code>resources</code>文件夹,存放资源配置文件。<code>src-main-resources</code>,<code>src-main-java</code>。</li><li>默认编译生成的类都在<code>targe</code>文件夹下面</li></ul></li><li><p>项目默认的配置文件必须是</p><ul><li><code>application</code>前缀命名的<code>yml</code>文件</li><li><code>application</code>前缀命名的<code>properties</code>文件</li></ul></li></ul><h3 id="默认依赖管理" tabindex="-1"><a class="header-anchor" href="#默认依赖管理"><span>默认依赖管理</span></a></h3><blockquote><p>使用默认依赖管理的目的是：常用的包依赖可以省去version标签。如下：</p></blockquote><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">       &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-web&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">   &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式一</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    &lt;!-- spring-boot-starter-parent 是一个特殊的starter，它用来提供相关的Maven默认依赖 --&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    &lt;!--继承spring-boot-dependencies依赖管理，指定了JDK版本，多了编译配置--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-starter-parent&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;2.2.5.RELEASE&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">relativePath</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">/&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">parent</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>方式二</li></ul><div class="language-xml line-numbers-mode" data-highlighter="shiki" data-ext="xml" data-title="xml" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencyManagement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        &lt;!--引入spring-boot依赖管理，其中包含多个依赖，如slf4j、logback--&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        &lt;!--要使用property的形式覆盖原始的依赖项（升级依赖版本），则需要在此之前添加--&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;org.springframework.boot&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">groupId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;spring-boot-dependencies&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">artifactId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;\${spring-boot-version}&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">version</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;pom&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">type</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">            &lt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;import&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">scope</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependency</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">    &lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencies</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;/</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">dependencyManagement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h3 id="配置方式" tabindex="-1"><a class="header-anchor" href="#配置方式"><span>配置方式</span></a></h3><ul><li><a href="https://blog.csdn.net/Happy_cloudlife/article/details/85564667" target="_blank" rel="noopener noreferrer">Spring Boot 加载配置多种方式</a></li></ul><p><strong>Spring Boot Starter</strong></p><ul><li><a href="https://www.jianshu.com/p/bbf439c8a203" target="_blank" rel="noopener noreferrer">Spring Boot Starter说明</a></li></ul><ul><li>需要在<code>pom.xml</code>中引入为<code>starter</code>的依赖</li><li>然后在<code>application.yml</code>或者<code>application.properties</code>中配置，无需在其他任何地方配置（如<code>xml</code>、<code>Bean</code>）</li></ul><p><strong>Java代码配置Bean</strong></p><ul><li>需要在<code>pom.xml</code>中引入不为<code>starter</code>的依赖</li><li>创建一个配置类，然后使用注解<code>@Configuration</code>在类上，<code>@bean</code>配置方法，方法名是相当于<code>xml</code>配置的<code>id</code>， 返回结果相当于将哪个类注入到bean容器中</li></ul><p><strong>加载自定义xml配置</strong></p><ul><li>需要在<code>pom.xml</code>中引入不为<code>starter</code>的依赖</li><li>在启动类上使用注解<code>@ImportResource(locations={&quot;classpath:配置文件路径})</code>，把自定义的<code>xml</code>配置加载进来</li></ul><p><strong>使用注解获取配置文件中的配置</strong></p><ul><li><code>@Value(&quot;\${配置中的属性名}&quot;)</code>用在Bean的域（属性）上，获取默认配置文件中的属性值</li><li><code>@ConfigurationProperties(prefix=&quot;配置中的属性名&quot;)</code>用在类名上，获取默认配置文件中的属性值，用<code>@Resource</code>引入到其他类</li></ul><blockquote><p>必须要让Spring 扫描到该类才能使用，有三种方法：加<code>@Component</code>；创建配置类加<code>@Configuration</code>， 再加<code>@EnableConfigurationProperties(类名.class)</code>或者创建构造器加<code>@Bean</code></p></blockquote><ul><li><code>@PropertySource(&quot;classpath:配置文件路径&quot;)</code>用在类名上，获取默认自定义<code>properties</code>文件中的属性值，用<code>@Resource</code>引入到其他类</li></ul><h2 id="starters" tabindex="-1"><a class="header-anchor" href="#starters"><span>Starters</span></a></h2><ul><li><a href="https://start.aliyun.com" target="_blank" rel="noopener noreferrer">https://start.aliyun.com</a></li></ul><ul><li><a href="https://github.com/mouzt/mzt-biz-log" target="_blank" rel="noopener noreferrer">https://github.com/mouzt/mzt-biz-log</a></li><li><a href="https://github.com/ballcat-projects/ballcat" target="_blank" rel="noopener noreferrer">https://github.com/ballcat-projects/ballcat</a></li></ul><p><strong>application starters</strong></p><blockquote><p>Spring Boot 所有应用程序级的 Starters</p></blockquote><table><thead><tr><th><strong>Starter 名称</strong></th><th><strong>Starter 描述</strong></th></tr></thead><tbody><tr><td>spring-boot-starter</td><td>核心 Starter，包括自动配置、日志及 YAML 支持等</td></tr><tr><td>spring-boot-starter-activemq</td><td>集成 Apache ActiveMQ，基于 JMS 的消息队列</td></tr><tr><td>spring-boot-starter-artemis</td><td>集成 Apache Artemis，基于 JMS 的消息队列</td></tr><tr><td>spring-boot-starter-amqp</td><td>集成 Spring AMQP 和 Rabbit MQ 的消息队列</td></tr><tr><td>spring-boot-starter-aop</td><td>集成 Spring AOP 和 AspectJ 面向切面编程</td></tr><tr><td>spring-boot-starter-batch</td><td>集成 Spring Batch（批处理）</td></tr><tr><td>spring-boot-starter-cache</td><td>集成 Spring Cache（缓存）</td></tr><tr><td>spring-boot-starter-data-cassandra</td><td>集成 Cassandra（分布式数据库） 和 Spring Data Cassandra</td></tr><tr><td>spring-boot-starter-data-cassandra-reactive</td><td>集成 Cassandra（分布式数据库） 和 Spring Data Cassandra Reactive</td></tr><tr><td>spring-boot-starter-data-couchbase</td><td>集成 Couchbase（文档型数据库） 和 Spring Data Couchbase</td></tr><tr><td>spring-boot-starter-data-couchbase-reactive</td><td>集成 Couchbase（文档型数据库） 和 Spring Data Couchbase Reactive</td></tr><tr><td>spring-boot-starter-data-elasticsearch</td><td>集成 Elasticsearch（搜索引擎）和 Spring Data Elasticsearch</td></tr><tr><td>spring-boot-starter-data-solr</td><td>集成 Apache Solr（搜索引擎）结合 Spring Data Solr</td></tr><tr><td>spring-boot-starter-data-jdbc</td><td>集成 Spring Data JDBC</td></tr><tr><td>spring-boot-starter-data-jpa</td><td>集成 Spring Data JPA 结合 Hibernate</td></tr><tr><td>spring-boot-starter-data-ldap</td><td>集成 Spring Data LDAP</td></tr><tr><td>spring-boot-starter-data-mongodb</td><td>集成 MongoDB（文档型数据库）和 Spring Data MongoDB</td></tr><tr><td>spring-boot-starter-data-mongodb-reactive</td><td>集成 MongoDB（文档型数据库）和 Spring Data MongoDB Reactive</td></tr><tr><td>spring-boot-starter-data-neo4j</td><td>集成 Neo4j（图形数据库）和 Spring Data Neo4j</td></tr><tr><td>spring-boot-starter-data-r2dbc</td><td>集成 Spring Data R2DBC</td></tr><tr><td>spring-boot-starter-data-redis</td><td>集成 Redis（内存数据库）结合 Spring Data Redis 和 Lettuce 客户端</td></tr><tr><td>spring-boot-starter-data-redis-reactive</td><td>集成 Redis（内存数据库）结合 Spring Data Redis reactive 和 Lettuce 客户端</td></tr><tr><td>spring-boot-starter-data-rest</td><td>集成 Spring Data REST 暴露 Spring Data repositories 输出 REST 资源</td></tr><tr><td>spring-boot-starter-thymeleaf</td><td>集成 Thymeleaf 视图构建 MVC web 应用</td></tr><tr><td>spring-boot-starter-freemarker</td><td>集成 FreeMarker 视图构建 MVC web 应用</td></tr><tr><td>spring-boot-starter-groovy-templates</td><td>集成 Groovy 模板视图构建 MVC web 应用</td></tr><tr><td>spring-boot-starter-hateoas</td><td>集成 Spring MVC 和 Spring HATEOAS 构建超媒体 RESTful Web 应用程序</td></tr><tr><td>spring-boot-starter-integration</td><td>集成 Spring Integration</td></tr><tr><td>spring-boot-starter-jdbc</td><td>集成 JDBC 结合 HikariCP 连接池</td></tr><tr><td>spring-boot-starter-jersey</td><td>集成 JAX-RS 和 Jersey 构建 RESTful web 应用，是 spring-boot-starter-web 的一个替代 Starter</td></tr><tr><td>spring-boot-starter-jooq</td><td>集成 jOOQ 访问 SQL 数据库，是 spring-boot-starter-data-jpa 或者 spring-boot-starter-jdbc 的替代 Starter</td></tr><tr><td>spring-boot-starter-json</td><td>用于读写 JSON</td></tr><tr><td>spring-boot-starter-jta-atomikos</td><td>集成 Atomikos 实现 JTA 事务</td></tr><tr><td>spring-boot-starter-jta-bitronix</td><td>集成 Bitronix 实现 JTA 事务（ 从 2.3.0 开始标识为 Deprecated）</td></tr><tr><td>spring-boot-starter-mail</td><td>集成 Java Mail 和 Spring 框架的邮件发送功能</td></tr><tr><td>spring-boot-starter-mustache</td><td>集成 Mustache 视图构建 web 应用</td></tr><tr><td>spring-boot-starter-security</td><td>集成 Spring Security</td></tr><tr><td>spring-boot-starter-oauth2-client</td><td>集成 Spring Security’s OAuth2/OpenID 连接客户端功能</td></tr><tr><td>spring-boot-starter-oauth2-resource-server</td><td>集成 Spring Security’s OAuth2 资源服务器功能</td></tr><tr><td>spring-boot-starter-quartz</td><td>集成 Quartz 任务调度</td></tr><tr><td>spring-boot-starter-rsocket</td><td>构建 RSocket 客户端和服务端</td></tr><tr><td>spring-boot-starter-test</td><td>集成 JUnit Jupiter, Hamcrest 和 Mockito 测试 Spring Boot 应用和类库</td></tr><tr><td>spring-boot-starter-validation</td><td>集成 Java Bean Validation 结合 Hibernate Validator</td></tr><tr><td>spring-boot-starter-web</td><td>集成 Spring MVC 构建 RESTful web 应用，使用 Tomcat 作为默认内嵌容器</td></tr><tr><td>spring-boot-starter-web-services</td><td>集成 Spring Web Services</td></tr><tr><td>spring-boot-starter-webflux</td><td>集成 Spring Reactive Web 构建 WebFlux 应用</td></tr><tr><td>spring-boot-starter-websocket</td><td>集成 Spring WebSocket 构建 WebSocket 应用</td></tr></tbody></table><ul><li>数据源 <a href="https://github.com/baomidou/dynamic-datasource-spring-boot-starter" target="_blank" rel="noopener noreferrer">https://github.com/baomidou/dynamic-datasource-spring-boot-starter</a></li></ul><p><strong>production starters</strong></p><blockquote><p>生产级 Starters 能被用于线上/生产功能，这个意味着和任何技术、任何业务没关系，也不是只有生产才能使用，只是在生产环境使用更能体现它的意义。</p></blockquote><table><thead><tr><th><strong>Starter 名称</strong></th><th><strong>Starter 描述</strong></th></tr></thead><tbody><tr><td>spring-boot-starter-actuator</td><td>集成 Spring Boot Actuator，提供生产功能以帮助监控和管理应用程序</td></tr></tbody></table><p><strong>technical starters</strong></p><blockquote><p>技术类 Starters，用于帮助你排除或者替换指定的框架或技术</p></blockquote><table><thead><tr><th><strong>Starter 名称</strong></th><th><strong>Starter 描述</strong></th></tr></thead><tbody><tr><td>spring-boot-starter-jetty</td><td>集成 Jetty 作为内嵌的 servlet 容器，可用于替代 spring-boot-starter-tomcat</td></tr><tr><td>spring-boot-starter-log4j2</td><td>集成 Log4j2 日志框架，可用于替代 spring-boot-starter-logging</td></tr><tr><td>spring-boot-starter-logging</td><td>集成 Logback 日志框架，这个也是默认的日志 Starter</td></tr><tr><td>spring-boot-starter-reactor-netty</td><td>集成 Netty 作为内嵌的响应式 HTTP 服务器</td></tr><tr><td>spring-boot-starter-tomcat</td><td>集成 Tomcat 作为内嵌的 servlet 容器，这也是默认的 servlet 容器 starter 被集成 spring-boot-starter-web 里面</td></tr><tr><td>spring-boot-starter-undertow</td><td>集成 Undertow 作为内嵌的 servlet 容器，可用于替代 spring-boot-starter-tomcat</td></tr></tbody></table><h2 id="spring-cloud" tabindex="-1"><a class="header-anchor" href="#spring-cloud"><span>Spring Cloud</span></a></h2><ul><li><a href="https://github.com/spring-cloud" target="_blank" rel="noopener noreferrer">https://github.com/spring-cloud</a></li><li><a href="https://github.com/spring-cloud-samples" target="_blank" rel="noopener noreferrer">https://github.com/spring-cloud-samples</a></li><li><a href="https://github.com/macrozheng/springcloud-learning" target="_blank" rel="noopener noreferrer">https://github.com/macrozheng/springcloud-learning</a></li><li><a href="https://github.com/dyc87112/SpringCloud-Learning" target="_blank" rel="noopener noreferrer">https://github.com/dyc87112/SpringCloud-Learning</a></li><li><a href="https://github.com/gf-huanchupk/SpringCloudLearning" target="_blank" rel="noopener noreferrer">https://github.com/gf-huanchupk/SpringCloudLearning</a></li><li><a href="https://github.com/2227324689/Spring-Cloud-Alibaba-" target="_blank" rel="noopener noreferrer">https://github.com/2227324689/Spring-Cloud-Alibaba-</a></li><li><a href="https://github.com/SpringCloud" target="_blank" rel="noopener noreferrer">https://github.com/SpringCloud</a></li><li><a href="https://github.com/venusteam" target="_blank" rel="noopener noreferrer">https://github.com/venusteam</a></li><li><a href="https://github.com/forezp/SpringCloudLearning" target="_blank" rel="noopener noreferrer">https://github.com/forezp/SpringCloudLearning</a></li><li><a href="https://github.com/sqshq/piggymetrics" target="_blank" rel="noopener noreferrer">https://github.com/sqshq/piggymetrics</a></li><li><a href="https://github.com/huaweicloud" target="_blank" rel="noopener noreferrer">https://github.com/huaweicloud</a></li><li><a href="https://github.com/sofastack" target="_blank" rel="noopener noreferrer">https://github.com/sofastack</a></li><li><a href="https://github.com/zlt2000/microservices-platform" target="_blank" rel="noopener noreferrer">https://github.com/zlt2000/microservices-platform</a></li><li><a href="https://github.com/chillzhuang/blade-tool" target="_blank" rel="noopener noreferrer">https://github.com/chillzhuang/blade-tool</a></li><li><a href="https://gitee.com/smallc" target="_blank" rel="noopener noreferrer">https://gitee.com/smallc</a></li></ul><blockquote><p>微服务就是单个应用程序拆分成许多个小型服务的一种开发方法</p></blockquote><ul><li><a href="https://zhuanlan.zhihu.com/p/72721025" target="_blank" rel="noopener noreferrer">SpringCloud组件和概念介绍</a></li><li><a href="http://muggle.javaboy.org/2019/04/26/springcloud-1" target="_blank" rel="noopener noreferrer">springcloud核心组件介绍</a></li><li><a href="https://www.jianshu.com/p/31dfb595170c" target="_blank" rel="noopener noreferrer">一文读懂SpringCloud与Eureka，Feign，Ribbon，Hystrix，Zuul核心组件间的关系</a></li><li><a href="https://juejin.im/post/5d56204a5188252bd409b5cb" target="_blank" rel="noopener noreferrer">springcloudの核心组件Eureka、Ribbon、Feign、Hystrix、Zuul</a></li><li><a href="http://blog.didispace.com/spring-cloud-alibaba-version" target="_blank" rel="noopener noreferrer">Spring Cloud Alibaba与Spring Boot、Spring Cloud之间不得不说的版本关系</a></li><li><a href="https://www.springcloud.cc" target="_blank" rel="noopener noreferrer">https://www.springcloud.cc</a></li><li><a href="http://lidawn.github.io/2018/12/26/distribute-tracing" target="_blank" rel="noopener noreferrer">聊聊分布式链路追踪</a></li></ul><ul><li><p><a href="https://juejin.im/post/5de2553e5188256e885f4fa3" target="_blank" rel="noopener noreferrer">冒着挂科的风险也要给你们看的 Spring Cloud 入门总结</a></p></li><li><p><code>bootstrap.yml</code>（.properties）用来程序引导时执行，应用于更加早期配置信息读取，如可以使用来配置application.yml中使用到参数等</p></li></ul><blockquote><p><code>bootstrap.yml</code>是被一个父级的<code>Spring ApplicationContext</code>加载的。这个父级的<code>Spring ApplicationContext</code>是先加载的， 在加载<code>application.yml</code>的<code>ApplicationContext</code>之前。</p></blockquote><ul><li><code>application.yml</code>（.properties) 应用程序特有配置信息，可以用来配置后续各个模块中需使用的公共参数等</li></ul><ul><li><a href="https://github.com/hashicorp/consul" target="_blank" rel="noopener noreferrer">https://github.com/hashicorp/consul</a><ul><li>Consul免费注册中心 <a href="https://portal.cloud.hashicorp.com" target="_blank" rel="noopener noreferrer">https://portal.cloud.hashicorp.com</a></li></ul></li></ul><table><thead><tr><th>组件</th><th>作用</th><th>替代项目</th><th>说明</th></tr></thead><tbody><tr><td>Alibaba Cloud SchedulerX</td><td>分布式任务调度</td><td>elastic-job、xxl-job</td><td>阿里中间件团队开发的一款分布式任务调度产品，提供秒级、精准、高可靠、高可用的定时（基于 Cron 表达式）任务调度服务（商业组件）。</td></tr><tr><td>Alibaba RocketMQ</td><td></td><td></td><td>一款开源的分布式消息系统，基于高可用分布式集群技术，提供低延时的、高可靠的消息发布与订阅服务。</td></tr><tr><td>Alibaba Seata</td><td></td><td></td><td></td></tr><tr><td>ElasticSearch+LogStash+Kibana</td><td>分布式日志收集</td><td></td><td>logstash（收集）、elasticsearch（存储+搜索）、kibana（展示），我们将这三个组合起来的技术称之为ELK</td></tr><tr><td>Feign</td><td>声明式HTTP客户端</td><td>Retrofit</td><td>基于动态代理机制，根据注解和选择的机器，拼接请求URL地址，发起请求</td></tr><tr><td>Netflix Archaius</td><td>配置管理</td><td></td><td>提供动态类型化属性、线程安全配置操作、轮询框架、回调机制等功能。可以实现动态获取配置</td></tr><tr><td>Netflix Eureka</td><td>服务发现</td><td>Consul、Zookeeper、Alibaba Nacos</td><td>各个服务启动时，Eureka Client都会将服务注册到Eureka Server，并且Eureka Client还可以反过来从Eureka Server拉取注册表，从而知道其他服务在哪里</td></tr><tr><td>Netflix Hystrix</td><td>断路器</td><td>Resilience4j、Alibaba Sentinel</td><td>提供线程池，不同的服务走不同的线程池，实现了不同服务调用的隔离，避免了服务雪崩的问题</td></tr><tr><td>Netflix Zuul</td><td>API网关</td><td>Spring Cloud Gateway</td><td>如果前端、移动端要调用后端系统，统一从Zuul网关进入，由Zuul网关转发请求给对应的服务</td></tr><tr><td>Ribbon</td><td>负载均衡器</td><td>Spring Cloud Loadbalancer</td><td>服务间发起请求的时候，基于Ribbon做负载均衡，从一个服务的多台机器中选择一台</td></tr><tr><td>Spring Cloud Bus</td><td>消息总线</td><td></td><td>将分布式的节点用轻量的消息代理连接起来。它可以用于广播配置文件的更改或者服务之间的通讯，也可以用于监控</td></tr><tr><td>Spring Cloud Cluster</td><td></td><td></td><td>取代Spring Integration。提供在分布式系统中的集群所需要的基础功能支持，如：选举、集群的状态一致性、全局锁、tokens等常见状态模式的抽象和实现。</td></tr><tr><td>Spring Cloud Config</td><td>配置管理</td><td>Ctrip Apollo、Spring Cloud Consul、Zookeeper、Alibaba Nacos</td><td>解决分布式系统的配置管理方案。Server提供配置文件的存储、以接口的形式将配置文件的内容提供出去，Client通过接口获取数据、并依据此数据初始化自己的应用。</td></tr><tr><td>Spring Cloud Connectors</td><td></td><td></td><td>简化了连接到服务的过程和从云平台获取操作的过程，有很强的扩展性，可以利用Spring Cloud Connectors来构建你自己的云平台。</td></tr><tr><td>Spring Cloud for Cloud Foundry</td><td>开源PaaS云平台</td><td></td><td>支持多种框架、语言、运行时环境、云平台及应用服务，使开发人员能够在几秒钟内进行应用程序的部署和扩展</td></tr><tr><td>Spring Cloud Security</td><td>安全框架</td><td></td><td>添加安全控制</td></tr><tr><td>Spring Cloud Sleuth</td><td>分布式链路跟踪</td><td></td><td>日志收集工具包，封装了Dapper和log-based追踪以及Zipkin和HTrace操作，为SpringCloud应用实现了一种分布式追踪解决方案。</td></tr><tr><td>Spring Cloud Starters</td><td></td><td></td><td>Spring Boot式的启动项目，为Spring Cloud提供开箱即用的依赖管理。</td></tr><tr><td>Spring Cloud Stream</td><td>数据流</td><td></td><td>创建消息驱动微服务应用的框架，使用spring integration提供与消息代理之间的连接。数据流操作开发包，任务之间通过事件触发</td></tr><tr><td>Spring Cloud Task</td><td>批量任务</td><td></td><td>主要解决短命微服务的任务管理，任务调度的工作，比如说某些定时任务晚上就跑一次，或者某项数据分析临时就跑几次。</td></tr></tbody></table><ul><li><a href="https://github.com/apolloconfig" target="_blank" rel="noopener noreferrer">https://github.com/apolloconfig</a></li><li><a href="https://github.com/ctripcorp/apollo" target="_blank" rel="noopener noreferrer">https://github.com/ctripcorp/apollo</a></li><li>API网关 <a href="https://github.com/apache/incubator-shenyu" target="_blank" rel="noopener noreferrer">https://github.com/apache/incubator-shenyu</a></li><li><a href="https://github.com/siaorg/sia-gateway" target="_blank" rel="noopener noreferrer">https://github.com/siaorg/sia-gateway</a></li><li><a href="https://github.com/mitre/HTTP-Proxy-Servlet" target="_blank" rel="noopener noreferrer">https://github.com/mitre/HTTP-Proxy-Servlet</a></li><li><a href="https://github.com/mkopylec/charon-spring-boot-starter" target="_blank" rel="noopener noreferrer">https://github.com/mkopylec/charon-spring-boot-starter</a></li><li>日志收集 <a href="https://github.com/apache/flume" target="_blank" rel="noopener noreferrer">https://github.com/apache/flume</a><ul><li><a href="https://flume.liyifeng.org" target="_blank" rel="noopener noreferrer">https://flume.liyifeng.org</a></li></ul></li><li><a href="https://github.com/fayechenlong/plumelog" target="_blank" rel="noopener noreferrer">https://github.com/fayechenlong/plumelog</a></li></ul><ul><li><a href="https://blog.csdn.net/piantoutongyang/article/details/88811840" target="_blank" rel="noopener noreferrer">分布式日志框架ELK入门</a></li><li><a href="https://juejin.im/post/5d84a83af265da03ee6a92af" target="_blank" rel="noopener noreferrer">SpringCloud实践分享 日志收集Kafka ELK</a></li><li><a href="https://blog.csdn.net/noaman_wgs/article/details/103328793" target="_blank" rel="noopener noreferrer">【Sentinel（一）】Sentinel介绍与使用</a></li></ul><h2 id="spring-security" tabindex="-1"><a class="header-anchor" href="#spring-security"><span>Spring Security</span></a></h2><ul><li><a href="https://docs.spring.io/spring-security/site/docs/4.2.7.RELEASE/reference/html/core-web-filters.html#form-login-flow-handling" target="_blank" rel="noopener noreferrer">认证成功与失败的处理器</a></li><li><a href="https://docs.spring.io/spring-security/site/docs/5.3.1.RELEASE/reference/html5/#servlet-security-filters" target="_blank" rel="noopener noreferrer">过滤器列表</a></li><li><a href="https://docs.spring.io/spring-security/site/docs/5.3.1.RELEASE/reference/html5/#filter-stack" target="_blank" rel="noopener noreferrer">标准过滤器别名和顺序</a></li></ul><ul><li><a href="https://github.com/topics/spring-security" target="_blank" rel="noopener noreferrer">https://github.com/topics/spring-security</a></li><li><a href="https://github.com/Snailclimb/spring-security-jwt-guide" target="_blank" rel="noopener noreferrer">https://github.com/Snailclimb/spring-security-jwt-guide</a></li></ul><p><strong>拦截器和过滤器区别</strong></p><ul><li>拦截器（Interceptor）：依赖于web框架，在实现上,基于Java的反射机制，拦截的是action，说白了拦截的是访问路径</li><li>过滤器（Filter）：依赖于servlet容器。在实现上，基于函数回调，可以几乎过滤掉所有的东西</li></ul><blockquote><p>拦截器与过滤器的执行顺序：过滤前 -&gt; 拦截前 -&gt; action执行 -&gt; 拦截后 -&gt; 过滤后</p></blockquote><ul><li>过滤器可以修改request，拦截器只能对action请求起作用</li><li>过滤器需要在servlet容器中实现，拦截器可以适用于javaEE，javaSE等各种环境</li><li>拦截器可以调用IOC容器中的各种依赖，而过滤器不能</li><li>过滤器只能在请求的前后使用，而拦截器可以详细到每个方法</li></ul><h2 id="spring-taskscheduler" tabindex="-1"><a class="header-anchor" href="#spring-taskscheduler"><span>Spring TaskScheduler</span></a></h2><ul><li><code>Spring Scheduling Tasks</code> Spring 3.0 版本之后自带的一个定时任务。其所属Spring的资源包为：<code>spring-context-support</code></li></ul><blockquote><p>可以将它看成一个轻量级的<code>Quartz</code>，而且使用起来比Quartz简单许多。默认单线程串行执行任务，多任务时若某个任务执行时间过长， 后续任务会无法及时执行；抛出异常后，同一个任务后续不再触发</p></blockquote><ul><li><code>Spring Quartz</code> Spring集成整合<code>Quartz</code>，主要Bean: <code>JobDetail</code>、<code>Trigger</code>以及<code>SchedulerFactory</code>，<code>JobDataMap</code>数据传递</li></ul><blockquote><p>需要继承<code>org.springframework.scheduling.quartz.QuartzJobBean</code>或者实现<code>org.quartz.Job</code>。采用多线程，下一个调度时间到达时， 会另起一个线程执行调度，不会发生阻塞问题，但调度过多时可能导致数据处理异常，抛出异常后，同一个任务后续仍然会触发</p></blockquote><ul><li><code>TBSchedule</code></li></ul><h2 id="spring-mvc" tabindex="-1"><a class="header-anchor" href="#spring-mvc"><span>Spring MVC</span></a></h2><p><strong>redirect重定向</strong></p><blockquote><p>redirect重定向可以跳转到任意服务器地址，传递时要对中文编码进行处理</p></blockquote><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> method</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RequestMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">POST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> RequestMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ModelAndView</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testredirect</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpServletResponse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> response){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    response</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">sendRedirect</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/index&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 参数可以直接拼接在url上</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/testredirect&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> String</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> testredirect</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Model</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> RedirectAttributes</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> attr) {</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">	attr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;test&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;51gjie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 跳转地址带参数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    attr</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addFlashAttribute</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;u2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;51gjie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 跳转地址不带参数，只存在body中</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">	return</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;redirect:/user/users&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 参数可以直接拼接在url上</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">RequestMapping</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">value</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/toredirect&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">method</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> =</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> { </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">RequestMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">POST</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> RequestMethod</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">GET</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> })</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">  ModelAndView</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> toredirect</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> userName){</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ModelAndView</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">  model </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ModelAndView</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;/main/index&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 参数可以直接拼接在url上</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    // 把userName参数带入到controller的RedirectAttributes中</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">addObject</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;userName&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, userName);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> model</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="spring-aop原理" tabindex="-1"><a class="header-anchor" href="#spring-aop原理"><span>Spring AOP原理</span></a></h2><ol><li>AOP: 其实现的关键就在于 AOP 框架自动创建的 AOP 代理，AOP 代理则可分为静态代理和动态代理两大类 <ol><li>其中静态代理是指使用 AOP 框架提供的命令进行编译，从而在编译阶段就可生成 AOP 代理类，因此也称为编译时增强；静态代理分为：编译时织入（特殊编译器实现）、类加载时织入（特殊的类加载器实现）。静态代理的代表为AspectJ；</li><li>而动态代理则在运行时借助于 JDK 动态代理、CGLIB 等在内存中“临时”生成 AOP 动态代理类，因此也被称为运行时增强。动态代理分为：JDK动态代理（基于接口来实现）、CGLib（基于类实现）。而动态代理则以Spring AOP为代表。</li></ol></li><li>Spring AOP：只支持动态代理，通过两种方式进行实现： <ol><li>JDK动态代理，通过反射实现，只支持对实现接口的类进行代理</li><li>CGLib动态字节码注入方式实现代理。</li></ol></li></ol><h2 id="jdk动态代理" tabindex="-1"><a class="header-anchor" href="#jdk动态代理"><span>JDK动态代理:</span></a></h2><p>JDK中的动态代理是通过反射类Proxy反射机制生成一个实现代理接口的匿名类，在调用具体方法前调用InvocationHandler回调接口实现的，但是JDK中所有要进行动态代理的类必须要实现一个接口，也就是说只能对该类所实现接口中定义的方法进行代理，这在实际编程中有一定的局限性，而且使用反射的效率也不高</p><h2 id="cglib" tabindex="-1"><a class="header-anchor" href="#cglib"><span>Cglib</span></a></h2><p>cglib动态代理是利用asm开源包，对代理对象类的class文件加载进来，通过修改其字节码生成子类来处理。</p><p>动态生成一个要代理的子类，子类重写要代理的类的所有不是final的方法。在子类中采用方法拦截技术拦截所有的父类方法的调用，顺势织入横切逻辑</p><p>ASM是一个java字节码操纵框架，它能被用来动态生成类或者增强既有类的功能。ASM 可以直接产生二进制 class 文件，也可以在类被加载入 Java 虚拟机之前动态改变类行为</p><h2 id="lombok原理" tabindex="-1"><a class="header-anchor" href="#lombok原理"><span>Lombok原理</span></a></h2><ol><li>定义编译期的注解 <code>@Retention(RetentionPolicy.SOURCE)</code></li><li>利用<code>JSR269 api(Pluggable Annotation Processing API )</code>编译期的注解处理器 （AbstractProcessor在编译时指定一个processor类来对编译阶段的注解进行干预，Lombok的注解处理器：AnnotationProcessor）</li><li>利用<code>tools.jar</code>的<code>javac</code> api处理<code>AST</code>(抽象语法树)，将功能注册进jar包</li></ol>`,104))])}const y=r(k,[["render",c],["__file","Spring.html.vue"]]),m=JSON.parse('{"path":"/Java/Spring.html","title":"Spring","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Flag","slug":"flag","link":"#flag","children":[]},{"level":2,"title":"事务","slug":"事务","link":"#事务","children":[]},{"level":2,"title":"依赖注入","slug":"依赖注入","link":"#依赖注入","children":[]},{"level":2,"title":"Spring Boot","slug":"spring-boot","link":"#spring-boot","children":[{"level":3,"title":"默认依赖管理","slug":"默认依赖管理","link":"#默认依赖管理","children":[]},{"level":3,"title":"配置方式","slug":"配置方式","link":"#配置方式","children":[]}]},{"level":2,"title":"Starters","slug":"starters","link":"#starters","children":[]},{"level":2,"title":"Spring Cloud","slug":"spring-cloud","link":"#spring-cloud","children":[]},{"level":2,"title":"Spring Security","slug":"spring-security","link":"#spring-security","children":[]},{"level":2,"title":"Spring TaskScheduler","slug":"spring-taskscheduler","link":"#spring-taskscheduler","children":[]},{"level":2,"title":"Spring MVC","slug":"spring-mvc","link":"#spring-mvc","children":[]},{"level":2,"title":"Spring AOP原理","slug":"spring-aop原理","link":"#spring-aop原理","children":[]},{"level":2,"title":"JDK动态代理:","slug":"jdk动态代理","link":"#jdk动态代理","children":[]},{"level":2,"title":"Cglib","slug":"cglib","link":"#cglib","children":[]},{"level":2,"title":"Lombok原理","slug":"lombok原理","link":"#lombok原理","children":[]}],"git":{"createdTime":1726030162000,"updatedTime":1726030162000,"contributors":[{"name":"onni-top","email":"admin@onni.top","commits":1}]},"readingTime":{"minutes":19.84,"words":5953},"filePathRelative":"Java/Spring.md","localizedDate":"2024年9月11日","excerpt":"\\n\\n<h2>Flag</h2>\\n<blockquote>\\n<p><a href=\\"https://github.com/ityouknow/ityouknow.github.io/blob/master/_posts/2019/releases/2019-01-03-spring-pivotal.md\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">是时候给大家介绍 Spring Boot/Cloud 背后豪华的研发团队了</a></p>\\n</blockquote>\\n<ul>\\n<li><a href=\\"https://github.com/topics/spring\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/topics/spring</a></li>\\n<li><a href=\\"https://github.com/topics/spring-boot\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/topics/spring-boot</a></li>\\n<li><a href=\\"https://github.com/topics/spring-cloud\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/topics/spring-cloud</a></li>\\n</ul>"}');export{y as comp,m as data};
