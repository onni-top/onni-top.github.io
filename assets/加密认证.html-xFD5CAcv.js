import{_ as a}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as h,b as l,e as t,w as r,a as p,o as s,d as o}from"./app-DxgGpIM1.js";const c={},u={class:"table-of-contents"};function b(g,e){const i=n("router-link");return s(),h("div",null,[e[6]||(e[6]=l("h1",{id:"加密认证",tabindex:"-1"},[l("a",{class:"header-anchor",href:"#加密认证"},[l("span",null,"加密认证")])],-1)),l("nav",u,[l("ul",null,[l("li",null,[t(i,{to:"#flag"},{default:r(()=>e[0]||(e[0]=[o("Flag")])),_:1})]),l("li",null,[t(i,{to:"#http授权认证"},{default:r(()=>e[1]||(e[1]=[o("HTTP授权认证")])),_:1})]),l("li",null,[t(i,{to:"#编码算法"},{default:r(()=>e[2]||(e[2]=[o("编码算法")])),_:1})]),l("li",null,[t(i,{to:"#加密算法"},{default:r(()=>e[3]||(e[3]=[o("加密算法")])),_:1})]),l("li",null,[t(i,{to:"#消息摘要"},{default:r(()=>e[4]||(e[4]=[o("消息摘要")])),_:1})]),l("li",null,[t(i,{to:"#证书格式"},{default:r(()=>e[5]||(e[5]=[o("证书格式")])),_:1})])])]),e[7]||(e[7]=p('<h2 id="flag" tabindex="-1"><a class="header-anchor" href="#flag"><span>Flag</span></a></h2><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E" target="_blank" rel="noopener noreferrer">零知识证明（zero-knowledge proof）或零知识协议（zero-knowledge protocol）</a></li><li><a href="https://cryptoservices.github.io" target="_blank" rel="noopener noreferrer">https://cryptoservices.github.io</a><ul><li><a href="https://cryptopals.com" target="_blank" rel="noopener noreferrer">https://cryptopals.com</a></li><li><a href="https://www.crypto101.io" target="_blank" rel="noopener noreferrer">https://www.crypto101.io</a></li></ul></li><li><a href="https://cromwell-intl.com" target="_blank" rel="noopener noreferrer">https://cromwell-intl.com</a></li></ul><h2 id="http授权认证" tabindex="-1"><a class="header-anchor" href="#http授权认证"><span>HTTP授权认证</span></a></h2><ul><li><a href="https://github.com/topics/authorization" target="_blank" rel="noopener noreferrer">https://github.com/topics/authorization</a></li><li><a href="https://github.com/topics/ldap-authentication" target="_blank" rel="noopener noreferrer">https://github.com/topics/ldap-authentication</a></li><li><a href="https://github.com/topics/identity-provider" target="_blank" rel="noopener noreferrer">https://github.com/topics/identity-provider</a></li><li><a href="https://github.com/topics/mfa" target="_blank" rel="noopener noreferrer">https://github.com/topics/mfa</a></li><li><a href="https://github.com/topics/cas" target="_blank" rel="noopener noreferrer">https://github.com/topics/cas</a></li><li><a href="https://github.com/topics/oauth" target="_blank" rel="noopener noreferrer">https://github.com/topics/oauth</a></li><li><a href="https://github.com/topics/rbac" target="_blank" rel="noopener noreferrer">https://github.com/topics/rbac</a></li></ul><ul><li>WebAuthn无密码身份验证 <a href="https://github.com/w3c/webauthn" target="_blank" rel="noopener noreferrer">https://github.com/w3c/webauthn</a></li><li>FIDO(Fast Identity Online) <a href="https://github.com/fido-alliance" target="_blank" rel="noopener noreferrer">https://github.com/fido-alliance</a><ul><li><a href="https://fidoalliance.org" target="_blank" rel="noopener noreferrer">https://fidoalliance.org</a></li><li><a href="https://github.com/passwordless-lib" target="_blank" rel="noopener noreferrer">https://github.com/passwordless-lib</a></li><li><a href="https://github.com/webauthn-open-source/fido2-lib" target="_blank" rel="noopener noreferrer">https://github.com/webauthn-open-source/fido2-lib</a></li><li><a href="https://github.com/line/line-fido2-server" target="_blank" rel="noopener noreferrer">https://github.com/line/line-fido2-server</a></li><li><a href="https://github.com/Yubico/python-fido2" target="_blank" rel="noopener noreferrer">https://github.com/Yubico/python-fido2</a></li></ul></li><li><a href="https://github.com/duo-labs" target="_blank" rel="noopener noreferrer">https://github.com/duo-labs</a><ul><li><a href="https://webauthn.io" target="_blank" rel="noopener noreferrer">https://webauthn.io</a></li><li><a href="https://webauthn.guide" target="_blank" rel="noopener noreferrer">https://webauthn.guide</a></li></ul></li><li><a href="https://github.com/go-webauthn" target="_blank" rel="noopener noreferrer">https://github.com/go-webauthn</a></li><li><a href="https://github.com/webauthn4j" target="_blank" rel="noopener noreferrer">https://github.com/webauthn4j</a></li><li><a href="https://github.com/Yubico" target="_blank" rel="noopener noreferrer">https://github.com/Yubico</a></li><li><a href="https://github.com/herrjemand/awesome-webauthn" target="_blank" rel="noopener noreferrer">https://github.com/herrjemand/awesome-webauthn</a></li><li><a href="https://github.com/teamhanko/hanko" target="_blank" rel="noopener noreferrer">https://github.com/teamhanko/hanko</a><ul><li><a href="https://www.passkeys.io" target="_blank" rel="noopener noreferrer">https://www.passkeys.io</a></li></ul></li><li><a href="https://github.com/passkeydeveloper/passkeys.dev" target="_blank" rel="noopener noreferrer">https://github.com/passkeydeveloper/passkeys.dev</a></li><li><a href="https://github.com/MasterKale/SimpleWebAuthn" target="_blank" rel="noopener noreferrer">https://github.com/MasterKale/SimpleWebAuthn</a></li><li><a href="https://github.com/fusionauth" target="_blank" rel="noopener noreferrer">https://github.com/fusionauth</a></li><li><a href="https://github.com/unkeyed/unkey" target="_blank" rel="noopener noreferrer">https://github.com/unkeyed/unkey</a></li><li><a href="https://github.com/goauthentik/authentik" target="_blank" rel="noopener noreferrer">https://github.com/goauthentik/authentik</a></li></ul><ul><li><a href="https://www.cnblogs.com/li1992/articles/9802716.html" target="_blank" rel="noopener noreferrer">Web开发几种常用的认证机制</a></li><li><a href="https://zh.wikipedia.org/wiki/%E4%BB%A5%E8%A7%92%E8%89%B2%E7%82%BA%E5%9F%BA%E7%A4%8E%E7%9A%84%E5%AD%98%E5%8F%96%E6%8E%A7%E5%88%B6" target="_blank" rel="noopener noreferrer">角色访问控制模型RBAC96</a></li><li><a href="https://my.oschina.net/cloudcross/blog/1920706" target="_blank" rel="noopener noreferrer">权限设计的杂谈</a></li><li><a href="https://zhuanlan.zhihu.com/p/513142061" target="_blank" rel="noopener noreferrer">详细了解RBAC（Role-Based Access Control）</a></li></ul><blockquote><p>Basic Auth：这种认证直接顺应HTTP协议的无状态性，每次执行业务的时候，将username与password参数发送给服务器进行验证</p></blockquote><blockquote><p>Session：是指在客户端Cookie中存储一个Session Id。请求时携带Session Id，服务器从Session数据存储中找到对应的Session。 Native App一般是不直接支持Cookie机制</p></blockquote><ul><li>Radius</li><li>AD(Active Directory) 域 <ul><li><a href="https://github.com/FalconForceTeam/SOAPHound" target="_blank" rel="noopener noreferrer">https://github.com/FalconForceTeam/SOAPHound</a></li></ul></li><li><a href="https://www.cloudflare.com/zh-cn/learning/access-management/what-is-identity-and-access-management" target="_blank" rel="noopener noreferrer">什么是身份和访问管理 (IAM)？</a></li><li><a href="https://blog.csdn.net/makenothing/article/details/103000001" target="_blank" rel="noopener noreferrer">身份访问与管理(IAM)</a></li></ul><blockquote><p>WebAuthn (Web Authentication)是Web标准的一部分,用于提供更安全的身份认证方法,可以使用生物识别数据、PIN码或移动设备来进行身份验证, 而不需要密码。其目的是减少密码相关的攻击,提高安全性。</p></blockquote><blockquote><p>CTAP (Client to Authenticator Protocol)协议, 主要用于在客户端设备(如计算机或移动设备)和身份验证器(例如生物识别设备、USB密钥等)之间建立通信, 并确保两者之间的通信安全,执行WebAuthn身份验证操作。</p></blockquote><blockquote><p>UAF (Universal Authentication Framework)规范,旨在提供更安全的身份验证方法,减少对传统密码的依赖。 允许使用生物识别信息、PIN码等进行身份验证。其目的是创建一个标准化的身份验证框架,适配不同的Web服务和应用。</p></blockquote><blockquote><p>U2F (Universal 2nd Factor)安全标准,旨在提供双重身份验证,即使用密码以外的第二个身份验证。 用户需要使用U2F设备(例如USB密钥)来进行身份验证。主要用于增强身份验证的安全性,而不是完全替代密码。</p></blockquote><p><strong>JWT是一种认证协议</strong></p><ul><li><a href="https://github.com/auth0" target="_blank" rel="noopener noreferrer">https://github.com/auth0</a><ul><li><a href="https://jwt.io" target="_blank" rel="noopener noreferrer">https://jwt.io</a></li></ul></li></ul><blockquote><p>JWT（Json web token）提供了一种用于发布接入令牌（Access Token),并对发布的签名接入令牌进行验证的方法。 令牌（Token）本身包含了一系列声明，应用程序可以根据这些声明限制用户对资源的访问。</p></blockquote><blockquote><p>应用场景：JWT是用在前后端分离, 需要简单的对后台API进行保护时使用.(前后端分离无session, 频繁传用户密码不安全)</p></blockquote><h2 id="编码算法" tabindex="-1"><a class="header-anchor" href="#编码算法"><span>编码算法</span></a></h2><blockquote><p><code>Escape Sequences</code>转义序列把数据转换成指定格式的数据，可解码，一般用于处理特殊字符</p></blockquote><ul><li><a href="https://github.com/topics/escape" target="_blank" rel="noopener noreferrer">https://github.com/topics/escape</a></li></ul><ul><li>Base32 <ul><li><a href="https://ptrchm.com/posts/base32-explained" target="_blank" rel="noopener noreferrer">Base32 编码说明</a></li><li><a href="https://github.com/rubycocos/blockchain/tree/master/base32-alphabets" target="_blank" rel="noopener noreferrer">https://github.com/rubycocos/blockchain/tree/master/base32-alphabets</a></li></ul></li><li>Base58</li><li>Base64</li><li>Base85</li><li>Base91</li><li>quoted-printable <a href="https://developer.mozilla.org/zh-CN/docs/Glossary/percent-encoding" target="_blank" rel="noopener noreferrer">Percent-encoding</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%A4%9A%E7%94%A8%E9%80%94%E4%BA%92%E8%81%AF%E7%B6%B2%E9%83%B5%E4%BB%B6%E6%93%B4%E5%B1%95#%E5%86%85%E5%AE%B9%E4%BC%A0%E8%BE%93%E7%BC%96%E7%A0%81" target="_blank" rel="noopener noreferrer">Content-Transfer-Encoding</a></li><li>Unicode编码(\\u开头)</li><li>URLEncoder(%开头)</li><li>Gzip压缩</li><li>UTF16编码(\\x开头)</li><li>Hexadecimal (Hex) 十六进制编码</li><li>Octal 八进制</li><li>Binary 二进制</li><li>HTML entity</li><li>ASCII</li><li>Ascii85</li><li>yEnc</li></ul><blockquote><p>Base64是一种能将任意Binary资料用64种字元组合成字串的方法，而Binary资料和字串资料彼此之间可以互相转换。 在实际应用中，Base64除了能将Binary资料可视化之外，也常用来表示字串加密过后的内容</p></blockquote><h2 id="加密算法" tabindex="-1"><a class="header-anchor" href="#加密算法"><span>加密算法</span></a></h2><blockquote><p>使用密钥加密数据转换成指定格式的数据，可通过密钥转换还原数据</p></blockquote><ul><li>同态加密（HE） <a href="https://github.com/homenc/HElib" target="_blank" rel="noopener noreferrer">https://github.com/homenc/HElib</a></li><li><a href="https://github.com/google/fully-homomorphic-encryption" target="_blank" rel="noopener noreferrer">https://github.com/google/fully-homomorphic-encryption</a></li></ul><ul><li><a href="https://juejin.cn/post/6882404615443185678" target="_blank" rel="noopener noreferrer">Java开发中的加密、解密、签名、验签，密钥，证书</a></li><li><a href="https://blog.51cto.com/u_15127574/2667757" target="_blank" rel="noopener noreferrer">常见对称加密</a></li></ul><ul><li><a href="https://github.com/topics/eddsa" target="_blank" rel="noopener noreferrer">https://github.com/topics/eddsa</a></li><li><a href="https://github.com/topics/ed25519" target="_blank" rel="noopener noreferrer">https://github.com/topics/ed25519</a></li><li><a href="https://github.com/topics/crypto-library" target="_blank" rel="noopener noreferrer">https://github.com/topics/crypto-library</a></li><li>加密系统的ECRYPT基准测试 <a href="https://bench.cr.yp.to" target="_blank" rel="noopener noreferrer">https://bench.cr.yp.to</a></li><li><a href="https://cr.yp.to" target="_blank" rel="noopener noreferrer">https://cr.yp.to</a></li><li><a href="https://github.com/noiseprotocol" target="_blank" rel="noopener noreferrer">https://github.com/noiseprotocol</a></li><li><a href="https://github.com/BLAKE3-team" target="_blank" rel="noopener noreferrer">https://github.com/BLAKE3-team</a></li><li><a href="https://github.com/BLAKE2" target="_blank" rel="noopener noreferrer">https://github.com/BLAKE2</a></li><li><a href="https://github.com/syncsynchalt/illustrated-x25519" target="_blank" rel="noopener noreferrer">https://github.com/syncsynchalt/illustrated-x25519</a></li></ul><ul><li>对称加密算法 <ul><li>分组加密算法 <ul><li>DES（Data Encryption Standard） <ul><li>2DES</li><li>3DES（Triple DES/DESede）</li></ul></li><li>AES （Advanced Encryption Standard）</li><li>TwoFish</li><li>Blowfish</li><li>Camellia</li><li>CAST5</li><li>CAST6</li><li>ChaCha</li><li>GOST28147</li><li>HC-128</li><li>HC-256</li><li>IDEA</li><li>ISAAC</li><li>Noekeon</li><li>RC2</li><li>RC4</li><li>RC5-32</li><li>RC5-64</li><li>RC6</li><li>Rijndael</li><li>Salsa20</li><li>SEED</li><li>Serpent</li><li>Skipjack</li><li>TEA/XTEA</li><li>Threefish</li><li>Tnepres</li><li>VMPC</li><li>XSalsa20</li><li>ARIA</li></ul></li><li>流式加密算法 <ul><li>Salsa20</li><li>ChaCha20</li><li>ORYX</li><li>SEAL</li><li>Rabbit</li></ul></li></ul></li><li><a href="https://blog.csdn.net/u014294681/article/details/86705999" target="_blank" rel="noopener noreferrer">非对称加密算法</a><ul><li>RSA</li><li><a href="https://www.zhihu.com/question/30003461/answer/2530341072" target="_blank" rel="noopener noreferrer">RSA (with blinding)</a></li><li>RSA2</li><li>DSA(Digital Signature Algorithm)</li><li>ECDSA</li><li>ECC(Elliptic Curves Cryptography)</li><li>DH</li><li>ElGamal</li><li>Rabin</li><li>Merkle-Hellman（背包算法） <ul><li>Knapsack Algorithm</li></ul></li><li>NaccacheStern</li><li>ECGOST3410</li><li>ECNR</li><li>GOST3410</li><li>ISO9796d2</li><li>PSS</li><li>X9.31-1998</li></ul></li><li>密钥交换算法 <ul><li>DHE</li><li>ECDHE</li><li>Diffie-Hellman</li><li>EC-DH</li><li>EC-MQV</li><li>J-PAKE</li><li>SRP-6a</li></ul></li><li>PBE (Password Based Encryption) 口令加密算法 <ul><li>PBEWithMD5AndDES</li><li>PBEWithMD5AndTripeDES</li><li>PBEWithSHA1AndDESede</li><li>PBEWithSHA1AndRC2_40</li><li>PBEWithMD5AndRC2</li><li>PBEWithSHA1AndDES</li><li>PBEWithSHA1AndRC2</li><li>PBEWithSHAAndIDEA-CBC</li><li>PBEWithSHAAnd2-KeyTripleDES-CBC</li><li>PBEWithSHAAnd3-KeyTripleDES-CBC</li><li>PBEWithSHAAnd128BitRC2-CBC</li><li>PBEWithSHAAnd40BitRC2-CBC</li><li>PBEWithSHAAnd128BitRC4</li><li>PBEWithSHAAnd40BitRC4</li><li>PBEWithSHAAndTwofish-CBC</li><li>PBEwithMD2</li><li>DES-CBC</li><li>PBEwithMD2andRC2-CBC</li><li>PBEwithMD5andDES-CBC</li><li>PBEwithMD5andRC2-CBC</li><li>PBEwithSHA1andDES-CBC</li><li>PBEwithSHA1andRC2-CBC</li><li>PBEwithSHA-1and128bitRC4</li><li>PBEwithSHA-1and40bitRC4</li><li>PBEwithSHA-1and3-keyDESEDE-CBC</li><li>PBEwithSHA-1and2-keyDESEDE-CBC</li><li>PBEwithSHA-1and128bitRC2-CBC</li><li>PBEwithSHA-1and40bitRC2-CBC</li><li>PBEwithHmacSHA-1</li><li>PBEwithHmacSHA-224</li><li>PBEwithHmacSHA-256</li><li>PBEwithHmacRIPEMD128</li><li>PBEwithHmacRIPEMD160</li><li>PBEwithHmacRIPEMD256</li></ul></li><li>签名算法 <ul><li>MD2withRSA</li><li>MD4withRSA</li><li>MD5withRSA</li><li>RIPEMD128withRSA</li><li>RIPEMD160withECDSA</li><li>RIPEMD160withRSA</li><li>RIPEMD256withRSA</li><li>SHA-1withRSA</li><li>SHA-224withRSA</li><li>SHA-256withRSAandMGF1</li><li>SHA-384withRSAandMGF1</li><li>SHA-512withRSAandMGF1</li><li>SHA-1withDSA</li><li>SHA-1withECDSA</li></ul></li><li>轻量级加密算法 <ul><li><a href="https://ascon.iaik.tugraz.at" target="_blank" rel="noopener noreferrer">Ascon</a><a href="https://github.com/SparkDustJoe/AsconManaged" target="_blank" rel="noopener noreferrer">https://github.com/SparkDustJoe/AsconManaged</a><ul><li>Ascon-128</li><li>Ascon-XOF</li><li>Ascon-Hash</li></ul></li></ul></li></ul><p><strong>加密模式</strong></p><ul><li><a href="https://blog.csdn.net/qq78442761/article/details/120964873" target="_blank" rel="noopener noreferrer">加密模式ECB、CBC、CFB、OFB、CTR</a></li></ul><ul><li>ECB（Electronic CodeBook mode）：电子密码本模式</li><li>CBC（Cipher Block Chaining mode）：密码分组链模式</li><li>CFB（Cipher FeedBack mode）：密码反馈模式</li><li>OFB（Output FeedBack mode）：输出反馈模式</li><li>CTR（CounTeR mode）：计时器模式</li><li>CTS</li><li>GOFB</li><li>OpenPGPCFB</li><li>SIC (or CTR)</li><li>CCM</li><li>EAX</li><li>GCM</li><li>OCB</li></ul><h2 id="消息摘要" tabindex="-1"><a class="header-anchor" href="#消息摘要"><span>消息摘要</span></a></h2><blockquote><p>生成数据的唯一密文，不可逆</p></blockquote><blockquote><p>哈希 (Hash Algorithm) 散列算法，是将任意长度的数据映射为固定长度数据的算法，也称为消息摘要(主要用于数据完整性校验和加密/签名)。 一般情况下，哈希算法有两个特点：</p><blockquote><p>原始数据的细微变化（比如一个位翻转）会导致结果产生巨大差距</p><p>运算过程不可逆，理论上无法从结果还原输入数据</p></blockquote></blockquote><ul><li><a href="https://github.com/topics/encoder" target="_blank" rel="noopener noreferrer">https://github.com/topics/encoder</a></li><li><a href="https://github.com/topics/decoder" target="_blank" rel="noopener noreferrer">https://github.com/topics/decoder</a></li><li><a href="https://github.com/topics/encode" target="_blank" rel="noopener noreferrer">https://github.com/topics/encode</a></li><li><a href="https://github.com/topics/decode" target="_blank" rel="noopener noreferrer">https://github.com/topics/decode</a></li></ul><ul><li><a href="https://www.cnblogs.com/xjnotxj/p/12716981.html" target="_blank" rel="noopener noreferrer">密码哈希（Password Hash）</a></li><li><a href="https://en.wikipedia.org/wiki/SipHash" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/SipHash</a></li><li><a href="https://github.com/gravity-postquantum" target="_blank" rel="noopener noreferrer">https://github.com/gravity-postquantum</a></li><li><a href="https://sphincs.org" target="_blank" rel="noopener noreferrer">https://sphincs.org</a></li><li><a href="https://github.com/P-H-C/phc-winner-argon2" target="_blank" rel="noopener noreferrer">https://github.com/P-H-C/phc-winner-argon2</a><ul><li><a href="https://www.password-hashing.net" target="_blank" rel="noopener noreferrer">https://www.password-hashing.net</a></li></ul></li><li><a href="https://www.bouncycastle.org" target="_blank" rel="noopener noreferrer">https://www.bouncycastle.org</a><ul><li><a href="https://github.com/bcgit" target="_blank" rel="noopener noreferrer">https://github.com/bcgit</a></li></ul></li><li><a href="https://github.com/Keyfactor" target="_blank" rel="noopener noreferrer">https://github.com/Keyfactor</a></li></ul><ul><li>MD <ul><li>MD2</li><li>MD4</li><li>MD5</li></ul></li><li>SHA <ul><li>SHA-0</li><li>SHA-1</li><li>SHA-2 <ul><li>SHA-256</li><li>SHA-384</li><li>SHA-512</li></ul></li><li>SHA-3 <ul><li><a href="https://github.com/KeccakTeam" target="_blank" rel="noopener noreferrer">Keccak</a><ul><li>Keccak-256</li></ul></li><li>SHAKE128</li><li>SHAKE256</li><li>SHA3-224</li><li>SHA3-256</li><li>SHA3-384</li><li>SHA3-512</li></ul></li></ul></li><li><a href="https://www.aumasson.jp" target="_blank" rel="noopener noreferrer">BLAKE</a><ul><li>BLAKE-224</li><li>BLAKE-256</li><li>BLAKE-384</li><li>BLAKE-512</li></ul></li><li><a href="https://www.blake2.net" target="_blank" rel="noopener noreferrer">Blake2</a><ul><li>BLAKE2b <ul><li>BLAKE2bp</li></ul></li><li>BLAKE2s <ul><li>BLAKE2sp</li></ul></li></ul></li><li><a href="https://github.com/BLAKE3-team/BLAKE3" target="_blank" rel="noopener noreferrer">BLAKE3</a><ul><li><a href="https://github.com/oconnor663/bao" target="_blank" rel="noopener noreferrer">https://github.com/oconnor663/bao</a></li><li><a href="https://github.com/zeebo/blake3" target="_blank" rel="noopener noreferrer">https://github.com/zeebo/blake3</a></li><li><a href="https://github.com/connor4312/blake3" target="_blank" rel="noopener noreferrer">https://github.com/connor4312/blake3</a></li></ul></li><li>RipeMD(RACE原始完整性校验讯息摘要) <ul><li>RipeMD128</li><li>RipeMD160</li><li>RipeMD256</li><li>RipeMD320Hex</li><li>RipeMD320</li><li>HmacRipeMD128</li><li>HmacRipeMD160</li></ul></li><li>密码哈希函数（Password Hash） <ul><li>PBKDF2</li><li>Bcrypt</li><li>Scrypt</li><li>Argon2</li></ul></li><li>MAC <ul><li>CBCBlockCipher</li><li>CFBBlockCipher</li><li>CMAC</li><li>GMAC</li><li>GOST28147</li><li>ISO9797 Alg. 3</li><li>Poly1305</li><li>SipHash</li><li>SkeinMac</li><li>VMPCMAC</li><li>HMAC（Hash-based Message Authentication Code）散列消息认证码，结合一个加密密钥，通过特别计算方式之后产生的消息认证码（MAC） <ul><li><a href="https://blog.csdn.net/sdnyqfyqf/article/details/105534376" target="_blank" rel="noopener noreferrer">从零入门HMAC-SHA256</a></li></ul></li></ul></li><li>CRC 循环冗余校验（Cyclic Redundancy Check） <ul><li>CRC32</li><li>CRC64</li></ul></li><li>Tiger <ul><li>HmacTiger</li></ul></li><li>Whirlpool</li><li>Gost3411</li></ul><p><strong>应对普通哈希容易被破解的策略</strong></p><ul><li>加盐（salt）</li></ul><blockquote><p>加盐就是对目标字段哈希前，拼接上另一个字段（salt）。注：盐值加到字段之前较为普遍。加盐对防彩虹表很有效。</p></blockquote><ul><li>慢哈希</li></ul><h2 id="证书格式" tabindex="-1"><a class="header-anchor" href="#证书格式"><span>证书格式</span></a></h2><ul><li><code>.DER</code>/<code>.CER</code>（X.509） 文件是二进制格式，只保存证书，不保存私钥，Java 和 Windows 服务器偏向于使用这种编码格式</li><li><code>.PEM</code>（Privacy Enhanced Mail） 一般是文本格式，可保存证书，可保存私钥，常用于 Apache 和 Nginx 服务器 <ul><li>一般为文本格式，以 <code>-----BEGIN...</code> 开头，以 <code>-----END...</code> 结尾，中间的内容是 BASE64 编码。</li><li>这种格式可以保存证书和私钥，有时也把PEM 格式的私钥的后缀改为 <code>.key</code> 以区别证书与私钥</li></ul></li><li><code>.CRT</code>（Certificate） 可以是二进制格式，可以是文本格式，与 <code>.DER</code> 格式相同，不保存私钥。</li><li><code>.PFX</code>/<code>.P12</code>（Predecessor of PKCS#12） 二进制格式，同时包含证书和私钥，一般有密码保护。</li><li><code>.JKS</code>（Java Key Storage） 二进制格式，同时包含证书和私钥，一般有密码保护，JAVA 专属格式，一般用于 Tomcat 服务器</li></ul>',43))])}const m=a(c,[["render",b],["__file","加密认证.html.vue"]]),k=JSON.parse('{"path":"/PL/%E5%8A%A0%E5%AF%86%E8%AE%A4%E8%AF%81.html","title":"加密认证","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Flag","slug":"flag","link":"#flag","children":[]},{"level":2,"title":"HTTP授权认证","slug":"http授权认证","link":"#http授权认证","children":[]},{"level":2,"title":"编码算法","slug":"编码算法","link":"#编码算法","children":[]},{"level":2,"title":"加密算法","slug":"加密算法","link":"#加密算法","children":[]},{"level":2,"title":"消息摘要","slug":"消息摘要","link":"#消息摘要","children":[]},{"level":2,"title":"证书格式","slug":"证书格式","link":"#证书格式","children":[]}],"git":{"createdTime":1726030162000,"updatedTime":1726030162000,"contributors":[{"name":"onni-top","email":"admin@onni.top","commits":1}]},"readingTime":{"minutes":7.27,"words":2182},"filePathRelative":"PL/加密认证.md","localizedDate":"2024年9月11日","excerpt":"\\n\\n<h2>Flag</h2>\\n<ul>\\n<li><a href=\\"https://zh.wikipedia.org/wiki/%E9%9B%B6%E7%9F%A5%E8%AF%86%E8%AF%81%E6%98%8E\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">零知识证明（zero-knowledge proof）或零知识协议（zero-knowledge protocol）</a></li>\\n<li><a href=\\"https://cryptoservices.github.io\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://cryptoservices.github.io</a>\\n<ul>\\n<li><a href=\\"https://cryptopals.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://cryptopals.com</a></li>\\n<li><a href=\\"https://www.crypto101.io\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.crypto101.io</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"https://cromwell-intl.com\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://cromwell-intl.com</a></li>\\n</ul>"}');export{m as comp,k as data};
