import{_ as i}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as h,b as t,d as o,w as l,a as p,o as s,e as a}from"./app--VhlLr_b.js";const g={},c={class:"table-of-contents"};function u(d,e){const r=n("router-link");return s(),h("div",null,[e[11]||(e[11]=t("h1",{id:"技术概念",tabindex:"-1"},[t("a",{class:"header-anchor",href:"#技术概念"},[t("span",null,"技术概念")])],-1)),t("nav",c,[t("ul",null,[t("li",null,[o(r,{to:"#flag"},{default:l(()=>e[0]||(e[0]=[a("Flag")])),_:1})]),t("li",null,[o(r,{to:"#编程范式"},{default:l(()=>e[1]||(e[1]=[a("编程范式")])),_:1})]),t("li",null,[o(r,{to:"#设计模式及原则"},{default:l(()=>e[2]||(e[2]=[a("设计模式及原则")])),_:1})]),t("li",null,[o(r,{to:"#数据结构与算法"},{default:l(()=>e[3]||(e[3]=[a("数据结构与算法")])),_:1}),t("ul",null,[t("li",null,[o(r,{to:"#算法复杂度"},{default:l(()=>e[4]||(e[4]=[a("算法复杂度")])),_:1})])])]),t("li",null,[o(r,{to:"#迭代循环遍历递归"},{default:l(()=>e[5]||(e[5]=[a("迭代循环遍历递归")])),_:1})]),t("li",null,[o(r,{to:"#directory和folder区别"},{default:l(()=>e[6]||(e[6]=[a("directory和folder区别")])),_:1})]),t("li",null,[o(r,{to:"#进程-线程-协程"},{default:l(()=>e[7]||(e[7]=[a("进程/线程/协程")])),_:1})]),t("li",null,[o(r,{to:"#缓存"},{default:l(()=>e[8]||(e[8]=[a("缓存")])),_:1})]),t("li",null,[o(r,{to:"#锁和事务"},{default:l(()=>e[9]||(e[9]=[a("锁和事务")])),_:1})]),t("li",null,[o(r,{to:"#定时任务"},{default:l(()=>e[10]||(e[10]=[a("定时任务")])),_:1})])])]),e[12]||(e[12]=p('<h2 id="flag" tabindex="-1"><a class="header-anchor" href="#flag"><span>Flag</span></a></h2><blockquote><p>RESTful是一种架构风格，其核心是面向资源，更简单；而WebService底层SOAP协议，主要核心是面向活动；两个都是通过web请求调用接口</p></blockquote><ul><li><a href="https://www.zhihu.com/question/52943496" target="_blank" rel="noopener noreferrer">端口映射和端口转发的区别？</a></li><li><a href="https://www.cnblogs.com/weir110/p/9185151.html" target="_blank" rel="noopener noreferrer">Java的lambda表达式和JavaScript的箭头函数</a></li><li><a href="https://zhuanlan.zhihu.com/p/560066640" target="_blank" rel="noopener noreferrer">图片与格式（上）BMP、JPEG、PNG、EXIF、RGB、色深、像素、分辨率</a></li></ul><blockquote><p>注解(也称为元数据)就是代码中的特殊标记，为我们在代码中添加信息提供了一种形式化的方法，使我们可以在稍后某个时刻非常方便的使用这些数据。</p></blockquote><p><strong>Graceful/Gentle Exit（优雅退出）：指程序结束前，等待当前任务完成或做一些记录后再完全退出</strong><strong>逃逸分析（Escape Analysis）</strong></p><blockquote><p>是编译器用来决定程序中值的位置的过程。编译器执行静态代码分析，以确定一个构造体的实例化值是否会逃逸到堆</p></blockquote><blockquote><p>逃逸是指在某个方法之内创建的对象，除了在方法体之内被引用之外，还在方法体之外被其它变量引用到； 这样带来的后果是在该方法执行完毕之后，该方法中创建的对象将无法被GC回收，由于其被其它变量引用。 正常的方法调用中，方法体中创建的对象将在执行完毕之后，将回收其中创建的对象；故由于无法回收，即成为逃逸。</p></blockquote><ul><li><a href="https://segmentfault.com/a/1190000016803174" target="_blank" rel="noopener noreferrer">Java中的逃逸分析</a></li><li><a href="https://gogeof.github.io/2018/02/12/%E3%80%90%E8%AF%91%E3%80%91Go-%E8%AF%AD%E8%A8%80%E6%9C%BA%E5%88%B6%E4%B9%8B%E9%80%83%E9%80%B8%E5%88%86%E6%9E%90" target="_blank" rel="noopener noreferrer">【译】Go 语言机制之逃逸分析</a></li></ul><p><strong>微服务、Service Mesh 和 Serverless</strong></p><blockquote><p><code>Fuction as a Service</code>无服务器计算，目的是希望应用不用一直运行着，只有当有请求来的时候，才快速启动这个应用 ，然后请求一走就停掉这个应用，换句话说，不让应用在背景程式持续的启动着，而是有需要的时候才开启他</p></blockquote><ul><li><a href="https://github.com/devsapp" target="_blank" rel="noopener noreferrer">https://github.com/devsapp</a></li></ul><h2 id="编程范式" tabindex="-1"><a class="header-anchor" href="#编程范式"><span>编程范式</span></a></h2><blockquote><p>编程范型、编程范式或程序设计法（Programming Paradigm）是某种编程语言典型的编程风格或者说是编程方式</p></blockquote><ul><li><a href="https://en.wikipedia.org/wiki/Programming_paradigm" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Programming_paradigm</a></li><li><a href="https://en.wikipedia.org/wiki/Foreign_function_interface" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Foreign_function_interface</a></li><li><a href="https://github.com/geekxh/hello-algorithm" target="_blank" rel="noopener noreferrer">https://github.com/geekxh/hello-algorithm</a></li></ul><blockquote><p>范类：强类型/弱类型，动态语言/静态语言，编译/解释</p></blockquote><ul><li>过程化（命令式）编程</li><li>事件驱动编程</li><li>面向对象编程</li><li>链式编程</li><li>函数式编程</li><li>并发编程</li><li>约束编程</li><li>数据流编程（Dataflow programming）</li><li>声明性编程</li><li>分布式的编程</li><li><a href="https://en.wikipedia.org/wiki/Generic_programming" target="_blank" rel="noopener noreferrer">泛型编程</a></li><li>逻辑编程</li><li>元编程</li><li>响应式/反应式编程（Reactive programming）</li><li>面向方面/面向切面编程（AOP）</li><li>过程式编程</li><li>元编程（Metaprogramming）</li><li>宏（Macro）</li></ul><h2 id="设计模式及原则" tabindex="-1"><a class="header-anchor" href="#设计模式及原则"><span>设计模式及原则</span></a></h2><ul><li><a href="http://c.biancheng.net/design_pattern" target="_blank" rel="noopener noreferrer">Java设计模式：23种设计模式全面解析（超级详细）</a></li><li><a href="https://github.com/topics/design-patterns" target="_blank" rel="noopener noreferrer">https://github.com/topics/design-patterns</a></li><li><a href="https://github.com/topics/principles" target="_blank" rel="noopener noreferrer">https://github.com/topics/principles</a></li><li>设计模式 <a href="https://github.com/search?q=sourcemaking" target="_blank" rel="noopener noreferrer">https://github.com/search?q=sourcemaking</a><ul><li><a href="https://github.com/RefactoringGuru" target="_blank" rel="noopener noreferrer">https://github.com/RefactoringGuru</a><ul><li><a href="https://refactoringguru.cn/design-patterns" target="_blank" rel="noopener noreferrer">https://refactoringguru.cn/design-patterns</a></li></ul></li><li><a href="https://sourcemaking.com/design_patterns" target="_blank" rel="noopener noreferrer">https://sourcemaking.com/design_patterns</a></li></ul></li><li>Java实现的设计模式 <a href="https://github.com/iluwatar/java-design-patterns" target="_blank" rel="noopener noreferrer">https://github.com/iluwatar/java-design-patterns</a></li><li><a href="https://github.com/hiparker/tank-design" target="_blank" rel="noopener noreferrer">https://github.com/hiparker/tank-design</a></li><li><a href="https://github.com/ccqy66/java-design-patterns-cn" target="_blank" rel="noopener noreferrer">https://github.com/ccqy66/java-design-patterns-cn</a></li><li><a href="https://github.com/gavin66/head-first-design-patterns-Java" target="_blank" rel="noopener noreferrer">https://github.com/gavin66/head-first-design-patterns-Java</a></li><li><a href="https://github.com/youlookwhat/DesignPattern" target="_blank" rel="noopener noreferrer">https://github.com/youlookwhat/DesignPattern</a></li><li>C++ 设计模式 <a href="https://github.com/JakubVojvoda/design-patterns-cpp" target="_blank" rel="noopener noreferrer">https://github.com/JakubVojvoda/design-patterns-cpp</a></li><li>Go <a href="https://github.com/mohuishou/go-design-pattern" target="_blank" rel="noopener noreferrer">https://github.com/mohuishou/go-design-pattern</a></li><li><a href="https://github.com/crazybber/awesome-patterns" target="_blank" rel="noopener noreferrer">https://github.com/crazybber/awesome-patterns</a></li><li>JS <a href="https://github.com/ryouaki/ECMAScript2016-Design-Patterns" target="_blank" rel="noopener noreferrer">https://github.com/ryouaki/ECMAScript2016-Design-Patterns</a></li></ul><ul><li>驱动领域设计 <a href="https://github.com/Sairyss/domain-driven-hexagon" target="_blank" rel="noopener noreferrer">https://github.com/Sairyss/domain-driven-hexagon</a></li></ul><h2 id="数据结构与算法" tabindex="-1"><a class="header-anchor" href="#数据结构与算法"><span>数据结构与算法</span></a></h2><ul><li><a href="https://github.com/topics/datastructures" target="_blank" rel="noopener noreferrer">https://github.com/topics/datastructures</a></li><li><a href="https://djhworld.github.io/hyperloglog" target="_blank" rel="noopener noreferrer">https://djhworld.github.io/hyperloglog</a></li></ul><ul><li>主流语言数据结构和算法学习 <a href="https://github.com/TheAlgorithms" target="_blank" rel="noopener noreferrer">https://github.com/TheAlgorithms</a></li><li><a href="https://github.com/krahets" target="_blank" rel="noopener noreferrer">https://github.com/krahets</a></li><li><a href="https://github.com/liuxinyu95/AlgoXY" target="_blank" rel="noopener noreferrer">https://github.com/liuxinyu95/AlgoXY</a></li><li><a href="https://github.com/idisfkj/daily_algorithm" target="_blank" rel="noopener noreferrer">https://github.com/idisfkj/daily_algorithm</a></li><li><a href="https://github.com/Py-Contributors/AlgorithmsAndDataStructure" target="_blank" rel="noopener noreferrer">https://github.com/Py-Contributors/AlgorithmsAndDataStructure</a></li><li><a href="https://github.com/krahets/hello-algo" target="_blank" rel="noopener noreferrer">https://github.com/krahets/hello-algo</a></li><li><a href="https://github.com/krahets/LeetCode-Book" target="_blank" rel="noopener noreferrer">https://github.com/krahets/LeetCode-Book</a></li><li>Java <a href="https://github.com/williamfiset/Algorithms" target="_blank" rel="noopener noreferrer">https://github.com/williamfiset/Algorithms</a></li><li><a href="https://github.com/Dairongpeng/algorithm-note" target="_blank" rel="noopener noreferrer">https://github.com/Dairongpeng/algorithm-note</a></li><li><a href="https://github.com/kdn251/interviews" target="_blank" rel="noopener noreferrer">https://github.com/kdn251/interviews</a></li><li><a href="https://github.com/yomorun/hashids-java" target="_blank" rel="noopener noreferrer">https://github.com/yomorun/hashids-java</a></li><li>C++/Python <a href="https://github.com/akzare/Algorithms" target="_blank" rel="noopener noreferrer">https://github.com/akzare/Algorithms</a></li><li><a href="https://github.com/qingyujean/data-structure" target="_blank" rel="noopener noreferrer">https://github.com/qingyujean/data-structure</a></li><li><a href="https://github.com/Learn-Algorithm" target="_blank" rel="noopener noreferrer">https://github.com/Learn-Algorithm</a></li><li>Rust <a href="https://github.com/TianyiShi2001/Algorithms" target="_blank" rel="noopener noreferrer">https://github.com/TianyiShi2001/Algorithms</a></li><li>JavaScript <a href="https://github.com/trekhleb/javascript-algorithms" target="_blank" rel="noopener noreferrer">https://github.com/trekhleb/javascript-algorithms</a></li><li><a href="https://github.com/chefyuan/algorithm-base" target="_blank" rel="noopener noreferrer">https://github.com/chefyuan/algorithm-base</a></li><li><a href="https://github.com/XPoet/js-data-structures-and-algorithms" target="_blank" rel="noopener noreferrer">https://github.com/XPoet/js-data-structures-and-algorithms</a></li><li><a href="https://github.com/noransu/javascript-DSAA" target="_blank" rel="noopener noreferrer">https://github.com/noransu/javascript-DSAA</a></li><li><a href="https://github.com/huangyangquang/Algorithm" target="_blank" rel="noopener noreferrer">https://github.com/huangyangquang/Algorithm</a></li><li>Go <a href="https://github.com/hunterhug/goa.c" target="_blank" rel="noopener noreferrer">https://github.com/hunterhug/goa.c</a></li><li><a href="https://github.com/EndlessCheng/codeforces-go" target="_blank" rel="noopener noreferrer">https://github.com/EndlessCheng/codeforces-go</a></li><li>概率过滤器 <a href="https://github.com/bdupras/filter-tutorial" target="_blank" rel="noopener noreferrer">https://github.com/bdupras/filter-tutorial</a></li><li>算法可视化 <a href="https://github.com/selfboot/ai_gallery" target="_blank" rel="noopener noreferrer">https://github.com/selfboot/ai_gallery</a></li></ul><ul><li><a href="https://mp.weixin.qq.com/s/mq2NSG3xMqIs28nU354TjQ" target="_blank" rel="noopener noreferrer">必学十大经典排序算法</a></li><li><a href="http://c.biancheng.net/data_structure" target="_blank" rel="noopener noreferrer">数据结构与算法教程，数据结构C语言版教程</a></li><li><a href="https://bestsort.cn/2019/04/28/402" target="_blank" rel="noopener noreferrer">AC自动机 算法详解(图解)及模板</a></li><li><a href="https://blog.csdn.net/yilovexing/article/details/107066591" target="_blank" rel="noopener noreferrer">预排序遍历树算法(MPTT)</a></li></ul><p><strong><a href="http://data.biancheng.net/view/154.html" target="_blank" rel="noopener noreferrer">数据结构大致包含以下几种存储结构</a>：</strong></p><ul><li>线性表，还可细分为顺序表、链表、栈和队列；</li><li>树结构，包括普通树，二叉树，线索二叉树等；</li><li>图存储结构；</li></ul><blockquote><p>数组、字符串、队列、栈、链表、集合、哈希表、二叉树</p></blockquote><h3 id="算法复杂度" tabindex="-1"><a class="header-anchor" href="#算法复杂度"><span>算法复杂度</span></a></h3><blockquote><p><code>O(1)</code>、 <code>O(n)</code>、 <code>O(logn)</code>、 <code>O(nlogn)</code> 可表示时间复杂度，也可以表示空间复杂度</p></blockquote><blockquote><p><code>O</code>加上<code>()</code>里面是一个函数<code>f()</code>即<code>O(f())</code>，函数指明某个算法的耗时/耗空间与数据增长量之间的关系。其中的<code>n</code>代表输入数据的量。</p></blockquote><blockquote><p>如果<code>ax=N</code>（<code>a&gt;0</code>，且<code>a≠1</code>），那么数<code>x</code>叫做以<code>a</code>为底<code>N</code>的对数，记作<code>x=logaN</code>，读作以<code>a</code>为底<code>N</code>的对数，其中<code>a</code>叫做对数的底数，<code>N</code>叫做真数。</p></blockquote><ul><li><a href="https://blog.csdn.net/FeiPeng_/article/details/81030981" target="_blank" rel="noopener noreferrer">算法复杂度中的O(logN)底数是什么</a></li><li><a href="https://www.cnblogs.com/biehongli/p/11672380.html" target="_blank" rel="noopener noreferrer">时间复杂度o(1), o(n), o(logn), o(nlogn)</a></li><li><a href="https://blog.csdn.net/codingriver/article/details/107068889" target="_blank" rel="noopener noreferrer">十大经典排序算法及比较与分析 ( 动画演示 ) ( 可视化工具 )</a></li></ul><table><thead><tr><th>类型</th><th>意义</th><th>举例</th></tr></thead><tbody><tr><td>O(1)</td><td>最低复杂度，常量值也就是耗时/ 耗空间与输入数据大小无关，无论输入数据增大多少倍，耗时/耗空间都不变</td><td>哈希算法就是典型的O(1)时间复杂度，无论数据规模多大，都可以在一次计算后找到目标 (不考虑冲突的话)</td></tr><tr><td>O(n)</td><td>数据量增大几倍，耗时也增大几倍</td><td>遍历算法</td></tr><tr><td>O(n^2)</td><td>对n个数排序，需要扫描 n x n 次</td><td>冒泡排序</td></tr><tr><td>O(logn)</td><td>当数据增大n倍时，耗时增大logn 倍(这里的log是以2为底的，比 如，当数据增大256倍时，耗时只增大8倍,</td><td>二分查找就是O(logn)的算法，每找一次排除一半的可能，256个数据中查找只要找8次就可以找到目标</td></tr><tr><td>O(nlogn)</td><td>就是n乘以logn,当数据增大256倍 时，耗时增大256*8=2048倍。这个复杂度高于线性低于平方。</td><td>归并排 序就是O(nlogn)的时间复杂度</td></tr></tbody></table><table><thead><tr><th>数据结构</th><th>查找（平均）</th><th>查找（最坏）</th><th>插入（平均）</th><th>插入（最坏）</th><th>删除（平均）</th><th>删除（最坏）</th><th>遍历</th></tr></thead><tbody><tr><td>数组</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td></td></tr><tr><td>有序数组</td><td>O(logN)</td><td>O(n)</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td>O(N)</td></tr><tr><td>链表</td><td>O(N)</td><td>O(N)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td></td></tr><tr><td>有序链表</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td>O(N)</td><td>O(1)</td><td>O(1)</td><td>O(N)</td></tr><tr><td>二叉查找树</td><td>O(logN)</td><td>O(N)</td><td>O(logN)</td><td>O(N)</td><td>O(logN)</td><td>O(N)</td><td>O(N)</td></tr><tr><td>红黑树</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(N)</td></tr><tr><td>平衡树</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(N)</td></tr><tr><td>二叉堆 优先队列</td><td>O(1)</td><td>O(1)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(logN)</td><td>O(N)</td></tr><tr><td>哈希表</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(1)</td><td>O(N)</td></tr></tbody></table><ul><li><a href="https://github.com/labuladong/fucking-algorithm" target="_blank" rel="noopener noreferrer">https://github.com/labuladong/fucking-algorithm</a></li><li><a href="https://github.com/maemual/raft-zh_cn" target="_blank" rel="noopener noreferrer">https://github.com/maemual/raft-zh_cn</a></li></ul><blockquote><p>排序、双指针、查找、分治、动态规划、递归、回溯、贪心、位运算、DFS、BFS、图</p></blockquote><h2 id="迭代循环遍历递归" tabindex="-1"><a class="header-anchor" href="#迭代循环遍历递归"><span>迭代循环遍历递归</span></a></h2><ul><li>循环（loop），指的是在满足条件的情况下，重复执行同一段代码。比如，while语句。 <ul><li>循环则即能对应集合，列表，数组等，也能对执行代码进行操作。</li></ul></li><li>遍历（traversal），指的是按照一定的规则访问树形结构中的每个节点，而且每个节点都只访问一次。 <ul><li>遍历同迭代一样，也不能对执行代码进行遍历。</li></ul></li><li>迭代（iterate），指的是按照某种顺序逐个访问列表中的每一项。比如，for语句。 <ul><li>迭代只能对应集合，列表，数组等。不能对执行代码进行迭代。</li><li>环结构，从初始状态开始，每次迭代都遍历这个环，并更新状态，多次迭代直到到达结束状态</li></ul></li><li>递归（recursion），指的是一个函数不断调用自身的行为。比如，以编程方式输出著名的斐波纳契数列。 <ul><li>线性递归(单向递归)和尾递归（tail recursion）。单向递归 → 尾递归 → 迭代</li><li>树结构，从字面可以其理解为重复“递推”和“回归”的过程，当“递推”到达底部时就会开始“回归”，其过程相当于树的深度优先遍历</li></ul></li></ul><blockquote><p>理论上递归和迭代时间复杂度方面是一样的，但实际应用中（函数调用和函数调用堆栈的开销）递归比迭代效率要低。</p></blockquote><p><strong>将递归方案转换为迭代的方案我们通常只需要两步即可：</strong></p><ol><li>我们在函数中使用堆或队列数据结构，以取代系统调用栈的作用。在每一次递归出现时，我们简单地将参数作为一个新元素压入到我们创建的数据结构中，来代替递归调用。</li><li>另外，我们在之前创建的数据结构上做一个循环操作。递归的调用链就被迭代的循环操作替代了。</li></ol><h2 id="directory和folder区别" tabindex="-1"><a class="header-anchor" href="#directory和folder区别"><span>directory和folder区别</span></a></h2><ul><li><code>directory</code> 目录，简称 <code>dir</code></li><li><code>folder</code> 文件夹</li></ul><blockquote><p>两者一般情况下是可以相互通用的，都表示文件夹的意思；但是细细纠来，还是有区别的：</p></blockquote><blockquote><p><code>Hi, please go to D:\\files\\images\\directory, and then double click and open folder &quot;travelImg&quot;.</code></p></blockquote><ul><li>看完上面那句话，相信大家有点知道意思了：</li></ul><blockquote><p><code>directory</code> 也是一个<code>folder</code>，但是我们在说一个<code>directory</code>的时候，通常指它含有<code>路径</code>的意思在里面；</p></blockquote><blockquote><p><code>folder</code> 一般情况，是说某一个文件夹，通常不包含<code>路径</code>的意思，比如：双击这个文件夹，在里面找找看。</p></blockquote><h2 id="进程-线程-协程" tabindex="-1"><a class="header-anchor" href="#进程-线程-协程"><span>进程/线程/协程</span></a></h2><ul><li><a href="https://segmentfault.com/a/1190000012290847" target="_blank" rel="noopener noreferrer">线程安全</a></li></ul><blockquote><p>DRF-SC：无数据竞争的程序以顺序一致的方式执行</p></blockquote><ul><li><a href="https://zh.wikipedia.org/wiki/%E9%80%9A%E9%81%93_(%E7%BC%96%E7%A8%8B)" target="_blank" rel="noopener noreferrer">通道 (编程) - 维基百科</a></li><li><a href="https://zhuanlan.zhihu.com/p/402341124" target="_blank" rel="noopener noreferrer">【操作系统】进程间通信</a></li><li><a href="https://research.swtch.com/mm" target="_blank" rel="noopener noreferrer">https://research.swtch.com/mm</a><ul><li><a href="https://colobu.com/2021/07/11/Programming-Language-Memory-Models" target="_blank" rel="noopener noreferrer">[译]编程语言内存模型</a></li><li><a href="https://zhuanlan.zhihu.com/p/416265190" target="_blank" rel="noopener noreferrer">【译文】硬件内存模型</a></li><li><a href="https://zhuanlan.zhihu.com/p/416265073" target="_blank" rel="noopener noreferrer">【译文】编程语言内存模型</a></li><li><a href="https://zhuanlan.zhihu.com/p/416265277" target="_blank" rel="noopener noreferrer">【译文】Go语言内存模型</a></li></ul></li><li><a href="https://zhuanlan.zhihu.com/p/401354706" target="_blank" rel="noopener noreferrer">【Golang】并发编程</a></li><li><a href="https://blog.csdn.net/qq_29328443/article/details/104215898" target="_blank" rel="noopener noreferrer">SC-DRF</a></li><li><a href="https://www.jianshu.com/p/a26763dd9b0e" target="_blank" rel="noopener noreferrer">内存屏障与内存模型</a></li><li><a href="https://arthurchiao.art/blog/memory-models-underlie-programming-languages-zh" target="_blank" rel="noopener noreferrer">[译] 编程语言中的 6 种内存模型（2016）</a></li><li><a href="https://en.wikipedia.org/wiki/Little&#39;s_law" target="_blank" rel="noopener noreferrer">利特尔定律</a></li><li><a href="https://zhuanlan.zhihu.com/p/597057386" target="_blank" rel="noopener noreferrer">如何理解：同步、异步、阻塞、非阻塞、BIO、NIO、AIO？</a></li></ul><ul><li>happens-before</li><li>memory barrier</li></ul><blockquote><p>在操作系统中，线程是最小的执行单元，进程是最小的资源管理单元。进程和线程由操作系统管理，协程由应用程序管理。</p></blockquote><blockquote><p>协程(Coroutine)编译器级的，进程(Process)和线程(Thread)操作系统级的，<code>Process</code> -&gt; <code>Thread</code> -&gt; <code>Coroutine</code></p></blockquote><p><strong>并发</strong></p><blockquote><p>同一时间段有几个程序都处于已经启动到运行完毕之间，并且这几个程序都在同一个处理机上运行，并发的两种关系是同步和互斥；</p></blockquote><ul><li><a href="https://github.com/bmpi-dev/bmpi.dev/blob/master/content/dev/deep-in-program-language/how-to-implement-concurrency/concurrency-model.zh-cn.md" target="_blank" rel="noopener noreferrer">编程语言是如何实现并发的之并发模型篇</a></li><li><a href="https://github.com/bmpi-dev/bmpi.dev/blob/master/content/dev/deep-in-program-language/how-to-implement-concurrency/os-scheduling.zh-cn.md" target="_blank" rel="noopener noreferrer">编程语言是如何实现并发的之操作系统篇</a></li></ul><ul><li>结构化并发（Structured Concurrency）</li></ul><p><strong>并行</strong></p><blockquote><p>单处理器中进程被交替执行，表现出一种并发的外部特征；在多处理器中，进程可以交替执行，还能重叠执行， 实现并行处理，并行就是同事发生的多个并发事件，具有并发的含义，但并发不一定是并行，也就是说事件之间不一定要同一时刻发生；</p></blockquote><p><strong>互斥</strong></p><blockquote><p>进程之间访问临界资源时相互排斥的现象；</p></blockquote><p><strong>同步</strong></p><blockquote><p>进程之间存在依赖关系，一个进程结束的输出作为另一个进程的输入。具有同步关系的一组并发进程之间发送的信息称为消息或者事件；</p></blockquote><p><strong>异步</strong></p><blockquote><p>和同步相对，同步是顺序执行，而异步是彼此独立，在等待某个事件的过程中继续做自己的事，不要等待这一事件完成后再工作。 线程是实现异步的一个方式，异步是让调用方法的主线程不需要同步等待另一个线程的完成，从而让主线程干其他事情。</p></blockquote><ul><li>Rust: async/await/tokio/async-std</li><li>Go: goroutines/sync.WaitGroup</li><li>Java: Future/CompletableFuture/parallelStream/RecursiveTask</li><li>C#: async/await/Task/BeginInvoke/BackgroundWorker</li><li>Python: async/await/asyncio</li><li>Node.js: async/await/Promise</li><li>Elixir: Task</li><li>Erlang: spawn</li></ul><p><strong>异步和线程</strong></p><blockquote><p>不是同等关系，异步是目的，线程只是实现异步的一个手段，实现异步可以采用线程技术或者交给其他进程来处理</p></blockquote><p><strong>进程/系统进程/平台进程</strong></p><p><strong>线程/平台线程/内核线程/系统线程</strong></p><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener noreferrer">线程 - 维基百科</a></li><li><a href="https://en.wikipedia.org/wiki/Thread_(computing)" target="_blank" rel="noopener noreferrer">Thread (computing) - Wikipedia</a></li></ul><blockquote><p>多线程是进程中并发运行的一段代码，能够实现线程之间的切换执行；应该被池化，利用线程池减少线程创建的开销。</p></blockquote><ul><li>作用域值（Scoped Values）</li></ul><ul><li><a href="https://juejin.cn/post/6948034657321484318" target="_blank" rel="noopener noreferrer">别再纠结线程池大小/线程数量了，没有固定公式的</a></li></ul><ul><li>IO密集型线程数量控制</li></ul><blockquote><p>线程数 = CPU核心数/(1-阻塞系数)</p></blockquote><blockquote><p>Blocking Coefficient(阻塞系数)（一般为0.8~0.9之间） = 阻塞时间/(阻塞时间+使用CPU的时间)</p></blockquote><ul><li>计算密集型线程数量控制</li></ul><blockquote><p>CPU有超线程：线程数 = CPU内核线程数*2</p><p>CPU无超线程：线程数 = CPU核数+1</p></blockquote><p><strong>协程/纤程/绿色线程/虚拟线程/用户线程/微线程/轻量进程</strong></p><ul><li><a href="https://zh.wikipedia.org/wiki/%E7%BB%BF%E8%89%B2%E7%BA%BF%E7%A8%8B" target="_blank" rel="noopener noreferrer">绿色线程 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E7%BA%96%E7%A8%8B" target="_blank" rel="noopener noreferrer">纤程 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E5%8D%8F%E7%A8%8B" target="_blank" rel="noopener noreferrer">协程 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/Protothreads" target="_blank" rel="noopener noreferrer">Protothreads - 维基百科</a></li><li><a href="https://en.wikipedia.org/wiki/Light_Weight_Kernel_Threads" target="_blank" rel="noopener noreferrer">轻量级内核线程 - 维基百科</a></li><li><a href="https://zh.wikipedia.org/wiki/%E8%BD%BB%E9%87%8F%E7%BA%A7%E8%BF%9B%E7%A8%8B" target="_blank" rel="noopener noreferrer">轻量级进程 - 维基百科</a></li><li><a href="https://en.wikipedia.org/wiki/Continuation" target="_blank" rel="noopener noreferrer">延续 - 维基百科</a></li><li><a href="https://github.com/topics/coroutines" target="_blank" rel="noopener noreferrer">https://github.com/topics/coroutines</a></li><li><a href="https://github.com/topics/coroutine" target="_blank" rel="noopener noreferrer">https://github.com/topics/coroutine</a></li><li><a href="https://github.com/topics/async" target="_blank" rel="noopener noreferrer">https://github.com/topics/async</a></li><li><a href="https://github.com/topics/async-await" target="_blank" rel="noopener noreferrer">https://github.com/topics/async-await</a></li><li><a href="https://github.com/topics/asynchronous" target="_blank" rel="noopener noreferrer">https://github.com/topics/asynchronous</a></li><li><a href="https://github.com/search?q=Protothreads" target="_blank" rel="noopener noreferrer">https://github.com/search?q=Protothreads</a></li></ul><ul><li><a href="https://www.zhihu.com/question/21483863" target="_blank" rel="noopener noreferrer">怎么理解coroutine ？</a></li><li><a href="https://www.jianshu.com/p/2782f8c49b2a" target="_blank" rel="noopener noreferrer">coroutine协程详解</a></li><li><a href="https://github.com/alibaba/coobjc/blob/master/README_cn.md#0x2-%E5%8D%8F%E7%A8%8B" target="_blank" rel="noopener noreferrer">协程</a></li><li><a href="https://zhuanlan.zhihu.com/p/473247446" target="_blank" rel="noopener noreferrer">图解 Goroutine（译）</a></li><li><a href="https://www.jianshu.com/p/82d06f9cf7b0" target="_blank" rel="noopener noreferrer">go语言的goroutine（协程）</a></li><li><a href="https://blog.csdn.net/qq_44800780/article/details/123128462" target="_blank" rel="noopener noreferrer">go 协程(Goroutine)详解</a></li><li><a href="https://www.cnblogs.com/ITPower/p/12324687.html" target="_blank" rel="noopener noreferrer">goroutine</a></li><li><a href="https://www.erlang.org/doc/getting_started/conc_prog.html" target="_blank" rel="noopener noreferrer">https://www.erlang.org/doc/getting_started/conc_prog.html</a></li><li><a href="https://www.erlang.org/doc/reference_manual/processes.html" target="_blank" rel="noopener noreferrer">https://www.erlang.org/doc/reference_manual/processes.html</a></li><li><a href="https://github.com/taskflow/taskflow" target="_blank" rel="noopener noreferrer">https://github.com/taskflow/taskflow</a></li><li><a href="https://github.com/lewissbaker/cppcoro" target="_blank" rel="noopener noreferrer">https://github.com/lewissbaker/cppcoro</a></li></ul><blockquote><p>协程（微线程、纤程、绿色线程、虚拟线程、用户线程、微线程）。是一种轻量级的用户态线程，实现的是非抢占式的调度，即由当前协程切换到其他协程由当前协程来控制。 协程本身可以做在用户态，每个协程的体积比线程要小得多，因此一个进程可以容纳数量相当可观的协程</p></blockquote><ul><li>coroutine解决的是&quot;协作式多任务&quot;</li><li>visitor（访问者）模式解决的是&quot;对修改关闭，对扩展开放&quot;, &quot;它使你可以在不改变各元素的类的前提下定义作用于这些元素的新操作&quot;</li></ul><blockquote><p>Java语言并没有对协程的原生支持，但是某些开源框架模拟出了协程的功能，<code>Project Loom</code> <code>AJDK-Wisp</code></p></blockquote><ul><li>Java虚拟线程 <a href="https://openjdk.org/jeps/425" target="_blank" rel="noopener noreferrer">https://openjdk.org/jeps/425</a></li><li><a href="https://www.infoq.cn/article/yabqqd7fd6kx97gbhkgm" target="_blank" rel="noopener noreferrer">虚拟线程：大规模 Java 应用的新基石</a></li><li><a href="https://www.cnblogs.com/tohxyblog/p/10712798.html" target="_blank" rel="noopener noreferrer">异步时代-java的协程路在何方</a></li><li><a href="https://blog.csdn.net/qiansg123/article/details/80123051" target="_blank" rel="noopener noreferrer">次时代Java编程（一）：Java里的协程</a></li><li><a href="http://kailing.pub/article/index/arcid/252.html" target="_blank" rel="noopener noreferrer">java协程框架quasar和kotlin中的协程</a></li></ul><p><strong>信号量</strong></p><p><a href="https://blog.csdn.net/gatieme/article/details/50994533" target="_blank" rel="noopener noreferrer">进程间通信之-信号量semaphore</a></p><blockquote><p>信号量的使用主要是用来保护共享资源，使得资源在一个时刻只有一个进程（线程）所拥有。</p></blockquote><blockquote><p>信号量的值为正的时候，说明它空闲。所测试的线程可以锁定而使用它。若为0，说明它被占用，测试的线程要进入睡眠队列中，等待被唤醒。</p></blockquote><p><strong>上下文切换</strong></p><p><a href="https://www.jianshu.com/p/6dde7f92951e" target="_blank" rel="noopener noreferrer">什么是进程、线程、协程</a></p><blockquote><p>进程的切换者是操作系统，切换时机是根据操作系统自己的切换策略，用户是无感知的。 进程的切换内容包括页全局目录、内核栈、硬件上下文，切换内容保存在内存中。进程切换过程是由“用户态到内核态到用户态”的方式，切换效率低。</p></blockquote><blockquote><p>线程的切换者是操作系统，切换时机是根据操作系统自己的切换策略，用户无感知。 线程的切换内容包括内核栈和硬件上下文。线程切换内容保存在内核栈中。线程切换过程是由“用户态到内核态到用户态”， 切换效率中等。</p></blockquote><blockquote><p>协程的切换者是用户（编程者或应用程序），切换时机是用户自己的程序所决定的。 协程的切换内容是硬件上下文，切换内存保存在用户自己的变量（用户栈或堆）中。协程的切换过程只有用户态，即没有陷入内核态，因此切换效率高。</p></blockquote><blockquote><p>多线程并不一定是要在多核处理器才支持的，就算是单核也是可以支持多线程的。</p><p>CPU 通过给每个线程分配一定的时间片，由于时间非常短通常是几十毫秒，所以 CPU 可以不停的切换线程执行任务从而达到了多线程的效果。</p><p>但是由于在线程切换的时候需要保存本次执行的信息，在该线程被 CPU 剥夺时间片后又再次运行恢复上次所保存的信息的过程就称为上下文切换。</p></blockquote><ul><li>上下文切换是非常耗效率的。通常有以下解决方案:</li></ul><ol><li>采用无锁编程，比如将数据按照 <code>Hash(id)</code> 进行取模分段，每个线程处理各自分段的数据，从而避免使用锁。</li><li>采用 CAS(compare and swap) 算法，如 <code>Atomic</code> 包就是采用 CAS 算法。</li><li>合理的创建线程，避免创建了一些线程但其中大部分都是处于 <code>waiting</code> 状态，因为每当从 <code>waiting</code> 状态切换到 <code>running</code> 状态都是一次上下文切换。</li></ol><h2 id="缓存" tabindex="-1"><a class="header-anchor" href="#缓存"><span>缓存</span></a></h2><ul><li><a href="https://www.zhihu.com/question/26190832" target="_blank" rel="noopener noreferrer">Cache 和 Buffer 都是缓存，主要区别是什么？</a></li><li><a href="https://www.cnblogs.com/mlgjb/p/7991903.html" target="_blank" rel="noopener noreferrer">缓冲区(buffer)与缓存(cache)</a></li><li><a href="https://blog.csdn.net/dangkun321/article/details/107161248" target="_blank" rel="noopener noreferrer">缓冲和缓存</a></li></ul><ul><li><a href="https://www.jianshu.com/p/d00348a9eb3b" target="_blank" rel="noopener noreferrer">缓存穿透、缓存击穿和缓存雪崩实践</a></li></ul><ul><li>缓存穿透</li></ul><blockquote><p>在高并发下，查询一个不存在的值时，缓存不会被命中，导致大量请求直接落到数据库上，如活动系统里面查询一个不存在的活动。</p></blockquote><ul><li>缓存击穿</li></ul><blockquote><p>在高并发下，对一个特定的值进行查询，但是这个时候缓存正好过期了，缓存没有命中，导致大量请求直接落到数据库上，如活动系统里面查询活动信息，但是在活动进行过程中活动缓存突然过期了。</p></blockquote><ul><li>缓存雪崩</li></ul><blockquote><p>在高并发下，大量的缓存key在同一时间失效，导致大量的请求落到数据库上，如活动系统里面同时进行着非常多的活动，但是在某个时间点所有的活动缓存全部过期。</p></blockquote><ul><li>缓存命中率</li></ul><blockquote><p>命中：直接从缓存中读取到想要的数据。</p><p>不命中：缓存中没有想要的数据，还需要到数据库进行一次查询才能读取到想要的数据。</p></blockquote><ul><li>缓存丢失</li></ul><p><strong>常见解决方案</strong></p><ul><li>直接缓存NULL值（时间不能过长，防止影响正常值）</li><li>过滤器（如白名单，符合某种规则等）</li><li>限流</li><li>缓存预热</li><li>分级缓存</li><li>缓存永远不过期</li></ul><p><strong>常见算法</strong></p><ol><li>Least Frequently Used (LFU)</li><li>Least Recently Used (LRU)</li><li>Least Recently Used2 (LRU2)</li><li>Two Queue (2Q)</li></ol><h2 id="锁和事务" tabindex="-1"><a class="header-anchor" href="#锁和事务"><span>锁和事务</span></a></h2><p><strong>锁</strong></p><blockquote><p>单进程的系统中，存在多线程同时操作一个公共变量，此时需要加锁对变量进行同步操作，保证多线程的操作线性执行消除并发修改。 解决的是单进程中的多线程并发问题。</p></blockquote><p><strong>分布式锁</strong></p><blockquote><p>只要的应用场景是在集群模式的多个相同服务，可能会部署在不同机器上，解决进程间安全问题，防止多进程同时操作一个变量或者数据库。 解决的是多进程的并发问题。</p></blockquote><p><strong>事务</strong></p><ul><li><a href="https://www.jianshu.com/p/73beee3c70e9" target="_blank" rel="noopener noreferrer">事物概念</a></li></ul><blockquote><p>解决一个会话过程中，上下文的修改对所有数据库表的操作要么全部成功，要不全部失败。所以应用在service层。 解决的是一个会话中的操作的数据一致性。</p></blockquote><p><strong>分布式事务</strong></p><blockquote><p>解决一个联动操作，比如一个商品的买卖分为:（1）添加商品到购物车，（2）修改商品库存-1； 此时购物车服务和商品库存服务可能部署在两台电脑，这时候需要保证对两个服务的操作都全部成功或者全部回退。 解决的是组合服务的数据操作的一致性问题。</p></blockquote><ul><li><a href="https://www.cnblogs.com/lijingshanxi/p/9943836.html" target="_blank" rel="noopener noreferrer">简单聊聊事务补偿机制</a></li><li><a href="https://zhuanlan.zhihu.com/p/46531628" target="_blank" rel="noopener noreferrer">Paxos和Raft的前世今生</a></li><li><a href="https://github.com/raft/raft.github.io" target="_blank" rel="noopener noreferrer">https://github.com/raft/raft.github.io</a><ul><li><a href="https://github.com/ongardie/raft.tla" target="_blank" rel="noopener noreferrer">https://github.com/ongardie/raft.tla</a></li><li><a href="http://lamport.azurewebsites.net/tla/tla.html" target="_blank" rel="noopener noreferrer">http://lamport.azurewebsites.net/tla/tla.html</a></li><li><a href="https://blog.csdn.net/weixin_44324814/article/details/128315537" target="_blank" rel="noopener noreferrer">Chaos 测试下的若干 NebulaGraph Raft 问题分析</a></li></ul></li></ul><h2 id="定时任务" tabindex="-1"><a class="header-anchor" href="#定时任务"><span>定时任务</span></a></h2><p><strong>分布式定时任务解决方案</strong></p><ul><li>分时方案：严格划分时间片，交替运行计划任务，当主系统宕机后，备用系统仍然工作，但处理初期被拉长</li><li>HA（High Availability）高可用方案：正常情况下主系统工作，备用系统守候，心跳检测发现主系统出现故障备用系统启动</li><li>多路心跳方案： <ul><li>采用多路心跳，做服务级，进程级的，IP和端口级别的心跳检测，正常情况是主系统工作，备用系统守候</li><li>心跳检测主系统出现故障，备用系统启动，当再次检测到主系统工作，则将执行权交回主系统</li></ul></li><li>任务抢占方案： <ul><li>A，B两台服务器同时工作，启动需要存在一前一后，谁先启动谁率先加锁，其他服务器只能等待</li><li>他们同时对互斥锁进行监控，一旦发现锁被释放，其他服务那个先抢到，那个运行，运行前加排他锁。</li></ul></li><li>任务轮询或任务轮询+抢占排队方案： <ul><li>每个服务器首次启动时加入队列；</li><li>每次任务运行首先判断自己是否是当前可运行任务，如果是便运行；</li><li>如果不是当前运行的任务，检查自己是否在队列中，如果在，便推出，如果不在队列中，便键入队列</li></ul></li></ul>',129))])}const k=i(g,[["render",u],["__file","技术概念.html.vue"]]),m=JSON.parse('{"path":"/PL/%E6%8A%80%E6%9C%AF%E6%A6%82%E5%BF%B5.html","title":"技术概念","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Flag","slug":"flag","link":"#flag","children":[]},{"level":2,"title":"编程范式","slug":"编程范式","link":"#编程范式","children":[]},{"level":2,"title":"设计模式及原则","slug":"设计模式及原则","link":"#设计模式及原则","children":[]},{"level":2,"title":"数据结构与算法","slug":"数据结构与算法","link":"#数据结构与算法","children":[{"level":3,"title":"算法复杂度","slug":"算法复杂度","link":"#算法复杂度","children":[]}]},{"level":2,"title":"迭代循环遍历递归","slug":"迭代循环遍历递归","link":"#迭代循环遍历递归","children":[]},{"level":2,"title":"directory和folder区别","slug":"directory和folder区别","link":"#directory和folder区别","children":[]},{"level":2,"title":"进程/线程/协程","slug":"进程-线程-协程","link":"#进程-线程-协程","children":[]},{"level":2,"title":"缓存","slug":"缓存","link":"#缓存","children":[]},{"level":2,"title":"锁和事务","slug":"锁和事务","link":"#锁和事务","children":[]},{"level":2,"title":"定时任务","slug":"定时任务","link":"#定时任务","children":[]}],"git":{"createdTime":1726030162000,"updatedTime":1726030162000,"contributors":[{"name":"onni-top","email":"admin@onni.top","commits":1}]},"readingTime":{"minutes":19.46,"words":5837},"filePathRelative":"PL/技术概念.md","localizedDate":"2024年9月11日","excerpt":"\\n\\n<h2>Flag</h2>\\n<blockquote>\\n<p>RESTful是一种架构风格，其核心是面向资源，更简单；而WebService底层SOAP协议，主要核心是面向活动；两个都是通过web请求调用接口</p>\\n</blockquote>\\n<ul>\\n<li><a href=\\"https://www.zhihu.com/question/52943496\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">端口映射和端口转发的区别？</a></li>\\n<li><a href=\\"https://www.cnblogs.com/weir110/p/9185151.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java的lambda表达式和JavaScript的箭头函数</a></li>\\n<li><a href=\\"https://zhuanlan.zhihu.com/p/560066640\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">图片与格式（上）BMP、JPEG、PNG、EXIF、RGB、色深、像素、分辨率</a></li>\\n</ul>"}');export{k as comp,m as data};
