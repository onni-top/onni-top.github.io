import{_ as l}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as n,c as s,b as d,e as r,w as i,a as o,o as p,d as a}from"./app-CPE2FVww.js";const h={},c={class:"table-of-contents"};function u(k,t){const e=n("router-link");return p(),s("div",null,[t[20]||(t[20]=d("h1",{id:"java注解",tabindex:"-1"},[d("a",{class:"header-anchor",href:"#java注解"},[d("span",null,"Java注解")])],-1)),d("nav",c,[d("ul",null,[d("li",null,[r(e,{to:"#flag"},{default:i(()=>t[0]||(t[0]=[a("Flag")])),_:1})]),d("li",null,[r(e,{to:"#jdk"},{default:i(()=>t[1]||(t[1]=[a("JDK")])),_:1})]),d("li",null,[r(e,{to:"#servlet"},{default:i(()=>t[2]||(t[2]=[a("Servlet")])),_:1})]),d("li",null,[r(e,{to:"#validation"},{default:i(()=>t[3]||(t[3]=[a("Validation")])),_:1})]),d("li",null,[r(e,{to:"#jax-rs"},{default:i(()=>t[4]||(t[4]=[a("JAX-RS")])),_:1})]),d("li",null,[r(e,{to:"#spring"},{default:i(()=>t[5]||(t[5]=[a("Spring")])),_:1}),d("ul",null,[d("li",null,[r(e,{to:"#声明bean的注解"},{default:i(()=>t[6]||(t[6]=[a("声明bean的注解")])),_:1})]),d("li",null,[r(e,{to:"#注入bean的注解"},{default:i(()=>t[7]||(t[7]=[a("注入bean的注解")])),_:1})]),d("li",null,[r(e,{to:"#java配置类相关注解"},{default:i(()=>t[8]||(t[8]=[a("java配置类相关注解")])),_:1})]),d("li",null,[r(e,{to:"#切面-aop-相关注解"},{default:i(()=>t[9]||(t[9]=[a("切面（AOP）相关注解")])),_:1})]),d("li",null,[r(e,{to:"#bean的属性支持"},{default:i(()=>t[10]||(t[10]=[a("@Bean的属性支持")])),_:1})]),d("li",null,[r(e,{to:"#value注解"},{default:i(()=>t[11]||(t[11]=[a("@Value注解")])),_:1})]),d("li",null,[r(e,{to:"#环境切换"},{default:i(()=>t[12]||(t[12]=[a("环境切换")])),_:1})]),d("li",null,[r(e,{to:"#异步相关"},{default:i(()=>t[13]||(t[13]=[a("异步相关")])),_:1})]),d("li",null,[r(e,{to:"#定时任务相关"},{default:i(()=>t[14]||(t[14]=[a("定时任务相关")])),_:1})]),d("li",null,[r(e,{to:"#enable-注解说明"},{default:i(()=>t[15]||(t[15]=[a("@Enable*注解说明")])),_:1})]),d("li",null,[r(e,{to:"#测试相关注解"},{default:i(()=>t[16]||(t[16]=[a("测试相关注解")])),_:1})]),d("li",null,[r(e,{to:"#springmvc注解"},{default:i(()=>t[17]||(t[17]=[a("SpringMVC注解")])),_:1})])])]),d("li",null,[r(e,{to:"#swagger2"},{default:i(()=>t[18]||(t[18]=[a("Swagger2")])),_:1})]),d("li",null,[r(e,{to:"#jackson"},{default:i(()=>t[19]||(t[19]=[a("Jackson")])),_:1})])])]),t[21]||(t[21]=o(`<h2 id="flag" tabindex="-1"><a class="header-anchor" href="#flag"><span>Flag</span></a></h2><blockquote><p>解释注解的方式：反射！反射是jdk中提供的一种机制，通过读取编译后的运行文件，反向获取类信息的一种手段！可以通过反射获取类、方法、成员变量上的运行时注解内容！</p></blockquote><blockquote><p>元注解: 能注解到注解上的注解，能用在其他注解上的注解</p></blockquote><ul><li><a href="https://www.runoob.com/w3cnote/java-annotation.html" target="_blank" rel="noopener noreferrer">Java 注解（Annotation）</a></li><li><a href="https://blog.csdn.net/linton1/article/details/93733508" target="_blank" rel="noopener noreferrer">Javadoc标签和Javadoc注释规范</a></li></ul><h2 id="jdk" tabindex="-1"><a class="header-anchor" href="#jdk"><span>JDK</span></a></h2><blockquote><p>从Java源码中提取的所有注解</p></blockquote><div class="language-python line-numbers-mode" data-highlighter="shiki" data-ext="python" data-title="python" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 获取所有Java中的注解</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os, re</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">dir_path</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;./jdk8u&quot;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">ans </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> set</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">() </span><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"># 无序的不重复元素序列</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> r, d, f </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">walk</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(dir_path):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    for</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> f:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        fp </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> os.path.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(r, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;.java&quot;</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> in</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> file</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> and</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> not</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">search</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;[0-9]+|Test&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;">file</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, re.I):</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            try</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                with</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> open</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fp, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;r&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#986801;--shiki-dark:#E06C75;--shiki-light-font-style:inherit;--shiki-dark-font-style:italic;">encoding</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;utf8&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">as</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> rf:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                    an </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> re.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">compile</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">r</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;public @interface </span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">(</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#D19A66;">*</span><span style="--shiki-light:#0184BC;--shiki-dark:#D19A66;">)</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> \\{</span><span style="--shiki-light:#0184BC;--shiki-dark:#E06C75;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, re.I).</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">findall</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(rf.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">read</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                    if</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> an </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">and</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;"> len</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(an) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> 0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">                        ans.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;@&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;"> an[</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">0</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">])</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            except</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">:</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">                pass</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#0184BC;--shiki-dark:#56B6C2;">\\n</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&#39;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#383A42;--shiki-dark:#61AFEF;">join</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(ans))</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>注解</th><th>版本</th><th>说明</th></tr></thead><tbody><tr><td>@WebParam</td><td></td><td>表示方法的参数</td></tr><tr><td>@Oneway</td><td></td><td>表示为只有输入消息而没有输出消息的 Web Service 单向操作</td></tr><tr><td>@WebResult</td><td></td><td>表示方法的返回值</td></tr><tr><td>@HandlerChain</td><td></td><td>使 Web Service 与外部定义的处理程序链相关联。</td></tr><tr><td>@WebService</td><td></td><td>用于对接口，类进行注解，表示要发布的web服务</td></tr><tr><td>@WebMethod</td><td></td><td>该注解用于用@WebService注解的类或接口的方法上，表示要发布的方法</td></tr><tr><td>@SOAPMessageHandlers</td><td></td><td></td></tr><tr><td>@SOAPMessageHandler</td><td></td><td></td></tr><tr><td>@SOAPBinding</td><td></td><td>SOAP绑定类型：RPC、DOCUMENT</td></tr><tr><td>@InitParam</td><td></td><td></td></tr><tr><td>@Resource</td><td></td><td></td></tr><tr><td>@Resources</td><td></td><td></td></tr><tr><td>@PreDestroy</td><td>Servlet2.5</td><td>被@PreDestroy修饰的方法会在服务器卸载Servlet之前运行，并且只会被服务器调用一次</td></tr><tr><td>@Generated</td><td></td><td></td></tr><tr><td>@PostConstruct</td><td>Servlet2.5</td><td>被@PostConstruct修饰的方法会在服务器加载Servle且构造函数之后执行，并且只会被服务器执行一次</td></tr><tr><td>@RespectBinding</td><td></td><td></td></tr><tr><td>@ResponseWrapper</td><td></td><td></td></tr><tr><td>@WebServiceRefs</td><td></td><td></td></tr><tr><td>@Action</td><td></td><td></td></tr><tr><td>@RequestWrapper</td><td></td><td></td></tr><tr><td>@WebServiceProvider</td><td></td><td></td></tr><tr><td>@WebServiceRef</td><td></td><td></td></tr><tr><td>@FaultAction</td><td></td><td></td></tr><tr><td>@WebFault</td><td></td><td></td></tr><tr><td>@ServiceMode</td><td></td><td></td></tr><tr><td>@WebEndpoint</td><td></td><td></td></tr><tr><td>@BindingType</td><td></td><td></td></tr><tr><td>@WebServiceClient</td><td></td><td></td></tr><tr><td>@Addressing</td><td></td><td></td></tr><tr><td>@MTOM</td><td></td><td></td></tr><tr><td>@WebServiceFeatureAnnotation</td><td></td><td></td></tr><tr><td>@XmlSeeAlso</td><td></td><td></td></tr><tr><td>@XmlElementDecl</td><td></td><td></td></tr><tr><td>@XmlIDREF</td><td></td><td></td></tr><tr><td>@XmlValue</td><td></td><td></td></tr><tr><td>@XmlAccessorType</td><td></td><td>控制字段或属性的序列化</td></tr><tr><td>@XmlMixed</td><td></td><td></td></tr><tr><td>@XmlID</td><td></td><td></td></tr><tr><td>@XmlRootElement</td><td></td><td>根节点,将Java类或枚举类型映射到XML元素</td></tr><tr><td>@XmlElementRef</td><td></td><td></td></tr><tr><td>@XmlEnum</td><td></td><td></td></tr><tr><td>@XmlElementWrapper</td><td></td><td>对于数组或集合（即包含多个元素的成员变量），生成一个包装该数组或集合的XML元素（称为包装器）</td></tr><tr><td>@XmlEnumValue</td><td></td><td></td></tr><tr><td>@XmlType</td><td></td><td>对于@XmlElementWrapper标注的属性，不能出现在@XmlType的propOrder列表中</td></tr><tr><td>@XmlAccessorOrder</td><td></td><td>控制JAXB 绑定类中属性和字段的排序</td></tr><tr><td>@XmlSchemaTypes</td><td></td><td></td></tr><tr><td>@XmlInlineBinaryData</td><td></td><td></td></tr><tr><td>@XmlSchema</td><td></td><td></td></tr><tr><td>@XmlAnyElement</td><td></td><td></td></tr><tr><td>@XmlSchemaType</td><td></td><td></td></tr><tr><td>@XmlRegistry</td><td></td><td></td></tr><tr><td>@XmlList</td><td></td><td></td></tr><tr><td>@XmlAttribute</td><td></td><td>将Java类的一个属性映射到与属性同名的一个XML元素</td></tr><tr><td>@XmlAttachmentRef</td><td></td><td></td></tr><tr><td>@XmlNs</td><td></td><td></td></tr><tr><td>@XmlMimeType</td><td></td><td></td></tr><tr><td>@XmlElements</td><td></td><td></td></tr><tr><td>@XmlElement</td><td></td><td>对于所有@XmlElement标注过的属性，必须出现在@XmlType的propOrder列表中</td></tr><tr><td>@XmlElementRefs</td><td></td><td></td></tr><tr><td>@XmlTransient</td><td></td><td></td></tr><tr><td>@XmlAnyAttribute</td><td></td><td></td></tr><tr><td>@XmlJavaTypeAdapters</td><td></td><td></td></tr><tr><td>@XmlJavaTypeAdapter</td><td></td><td>使用定制的适配器（即扩展抽象类XmlAdapter并覆盖marshal()和unmarshal()方法），以序列化Java类为XML</td></tr><tr><td>@Interned</td><td></td><td></td></tr><tr><td>@NotNull</td><td></td><td></td></tr><tr><td>@Nullable</td><td></td><td></td></tr><tr><td>@MessageDumping</td><td></td><td></td></tr><tr><td>@FeatureConstructor</td><td></td><td></td></tr><tr><td>@FeatureListValidatorAnnotation</td><td></td><td></td></tr><tr><td>@InstanceResolverAnnotation</td><td></td><td></td></tr><tr><td>@SchemaValidation</td><td></td><td></td></tr><tr><td>@Serialization</td><td></td><td></td></tr><tr><td>@StreamingAttachment</td><td></td><td></td></tr><tr><td>@UsesJAXBContext</td><td></td><td></td></tr><tr><td>@MemberSubmissionAddressing</td><td></td><td></td></tr><tr><td>@XmlAccessorFactory</td><td></td><td></td></tr><tr><td>@OverrideAnnotationOf</td><td></td><td></td></tr><tr><td>@XmlIsSet</td><td></td><td></td></tr><tr><td>@XmlLocation</td><td></td><td></td></tr><tr><td>@WsgenProtocol</td><td></td><td></td></tr><tr><td>@InheritedAttributes</td><td></td><td></td></tr><tr><td>@DescriptorFields</td><td></td><td></td></tr><tr><td>@ParameterNames</td><td></td><td></td></tr><tr><td>@ManagedAttribute</td><td></td><td></td></tr><tr><td>@AMXMetadata</td><td></td><td></td></tr><tr><td>@InheritedAttribute</td><td></td><td></td></tr><tr><td>@IncludeSubclass</td><td></td><td></td></tr><tr><td>@ManagedData</td><td></td><td></td></tr><tr><td>@ManagedOperation</td><td></td><td></td></tr><tr><td>@Description</td><td></td><td></td></tr><tr><td>@NameValue</td><td></td><td></td></tr><tr><td>@ManagedObject</td><td></td><td></td></tr><tr><td>@DescriptorKey</td><td></td><td></td></tr><tr><td>@Taxonomy</td><td></td><td></td></tr><tr><td>@Reset</td><td></td><td></td></tr><tr><td>@ProbeParam</td><td></td><td></td></tr><tr><td>@ProbeProvider</td><td></td><td></td></tr><tr><td>@Probe</td><td></td><td></td></tr><tr><td>@ProbeListener</td><td></td><td></td></tr><tr><td>@EnvelopeStyle</td><td></td><td></td></tr><tr><td>@Property</td><td></td><td></td></tr><tr><td>@DatabindingMode</td><td></td><td></td></tr><tr><td>@Reference</td><td></td><td></td></tr><tr><td>@Immutable</td><td></td><td></td></tr><tr><td>@Ignore</td><td></td><td></td></tr><tr><td>@Logger</td><td></td><td></td></tr><tr><td>@Setter</td><td></td><td></td></tr><tr><td>@Constructor</td><td></td><td></td></tr><tr><td>@Optimistic</td><td></td><td></td></tr><tr><td>@SpecializedFunction</td><td></td><td></td></tr><tr><td>@ScriptClass</td><td></td><td></td></tr><tr><td>@Function</td><td></td><td></td></tr><tr><td>@Getter</td><td></td><td></td></tr><tr><td>@CallerSensitive</td><td></td><td></td></tr><tr><td>@Contended</td><td></td><td></td></tr><tr><td>@MXBean</td><td></td><td></td></tr><tr><td>@ProbeName</td><td></td><td></td></tr><tr><td>@ProviderName</td><td></td><td></td></tr><tr><td>@Attributes</td><td></td><td></td></tr><tr><td>@NameAttributes</td><td></td><td></td></tr><tr><td>@ProviderAttributes</td><td></td><td></td></tr><tr><td>@FunctionAttributes</td><td></td><td></td></tr><tr><td>@ModuleName</td><td></td><td></td></tr><tr><td>@ModuleAttributes</td><td></td><td></td></tr><tr><td>@ArgsAttributes</td><td></td><td></td></tr><tr><td>@FunctionName</td><td></td><td></td></tr><tr><td>@ConstructorProperties</td><td></td><td></td></tr><tr><td>@Transient</td><td></td><td></td></tr><tr><td>@Deprecated</td><td>jdk1.5</td><td>内置注解：用于标志过时的类、方法和成员变量</td></tr><tr><td>@FunctionalInterface</td><td>jdk1.8</td><td>函数式接口注解，用于定义函数式接口</td></tr><tr><td>@SafeVarargs</td><td>jdk1.7</td><td>参数安全类型注解，用于提示用户参数安全</td></tr><tr><td>@Override</td><td>jdk1.5</td><td>内置注解：用于修饰重写的方法</td></tr><tr><td>@SuppressWarnings</td><td>jdk1.5</td><td>内置注解：用户忽略@Deprecated标志过的警告</td></tr><tr><td>@Repeatable</td><td>jdk1.8</td><td>表示注解的属性可以重复！@Repeatable通俗来讲，就是注解容器！</td></tr><tr><td>@Inherited</td><td>jdk1.5</td><td>元注解：子类继承父类的注解（子类没有任何注解修饰）</td></tr><tr><td>@Retention</td><td>jdk1.5</td><td>元注解：表示注解保留周期</td></tr><tr><td>@Documented</td><td>jdk1.5</td><td>元注解：将注解写入文档</td></tr><tr><td>@Target</td><td>jdk1.5</td><td>元注解：表示注解可以使用在什么地方</td></tr><tr><td>@Native</td><td>jdk1.8</td><td>生成本机头文件的工具的提示，以确定是否需要头文件，如果需要，它应该包含哪些声明。</td></tr><tr><td>@Validate</td><td></td><td></td></tr><tr><td>@RequireContainer</td><td></td><td></td></tr><tr><td>@Require</td><td></td><td></td></tr><tr><td>@Exported</td><td></td><td></td></tr><tr><td>@SupportedOptions</td><td></td><td></td></tr><tr><td>@SupportedAnnotationTypes</td><td></td><td></td></tr><tr><td>@SupportedSourceVersion</td><td></td><td></td></tr><tr><td>@Trusted</td><td></td><td></td></tr></tbody></table><h2 id="servlet" tabindex="-1"><a class="header-anchor" href="#servlet"><span>Servlet</span></a></h2><blockquote><p><code>Tomcat 7.0</code>及以上版本的<code>server.api</code>才有注解</p></blockquote><ul><li><code>servlet.jar</code> 是<code>servlet 3.0</code>版本之前的地址</li><li><code>javax.servlet-api.jar</code> 是<code>servlet 3.0</code>版本之后的地址</li></ul><ul><li><a href="https://github.com/eclipse-ee4j/servlet-api" target="_blank" rel="noopener noreferrer">https://github.com/eclipse-ee4j/servlet-api</a></li></ul><table><thead><tr><th>注解</th><th>版本</th><th>说明</th></tr></thead><tbody><tr><td>@WebServlet</td><td>Servlet3.0</td><td>用于声明servlet</td></tr><tr><td>@WebListener</td><td>Servlet3.0</td><td>用于声明过监听器，可通过控制filter的文件名来控制执行顺序</td></tr><tr><td>@WebFilter</td><td>Servlet3.0</td><td>用于声明过滤器</td></tr><tr><td>@WebInitParam</td><td>Servlet3.0</td><td>为 Servlet 或者过滤器指定初始化参数，配置@WebServlet或@WebFilter时使用</td></tr><tr><td>@MultipartConfig</td><td>Servlet3.0</td><td>HttpServletRequest 提供的对上传文件的支持，该注解标注在 Servlet 上面</td></tr><tr><td>@HandlesTypes</td><td></td><td></td></tr><tr><td>@HttpConstraint</td><td></td><td></td></tr><tr><td>@HttpMethodConstraint</td><td></td><td></td></tr><tr><td>@ServletSecurity</td><td></td><td></td></tr></tbody></table><h2 id="validation" tabindex="-1"><a class="header-anchor" href="#validation"><span>Validation</span></a></h2><blockquote><p><code>JSR-303</code>是<code>JAVA EE 6</code>中的一项子规范，叫做<code>Bean Validation</code>，但是这只是一个接口，没有具体实现。</p></blockquote><ul><li><a href="https://github.com/topics/validation" target="_blank" rel="noopener noreferrer">https://github.com/topics/validation</a></li><li><a href="https://github.com/topics/validator" target="_blank" rel="noopener noreferrer">https://github.com/topics/validator</a></li></ul><ul><li><a href="https://github.com/apache/commons-validator" target="_blank" rel="noopener noreferrer">https://github.com/apache/commons-validator</a></li><li><a href="https://github.com/apache/bval" target="_blank" rel="noopener noreferrer">https://github.com/apache/bval</a></li><li><a href="https://github.com/jakartaee/validation" target="_blank" rel="noopener noreferrer">https://github.com/jakartaee/validation</a><ul><li><a href="https://beanvalidation.org" target="_blank" rel="noopener noreferrer">https://beanvalidation.org</a></li><li><a href="https://github.com/hibernate/hibernate-validator" target="_blank" rel="noopener noreferrer">https://github.com/hibernate/hibernate-validator</a></li><li><a href="https://github.com/nomemory/java-bean-validation-extension" target="_blank" rel="noopener noreferrer">https://github.com/nomemory/java-bean-validation-extension</a></li><li><a href="https://github.com/Baeldung/spring-security-registration" target="_blank" rel="noopener noreferrer">https://github.com/Baeldung/spring-security-registration</a></li><li><a href="https://github.com/jirutka/validator-collection" target="_blank" rel="noopener noreferrer">https://github.com/jirutka/validator-collection</a></li><li><a href="https://github.com/Naoghuman/lib-validation" target="_blank" rel="noopener noreferrer">https://github.com/Naoghuman/lib-validation</a></li></ul></li><li><a href="https://github.com/neoremind/fluent-validator" target="_blank" rel="noopener noreferrer">https://github.com/neoremind/fluent-validator</a></li><li><a href="https://github.com/making/yavi" target="_blank" rel="noopener noreferrer">https://github.com/making/yavi</a></li></ul><blockquote><p><code>javax.validation.Validation</code>、<code>hibernate-validator</code>和<code>Spring validtor</code> 提供了<code>JSR 303</code>规范中所有内置constraint 的实现，除此之外还有一些附加的 constraint</p></blockquote><ul><li><a href="https://juejin.im/post/5d3fbeb46fb9a06b317b3c48" target="_blank" rel="noopener noreferrer">这么写参数校验(validator)就不会被劝退了</a></li><li><a href="https://blog.csdn.net/king101125s/article/details/104356059" target="_blank" rel="noopener noreferrer">四款数据校验的类(Validate)</a></li></ul><table><thead><tr><th>注解</th><th>支持Java类型</th><th>备注</th></tr></thead><tbody><tr><td>@AssertFalse</td><td>Boolean, boolean</td><td>验证元素值必须为flase</td></tr><tr><td>@AssertTrue</td><td>Boolean, boolean</td><td>验证元素值必须为true，否则抛异常</td></tr><tr><td>@CreditCardNumber</td><td>CharSequence</td><td>验证信用卡号码是否有效</td></tr><tr><td>@DecimalMax</td><td>Object</td><td>验证数值是否小于等于指定值</td></tr><tr><td>@DecimalMin</td><td>CharSequence</td><td>验证数值是否大于等于指定值</td></tr><tr><td>@Digits(integer = 3, fraction = 2)</td><td>Long, Integer, Double, Float</td><td>验证注解的元素值的整数位数和小数位数上限</td></tr><tr><td>@Email</td><td>CharSequence</td><td>验证元素必须是电子邮箱地址</td></tr><tr><td>@Future</td><td>java.util.Date, java.util.Calendar</td><td>验证日期为当前时间之后</td></tr><tr><td>@FutureOrPresent</td><td>java.util.Date, java.util.Calendar</td><td>验证日期为当前时间或之后一个时间</td></tr><tr><td>@Length(min=,max=)</td><td>CharSequence</td><td>验证元素值包含在一个区间</td></tr><tr><td>@Max</td><td>CharSequence</td><td>检验当前数值小于等于指定值</td></tr><tr><td>@Min</td><td>BigDecimal, BigInteger, byte, short,int, long,Number.</td><td>检验当前数值大于等于指定值</td></tr><tr><td>@NotBlank</td><td>CharSequence</td><td>验证元素值不为null且移除两边空格后长度大于0</td></tr><tr><td>@NotEmpty</td><td>CharSequence,Collection,Map and Arrays</td><td>验证元素值不为null且不为空（字符串长度不为0、集合大小不为0）</td></tr><tr><td>@NotNull</td><td>Object</td><td>验证元素值不能为 null</td></tr><tr><td>@Null</td><td>Object</td><td>验证元素值为null</td></tr><tr><td>@Past</td><td>java.util.Date, java.util.Calendar</td><td>验证日期为当前时间之前</td></tr><tr><td>@PastOrPresent</td><td>java.util.Date, java.util.Calendar</td><td>验证日期为当前时间或之前</td></tr><tr><td>@Pattern(regex=,flag=)</td><td>CharSequence</td><td>验证元素必须符合指定的正则表达式</td></tr><tr><td>@Range(min=,max=,message=)</td><td>CharSequence</td><td>验证数值为指定值区间范围内</td></tr><tr><td>@Size(max=, min=)</td><td>String,Collection,Map,arrays,CharSequence</td><td>验证元素个数包含在一个区间</td></tr><tr><td>@UniqueElements</td><td>Collection</td><td>校验集合中的元素必须保持唯一 否则异常</td></tr><tr><td>@URL</td><td>CharSequence</td><td>验证日期为当前时间之前</td></tr><tr><td>@Valid</td><td>Object</td><td>验证关联对象元素进行递归校验检查</td></tr><tr><td>@ScriptAssert</td><td>CharSequence</td><td>脚本表达式的计算结果为true</td></tr><tr><td>@SafeHtml</td><td>CharSequence</td><td>可能包含不安全的html内容</td></tr></tbody></table><h2 id="jax-rs" tabindex="-1"><a class="header-anchor" href="#jax-rs"><span>JAX-RS</span></a></h2><blockquote><p><code>Jersey</code>和<code>CxF</code>框架实现了<code>JSR311</code>/<code>JSR339</code>标准</p></blockquote><p><strong>jersey常用注解</strong></p><ul><li><a href="https://github.com/eclipse-ee4j/jersey" target="_blank" rel="noopener noreferrer">https://github.com/eclipse-ee4j/jersey</a></li></ul><table><thead><tr><th>Annotation</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>@GET</td><td>查询请求</td><td>相当于数据库的查询数据操作</td></tr><tr><td>@PUT</td><td>更新请求</td><td>相当于数据库的更新数据操作</td></tr><tr><td>@POST</td><td>插入请求</td><td>相当于数据库的插入数据操作</td></tr><tr><td>@DELETE</td><td>删除请求</td><td>相当于数据的删除数据操作</td></tr><tr><td>@Path</td><td>uri路径</td><td>定义资源的访问路径，client通过这个路径访问资源。比如：@Path(&quot;user&quot;)</td></tr><tr><td>@Produces</td><td>指定返回MIME格式</td><td>资源按照那种数据格式返回，可取的值有：MediaType.APPLICATION_XXX。比如：@Produces(MediaType.APPLICATION_XML)</td></tr><tr><td>@Consumes</td><td>接受指定的MIME格式</td><td>只有符合这个参数设置的请求再能访问到这个资源。比如@Consumes(&quot;application/x-www-form-urlencoded&quot;)</td></tr><tr><td>@PathParam</td><td>uri路径参数</td><td>写在方法的参数中，获得请求路径参数。比如：@PathParam(&quot;username&quot;) String userName</td></tr><tr><td>@QueryParam</td><td>uri路径请求参数</td><td>写在方法的参数中，获得请求路径附带的参数。比如：@QueryParam(&quot;desc&quot;) String desc</td></tr><tr><td>@DefaultValue</td><td>设置@QueryParam参数的默认值</td><td>如果@QueryParam没有接收到值，就使用默认值。比如：@DefaultValue(&quot;description&quot;) @QueryParam(&quot;desc&quot;) String desc</td></tr><tr><td>@FormParam</td><td>form传递的参数</td><td>接受form传递过来的参数。比如：@FormParam(&quot;name&quot;) String userName</td></tr><tr><td>@BeanParam</td><td>通过Bean的形式传递参数</td><td>接受client传递的bean类型的参数，同时这个bean可以在属性上配置@FormParam用以解决client的属性名称和bean的属性名称不一致的问题。比如：@BeanParam User user</td></tr><tr><td>@Context</td><td>获得一些系统环境信息</td><td>通过@Context可以获得以下信息：UriInfo、ServletConfig、ServletContext、HttpServletRequest、HttpServletResponse和HttpHeaders等</td></tr></tbody></table><h2 id="spring" tabindex="-1"><a class="header-anchor" href="#spring"><span>Spring</span></a></h2><h3 id="声明bean的注解" tabindex="-1"><a class="header-anchor" href="#声明bean的注解"><span>声明bean的注解</span></a></h3><ul><li><code>@Component</code> 组件，没有明确的角色</li><li><code>@Service</code> 在业务逻辑层使用（service层）</li><li><code>@Repository</code> 在数据访问层使用（dao层）</li><li><code>@Controller</code> 在展现层使用，控制器的声明（C）</li></ul><h3 id="注入bean的注解" tabindex="-1"><a class="header-anchor" href="#注入bean的注解"><span>注入bean的注解</span></a></h3><blockquote><p>都可以注解在set方法和属性上，推荐注解在属性上（一目了然，少写代码）。</p></blockquote><ul><li><code>@Autowired</code> 由Spring提供（Spring上下文已有实例（已注入IOC），<code>@Autowired</code>只是取一下）</li><li><code>@Inject</code> 由JSR-330提供</li><li><code>@Resource</code> 由JSR-250提供</li></ul><h3 id="java配置类相关注解" tabindex="-1"><a class="header-anchor" href="#java配置类相关注解"><span>java配置类相关注解</span></a></h3><ul><li><code>@Configuration</code> 声明当前类为配置类，相当于xml形式的Spring配置（类上）</li><li><code>@Bean</code> 注解在方法上，声明当前方法的返回值为一个bean，替代xml中的方式（方法上）</li><li><code>@Configuration</code> 声明当前类为配置类，其中内部组合了<code>@Component</code>注解，表明这个类是一个bean（类上）</li><li><code>@ComponentScan</code> 用于对Component进行扫描，相当于xml中的（类上）</li><li><code>@WishlyConfiguration</code> 为<code>@Configuration</code>与<code>@ComponentScan</code>的组合注解，可以替代这两个注解</li></ul><h3 id="切面-aop-相关注解" tabindex="-1"><a class="header-anchor" href="#切面-aop-相关注解"><span>切面（AOP）相关注解</span></a></h3><blockquote><p>Spring支持AspectJ的注解式切面编程。</p></blockquote><ul><li><code>@Aspect</code> 声明一个切面（类上）</li></ul><blockquote><p>使用<code>@After</code>、<code>@Before</code>、<code>@Around</code>定义建言（advice），可直接将拦截规则（切点）作为参数。</p></blockquote><ul><li><code>@After</code> 在方法执行之后执行（方法上）</li><li><code>@Before</code> 在方法执行之前执行（方法上）</li><li><code>@Around</code> 在方法执行之前与之后执行（方法上）</li><li><code>@PointCut</code> 声明切点</li></ul><blockquote><p>在java配置类中使用<code>@EnableAspectJAutoProxy</code>注解开启Spring对AspectJ代理的支持（类上）</p></blockquote><table><thead><tr><th>AOP配置元素</th><th>描述</th></tr></thead><tbody><tr><td><code>&lt;aop:advisor&gt;</code></td><td>定义AOP通知器</td></tr><tr><td><code>&lt;aop:after&gt;</code></td><td>定义AOP后置通知（不管该方法是否执行成功）</td></tr><tr><td><code>&lt;aop:after-returning&gt;</code></td><td>在方法成功执行后调用通知</td></tr><tr><td><code>&lt;aop:after-throwing&gt;</code></td><td>在方法抛出异常后调用通知</td></tr><tr><td><code>&lt;aop:around&gt;</code></td><td>定义AOP环绕通知</td></tr><tr><td><code>&lt;aop:aspect&gt;</code></td><td>定义切面</td></tr><tr><td><code>&lt;aop:aspect-autoproxy&gt;</code></td><td>定义<code>@AspectJ</code>注解驱动的切面</td></tr><tr><td><code>&lt;aop:before&gt;</code></td><td>定义AOP前置通知</td></tr><tr><td><code>&lt;aop:config&gt;</code></td><td>顶层的AOP配置元素，大多数的<a href="aop:*" target="_blank" rel="noopener noreferrer">aop:*</a>包含在<a href="aop:config" target="_blank" rel="noopener noreferrer">aop:config</a>元素内</td></tr><tr><td><code>&lt;aop:declare-parent&gt;</code></td><td>为被通知的对象引入额外的接口，并透明的实现</td></tr><tr><td><code>&lt;aop:pointcut&gt;</code></td><td>定义切点</td></tr></tbody></table><h3 id="bean的属性支持" tabindex="-1"><a class="header-anchor" href="#bean的属性支持"><span>@Bean的属性支持</span></a></h3><blockquote><p><code>@Bean</code> 手动创建一个实例，并保留在IOC中，当我们引用第三方库中的类需要装配到Spring容器时，可以通过<code>@Bean</code>来实现</p></blockquote><ul><li><code>@Scope</code> 设置Spring容器如何新建Bean实例（方法上，得有<code>@Bean</code>）,其设置类型包括： <ul><li><code>Singleton</code> （单例,一个Spring容器中只有一个bean实例，默认模式）,</li><li><code>Protetype</code> （每次调用新建一个bean）,</li><li><code>Request</code> （web项目中，给每个http request新建一个bean）,</li><li><code>Session</code> （web项目中，给每个http session新建一个bean）,</li><li><code>GlobalSession</code>（给每一个 global http session新建一个Bean实例）</li></ul></li><li><code>@StepScope</code> 在Spring Batch中还有涉及</li><li><code>@PostConstruct</code> 由JSR-250提供，在构造函数执行完之后执行，等价于xml配置文件中bean的initMethod</li><li><code>@PreDestory</code> 由JSR-250提供，在Bean销毁之前执行，等价于xml配置文件中bean的destroyMethod</li></ul><h3 id="value注解" tabindex="-1"><a class="header-anchor" href="#value注解"><span>@Value注解</span></a></h3><blockquote><p><code>@Value</code> 为属性注入值（属性上）</p></blockquote><ul><li><code>@Value(&quot;Michael Jackson&quot;)</code> String name; 注入普通字符</li><li><code>@Value(&quot;#{systemProperties[&#39;os.name&#39;]}&quot;)</code> String osName; 注入操作系统属性</li><li><code>@Value(&quot;#{ T(java.lang.Math).random() * 100 }&quot;)</code> String randomNumber; 注入表达式结果</li><li><code>@Value(&quot;#{domeClass.name}&quot;)</code> String name; 注入其它bean属性</li><li><code>@Value(&quot;classpath:com/hgs/hello/test.txt&quot;)</code> String Resource file; 注入文件资源</li><li><code>@Value(&quot;http://www.cznovel.com&quot;)</code> Resource url; 注入网站资源</li><li><code>@Value(&quot;\${book.name}&quot;)</code> String bookName; 注入配置文件</li></ul><p><strong>注入配置使用方法</strong></p><blockquote><p>编写配置文件（test.properties）</p></blockquote><div class="language-conf line-numbers-mode" data-highlighter="shiki" data-ext="conf" data-title="conf" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span>book.name = test</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li><code>@PropertySource</code> 加载配置文件(类上)</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">@</span><span style="--shiki-light:#A626A4;--shiki-dark:#E5C07B;">PropertySource</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;classpath:/test.propertie&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><ul><li>还需配置一个<code>PropertySourcesPlaceholderConfigurer</code>的bean。</li></ul><h3 id="环境切换" tabindex="-1"><a class="header-anchor" href="#环境切换"><span>环境切换</span></a></h3><ul><li><code>@Profile</code> 通过设定Environment的ActiveProfiles来设定当前context需要使用的配置环境。（类或方法上）</li><li><code>@Conditional</code> Spring4中可以使用此注解定义条件话的bean，通过实现Condition接口，并重写matches方法，从而决定该bean是否被实例化。（方法上）</li></ul><h3 id="异步相关" tabindex="-1"><a class="header-anchor" href="#异步相关"><span>异步相关</span></a></h3><ul><li><code>@EnableAsync</code> 配置类中，通过此注解开启对异步任务的支持，叙事性AsyncConfigurer接口（类上）</li><li><code>@Async</code> 在实际执行的bean方法使用该注解来申明其是一个异步任务（方法上或类上所有的方法都将异步，需要@EnableAsync开启异步任务）</li></ul><h3 id="定时任务相关" tabindex="-1"><a class="header-anchor" href="#定时任务相关"><span>定时任务相关</span></a></h3><ul><li><code>@EnableScheduling</code> 在配置类上使用，开启计划任务的支持（类上）</li><li><code>@Scheduled</code> 来申明这是一个任务，包括cron,fixDelay,fixRate等类型（方法上，需先开启计划任务的支持）</li></ul><h3 id="enable-注解说明" tabindex="-1"><a class="header-anchor" href="#enable-注解说明"><span>@Enable*注解说明</span></a></h3><blockquote><p>这些注解主要用来开启对xxx的支持。</p></blockquote><ul><li><code>@EnableAspectJAutoProxy</code> 开启对AspectJ自动代理的支持</li><li><code>@EnableAsync</code> 开启异步方法的支持</li><li><code>@EnableScheduling</code> 开启计划任务的支持</li><li><code>@EnableWebMvc</code> 开启Web MVC的配置支持</li><li><code>@EnableConfigurationProperties</code> 开启对<code>@ConfigurationProperties</code>注解配置Bean的支持</li><li><code>@EnableJpaRepositories</code> 开启对SpringData JPA Repository的支持</li><li><code>@EnableTransactionManagement</code> 开启注解式事务的支持</li><li><code>@EnableTransactionManagement</code> 开启注解式事务的支持</li><li><code>@EnableCaching</code> 开启注解式的缓存支持</li></ul><h3 id="测试相关注解" tabindex="-1"><a class="header-anchor" href="#测试相关注解"><span>测试相关注解</span></a></h3><ul><li><code>@RunWith</code> 运行器，Spring中通常用于对JUnit的支持 <code>@RunWith(SpringJUnit4ClassRunner.class)</code></li><li><code>@ContextConfiguration</code> 用来加载配置ApplicationContext，其中classes属性用来加载配置类 <code>@ContextConfiguration(classes={TestConfig.class})</code></li><li><code>@WebAppConfiguration</code></li></ul><h3 id="springmvc注解" tabindex="-1"><a class="header-anchor" href="#springmvc注解"><span>SpringMVC注解</span></a></h3><ul><li><code>@EnableWebMvc</code> 在配置类中开启Web MVC的配置支持，如一些ViewResolver或者MessageConverter等，若无此句，重写WebMvcConfigurerAdapter方法（用于对SpringMVC的配置）。</li><li><code>@Controller</code> 声明该类为SpringMVC中的Controller</li><li><code>@RestController</code> 该注解为一个组合注解，相当于<code>@Controller</code>和<code>@ResponseBody</code>的组合</li><li><code>@RequestMapping</code> 用于映射Web请求，包括访问路径和参数（类或方法上） <ul><li><code>@PathVariable</code> 用于接收url路径上使用<code>{}</code>声明的参数，将注解放在参数中前，即可获取该值，通常作为Restful的接口实现方法。 <ul><li><a href="https://blog.csdn.net/m0_56069948/article/details/124791784" target="_blank" rel="noopener noreferrer">获取Spring中@PathVariable注解里带点的完整参数</a></li></ul></li><li><code>@RequestParam</code> 用于接收参数（如果变量名与参数名相同可不使用此注解），<code>GET</code>为<code>?</code>后面的查询参数，<code>POST</code>为body中的表单参数和URL参数；</li><li><code>@RequestBody</code> 适用于请求体格式为<code>application/json</code>，只能用于接收JSON对象，body中的内容</li><li><code>@RequestPart</code> 适用于请求体格式为<code>multipart/form-data</code>，可嵌套复杂的请求域（JSON，XML），既可以接收对象又可以接收二进制数据</li><li><code>@ModelAttribute</code></li><li><code>@RequestPayload</code> 用于处理入站SOAP消息的请求部分</li></ul></li><li><code>@ResponseBody</code> 将返回内容序列化为json字符串（返回值旁或方法上）</li><li><code>@CookieValue</code></li><li><code>@CrossOrigin</code></li><li><code>@Mapping</code></li><li><code>@PutMapping</code></li><li><code>@PatchMapping</code></li><li><code>@PostMapping</code></li><li><code>@DeleteMapping</code></li><li><code>@GetMapping</code></li><li><code>@ValueConstants</code></li><li><code>@MatrixVariable</code></li><li><code>@RequestHeader</code></li><li><code>@RequestAttribute</code></li><li><code>@SessionAttributes</code></li><li><code>@SessionAttribute</code></li><li><code>@ResponseStatus</code></li><li><code>@ControllerAdvice</code> 全局控制器，注解了<code>@Controller</code>的类的方法可使用，这对所有注解了<code>@RequestMapping</code>的控制器内的方法有效。 <ul><li><code>@ExceptionHandler</code> 用于全局处理控制器里的异常处理方法（全局异常捕获）</li><li><code>@InitBinder</code> 用来设置WebDataBinder（用来自动绑定前台请求参数到Model中）。</li><li><code>@ModelAttribute</code> 本来的作用是绑定键值对到Model里，在<code>@ControllerAdvice</code>中是让全局的<code>@RequestMapping</code>都能获得在此处设置的键值对。</li></ul></li><li><code>@RestControllerAdvice</code></li></ul><h2 id="swagger2" tabindex="-1"><a class="header-anchor" href="#swagger2"><span>Swagger2</span></a></h2><table><thead><tr><th>注解名称</th><th>注解属性</th><th>作用域</th><th>属性作用</th></tr></thead><tbody><tr><td>@Api</td><td>tags</td><td>类</td><td>说明该类的作用</td></tr><tr><td></td><td>value</td><td>类</td><td>说明该类的作用</td></tr><tr><td>@ApiOperation()</td><td>value</td><td>方法</td><td>描述方法作用</td></tr><tr><td></td><td>notes</td><td>方法</td><td>提示内容</td></tr><tr><td></td><td>tags</td><td>方法</td><td>分组</td></tr><tr><td>@ApiParam()</td><td>name</td><td>方法参数</td><td>参数名</td></tr><tr><td></td><td>value</td><td>方法参数</td><td>参数说明</td></tr><tr><td></td><td>required</td><td>方法参数</td><td>是否必填</td></tr><tr><td>@ApiModel()</td><td>value</td><td>类</td><td>对象名</td></tr><tr><td></td><td>description</td><td>类</td><td>描述</td></tr><tr><td>@ApiModelProperty()</td><td>value</td><td>方法</td><td>字段说明</td></tr><tr><td></td><td>name</td><td>方法</td><td>属性名</td></tr><tr><td></td><td>dataType</td><td>方法</td><td>属性类型</td></tr><tr><td></td><td>required</td><td>方法</td><td>是否必填</td></tr><tr><td></td><td>example</td><td>方法</td><td>举例</td></tr><tr><td></td><td>hidden</td><td>方法</td><td>隐藏</td></tr><tr><td>@ApiImplicitParam()</td><td>value</td><td>方法</td><td>参数说明</td></tr><tr><td></td><td>name</td><td>方法</td><td>参数名</td></tr><tr><td></td><td>dataType</td><td>方法</td><td>数据类型</td></tr><tr><td></td><td>paramType</td><td>方法</td><td>参数类型</td></tr><tr><td></td><td>example</td><td>方法</td><td>举例</td></tr><tr><td>@ApiResponse()</td><td>response</td><td>方法</td><td>返回类</td></tr><tr><td></td><td>code</td><td>方法</td><td>返回码</td></tr><tr><td></td><td>message</td><td>方法</td><td>返回信息</td></tr><tr><td></td><td>examples</td><td>方法</td><td>例子</td></tr></tbody></table><table><thead><tr><th>注解</th><th>属性</th><th>值</th><th>备注</th></tr></thead><tbody><tr><td>@Api</td><td>value</td><td>字符串</td><td>可用在class头上,class描述</td></tr><tr><td></td><td>description</td><td>字符串</td><td></td></tr><tr><td></td><td></td><td></td><td>@Api(value = &quot;xxx&quot;, description = &quot;xxx&quot;)</td></tr><tr><td>@ApiOperation</td><td>value</td><td>字符串</td><td>可用在方法头上.参数的描述容器</td></tr><tr><td></td><td>notes</td><td>字符串</td><td></td></tr><tr><td></td><td></td><td></td><td>@ApiOperation(value = &quot;xxx&quot;, notes = &quot;xxx&quot;)</td></tr><tr><td>@ApiImplicitParams</td><td>{}</td><td>@ApiImplicitParam数组</td><td>可用在方法头上.参数的描述容器</td></tr><tr><td></td><td></td><td></td><td>@ApiImplicitParams({@ApiImplicitParam1,@ApiImplicitParam2,...})</td></tr><tr><td>@ApiImplicitParam</td><td>name</td><td>字符串 与参数命名对应</td><td>可用在@ApiImplicitParams里</td></tr><tr><td></td><td>value</td><td>字符串</td><td>参数中文描述</td></tr><tr><td></td><td>required</td><td>布尔值</td><td>true/false</td></tr><tr><td></td><td>dataType</td><td>字符串</td><td>参数类型</td></tr><tr><td></td><td>paramType</td><td>字符串</td><td>参数请求方式:query/path</td></tr><tr><td></td><td></td><td></td><td>query:对应@RequestParam?传递</td></tr><tr><td></td><td></td><td></td><td>path: 对应@PathVariable{}path传递</td></tr><tr><td></td><td>defaultValue</td><td>字符串</td><td>在api测试中默认值</td></tr><tr><td></td><td></td><td></td><td>用例参见项目中的设置</td></tr><tr><td>@ApiResponses</td><td>{}</td><td>@ApiResponse数组</td><td>可用在方法头上.参数的描述容器</td></tr><tr><td></td><td></td><td></td><td>@ApiResponses({@ApiResponse1,@ApiResponse2,...})</td></tr><tr><td>@ApiResponse</td><td>code</td><td>整形</td><td>可用在@ApiResponses里</td></tr><tr><td></td><td>message</td><td>字符串</td><td>错误描述</td></tr><tr><td></td><td></td><td></td><td>@ApiResponse(code = 200, message = &quot;Successful&quot;)</td></tr></tbody></table><h2 id="jackson" tabindex="-1"><a class="header-anchor" href="#jackson"><span>Jackson</span></a></h2><table><thead><tr><th>注解名称</th><th>作用域</th><th>说明</th></tr></thead><tbody><tr><td>@JacksonAnnotation</td><td></td><td></td></tr><tr><td>@JacksonAnnotationsInside</td><td></td><td></td></tr><tr><td>@JacksonAnnotationValue</td><td></td><td></td></tr><tr><td>@JacksonInject</td><td></td><td></td></tr><tr><td>@JsonAlias</td><td></td><td></td></tr><tr><td>@JsonAnyGetter</td><td></td><td></td></tr><tr><td>@JsonAnySetter</td><td></td><td></td></tr><tr><td>@JsonAutoDetect</td><td></td><td></td></tr><tr><td>@JsonBackReference</td><td></td><td></td></tr><tr><td>@JsonClassDescription</td><td></td><td></td></tr><tr><td>@JsonCreator</td><td></td><td></td></tr><tr><td>@JsonEnumDefaultValue</td><td></td><td></td></tr><tr><td>@JsonFilter</td><td></td><td></td></tr><tr><td>@JsonFormat</td><td></td><td>格式化</td></tr><tr><td>@JsonGetter</td><td></td><td></td></tr><tr><td>@JsonIdentityInfo</td><td></td><td></td></tr><tr><td>@JsonIdentityReference</td><td></td><td></td></tr><tr><td>@JsonIgnore</td><td></td><td></td></tr><tr><td>@JsonIgnoreProperties</td><td></td><td></td></tr><tr><td>@JsonIgnoreType</td><td></td><td></td></tr><tr><td>@JsonInclude</td><td></td><td></td></tr><tr><td>@JsonManagedReference</td><td></td><td></td></tr><tr><td>@JsonMerge</td><td></td><td></td></tr><tr><td>@JsonProperty</td><td></td><td></td></tr><tr><td>@JsonPropertyDescription</td><td></td><td></td></tr><tr><td>@JsonPropertyOrder</td><td></td><td></td></tr><tr><td>@JsonRawValue</td><td></td><td></td></tr><tr><td>@JsonRootName</td><td></td><td></td></tr><tr><td>@JsonSetter</td><td></td><td></td></tr><tr><td>@JsonSubTypes</td><td></td><td></td></tr><tr><td>@JsonTypeId</td><td></td><td></td></tr><tr><td>@JsonTypeInfo</td><td></td><td></td></tr><tr><td>@JsonTypeName</td><td></td><td></td></tr><tr><td>@JsonUnwrapped</td><td></td><td></td></tr><tr><td>@JsonValue</td><td></td><td></td></tr><tr><td>@JsonView</td><td></td><td></td></tr></tbody></table>`,70))])}const A=l(h,[["render",u],["__file","Java注解.html.vue"]]),m=JSON.parse('{"path":"/Java/Java%E6%B3%A8%E8%A7%A3.html","title":"Java注解","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Flag","slug":"flag","link":"#flag","children":[]},{"level":2,"title":"JDK","slug":"jdk","link":"#jdk","children":[]},{"level":2,"title":"Servlet","slug":"servlet","link":"#servlet","children":[]},{"level":2,"title":"Validation","slug":"validation","link":"#validation","children":[]},{"level":2,"title":"JAX-RS","slug":"jax-rs","link":"#jax-rs","children":[]},{"level":2,"title":"Spring","slug":"spring","link":"#spring","children":[{"level":3,"title":"声明bean的注解","slug":"声明bean的注解","link":"#声明bean的注解","children":[]},{"level":3,"title":"注入bean的注解","slug":"注入bean的注解","link":"#注入bean的注解","children":[]},{"level":3,"title":"java配置类相关注解","slug":"java配置类相关注解","link":"#java配置类相关注解","children":[]},{"level":3,"title":"切面（AOP）相关注解","slug":"切面-aop-相关注解","link":"#切面-aop-相关注解","children":[]},{"level":3,"title":"@Bean的属性支持","slug":"bean的属性支持","link":"#bean的属性支持","children":[]},{"level":3,"title":"@Value注解","slug":"value注解","link":"#value注解","children":[]},{"level":3,"title":"环境切换","slug":"环境切换","link":"#环境切换","children":[]},{"level":3,"title":"异步相关","slug":"异步相关","link":"#异步相关","children":[]},{"level":3,"title":"定时任务相关","slug":"定时任务相关","link":"#定时任务相关","children":[]},{"level":3,"title":"@Enable*注解说明","slug":"enable-注解说明","link":"#enable-注解说明","children":[]},{"level":3,"title":"测试相关注解","slug":"测试相关注解","link":"#测试相关注解","children":[]},{"level":3,"title":"SpringMVC注解","slug":"springmvc注解","link":"#springmvc注解","children":[]}]},{"level":2,"title":"Swagger2","slug":"swagger2","link":"#swagger2","children":[]},{"level":2,"title":"Jackson","slug":"jackson","link":"#jackson","children":[]}],"git":{"createdTime":1726030162000,"updatedTime":1726030162000,"contributors":[{"name":"onni-top","email":"admin@onni.top","commits":1}]},"readingTime":{"minutes":14.18,"words":4255},"filePathRelative":"Java/Java注解.md","localizedDate":"2024年9月11日","excerpt":"\\n\\n<h2>Flag</h2>\\n<blockquote>\\n<p>解释注解的方式：反射！反射是jdk中提供的一种机制，通过读取编译后的运行文件，反向获取类信息的一种手段！可以通过反射获取类、方法、成员变量上的运行时注解内容！</p>\\n</blockquote>\\n<blockquote>\\n<p>元注解: 能注解到注解上的注解，能用在其他注解上的注解</p>\\n</blockquote>\\n<ul>\\n<li><a href=\\"https://www.runoob.com/w3cnote/java-annotation.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java 注解（Annotation）</a></li>\\n<li><a href=\\"https://blog.csdn.net/linton1/article/details/93733508\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Javadoc标签和Javadoc注释规范</a></li>\\n</ul>"}');export{A as comp,m as data};
