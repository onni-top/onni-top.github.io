import{_ as n}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r,c as d,b as i,d as s,w as e,a as h,o,e as l}from"./app--VhlLr_b.js";const p="/images/Java%E5%86%85%E7%BD%AE%E5%BC%82%E5%B8%B8.png",k={},c={class:"table-of-contents"};function g(u,t){const a=r("router-link");return o(),d("div",null,[t[15]||(t[15]=i("h1",{id:"java笔记",tabindex:"-1"},[i("a",{class:"header-anchor",href:"#java笔记"},[i("span",null,"Java笔记")])],-1)),i("nav",c,[i("ul",null,[i("li",null,[s(a,{to:"#flag"},{default:e(()=>t[0]||(t[0]=[l("Flag")])),_:1})]),i("li",null,[s(a,{to:"#代码块文档注释"},{default:e(()=>t[1]||(t[1]=[l("代码块文档注释")])),_:1})]),i("li",null,[s(a,{to:"#多行字符串"},{default:e(()=>t[2]||(t[2]=[l("多行字符串")])),_:1})]),i("li",null,[s(a,{to:"#函数重载"},{default:e(()=>t[3]||(t[3]=[l("函数重载")])),_:1})]),i("li",null,[s(a,{to:"#关键保留字"},{default:e(()=>t[4]||(t[4]=[l("关键保留字")])),_:1})]),i("li",null,[s(a,{to:"#访问控制修饰符"},{default:e(()=>t[5]||(t[5]=[l("访问控制修饰符")])),_:1})]),i("li",null,[s(a,{to:"#classpath意义"},{default:e(()=>t[6]||(t[6]=[l("classpath意义")])),_:1})]),i("li",null,[s(a,{to:"#日期时间"},{default:e(()=>t[7]||(t[7]=[l("日期时间")])),_:1})]),i("li",null,[s(a,{to:"#roundingmode"},{default:e(()=>t[8]||(t[8]=[l("RoundingMode")])),_:1}),i("ul",null,[i("li",null,[s(a,{to:"#几个参数详解"},{default:e(()=>t[9]||(t[9]=[l("几个参数详解")])),_:1})])])]),i("li",null,[s(a,{to:"#java锁"},{default:e(()=>t[10]||(t[10]=[l("Java锁")])),_:1}),i("ul",null,[i("li",null,[s(a,{to:"#synchronized"},{default:e(()=>t[11]||(t[11]=[l("synchronized")])),_:1})])])]),i("li",null,[s(a,{to:"#java异常"},{default:e(()=>t[12]||(t[12]=[l("Java异常")])),_:1})]),i("li",null,[s(a,{to:"#http"},{default:e(()=>t[13]||(t[13]=[l("HTTP")])),_:1})]),i("li",null,[s(a,{to:"#泛型generics"},{default:e(()=>t[14]||(t[14]=[l("泛型generics")])),_:1})])])]),t[16]||(t[16]=h(`<h2 id="flag" tabindex="-1"><a class="header-anchor" href="#flag"><span>Flag</span></a></h2><ul><li><a href="https://www.yiibai.com/html/java" target="_blank" rel="noopener noreferrer">https://www.yiibai.com/html/java/</a></li></ul><ul><li><a href="https://www.zhihu.com/question/26762707/answer/890181997" target="_blank" rel="noopener noreferrer">什么是 hash</a></li><li><a href="https://www.jianshu.com/p/101c263cd93e" target="_blank" rel="noopener noreferrer">什么是散列表(Hash Table)</a></li><li><a href="https://yuanrengu.com/2020/ba184259.html" target="_blank" rel="noopener noreferrer">HashMap在Jdk1.7和1.8中的实现</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6059914.html" target="_blank" rel="noopener noreferrer">HashMap的底层结构和实现原理</a></li><li><a href="https://www.cnblogs.com/chengxiao/p/6842045.html" target="_blank" rel="noopener noreferrer">ConcurrentHashMap实现原理及源码分析</a></li><li><a href="https://www.zcfy.cc/article/data-structures-for-beginners-arrays-hashmaps-and-lists" target="_blank" rel="noopener noreferrer">初学者应该了解的数据结构：Array、HashMap 与 List</a></li></ul><ul><li><a href="https://zhuanlan.zhihu.com/p/67949045" target="_blank" rel="noopener noreferrer">强一致性、弱一致性、最终一致性、读写一致性、单调读、因果一致性 的区别与联系</a></li><li><a href="http://www.ruanyifeng.com/blog/2018/07/cap.html" target="_blank" rel="noopener noreferrer">CAP 定理的含义</a></li><li><a href="https://www.cnblogs.com/c-x-a/p/9478643.html" target="_blank" rel="noopener noreferrer">二进制运算</a></li><li><a href="https://www.jianshu.com/p/d75b0a461380" target="_blank" rel="noopener noreferrer">什么是位运算</a></li><li><a href="https://blog.csdn.net/shuaigexiaobo/article/details/88535745" target="_blank" rel="noopener noreferrer">java运算符</a></li><li><a href="https://www.cnblogs.com/itfly8/p/6062757.html" target="_blank" rel="noopener noreferrer">数据库扩展性设计：使用二进制解决一条记录关联多个状态的问题</a></li><li><a href="https://www.zhihu.com/question/24980208" target="_blank" rel="noopener noreferrer">Java8新特性有哪些</a></li><li><a href="https://www.zhihu.com/question/44199956" target="_blank" rel="noopener noreferrer">fastjson这么快老外为啥还是热衷 jackson?</a></li><li><a href="https://blog.csdn.net/dogiant/article/details/54907506" target="_blank" rel="noopener noreferrer">JAX-WS与JAX-RS区别是什么？</a></li><li><a href="https://blog.csdn.net/zzg19950824/article/details/80300501" target="_blank" rel="noopener noreferrer">接口框架 : WebService与Jersey RESTful 要点梳理</a></li><li><a href="https://www.jianshu.com/p/d670c6485ff9" target="_blank" rel="noopener noreferrer">JAVA多线程使用场景和注意事项</a></li><li>Java持久性API(Java Persistence API) <a href="https://en.wikipedia.org/wiki/Java_Persistence_API" target="_blank" rel="noopener noreferrer">https://en.wikipedia.org/wiki/Java_Persistence_API</a></li><li><a href="https://www.cnblogs.com/linlinismine/p/9295701.html" target="_blank" rel="noopener noreferrer">fork/join 全面剖析</a></li><li><a href="https://mp.weixin.qq.com/s/mA8ZqShP0p_t1toTzqpW3Q" target="_blank" rel="noopener noreferrer">收集业务日志，提炼有效数据</a></li><li><a href="https://www.cnblogs.com/xiejava/p/12452434.html" target="_blank" rel="noopener noreferrer">通过filebeat、logstash、rsyslog采集nginx日志的几种方式</a></li><li><a href="https://www.cnblogs.com/haoxinyue/p/5208136.html" target="_blank" rel="noopener noreferrer">分布式系统唯一ID生成方案汇总</a><ul><li><a href="https://www.cnblogs.com/throwable/p/13467763.html" target="_blank" rel="noopener noreferrer">理解Snowflake算法的实现原理</a></li></ul></li><li><a href="https://crossoverjie.top/2019/07/15/wheel/cicada7-exception-handle" target="_blank" rel="noopener noreferrer">设计一个全局异常处理器</a></li><li><a href="https://www.cnblogs.com/zhangboyu/p/7580262.html" target="_blank" rel="noopener noreferrer">理解、学习与使用 JAVA 中的 OPTIONAL</a></li><li><a href="https://blog.csdn.net/qq_39615545/article/details/108116820" target="_blank" rel="noopener noreferrer">理解零拷贝（Zero-copy）</a></li><li><a href="https://www.dazhuanlan.com/2019/10/16/5da5f67797300" target="_blank" rel="noopener noreferrer">可代替 ASM，使用 AnnotationProcessor 做代码插桩</a></li><li><a href="https://blog.csdn.net/qq_41022073/article/details/105342238" target="_blank" rel="noopener noreferrer">动态代理和Lombok学习</a></li><li><a href="https://www.cnblogs.com/woetu/p/13658575.html" target="_blank" rel="noopener noreferrer">Spring AOP和Lombok是什么原理？</a></li><li><a href="https://www.liaoxuefeng.com/wiki/1252599548343744/1331429187256353" target="_blank" rel="noopener noreferrer">java.lang.Record替代Lombok</a></li><li><a href="https://www.cnblogs.com/vandusty/p/12757992.html" target="_blank" rel="noopener noreferrer">这四种对象属性拷贝方式，你都知道吗？</a></li><li><a href="https://zhuanlan.zhihu.com/p/86282401" target="_blank" rel="noopener noreferrer">领域模型转换那些事儿</a></li><li><a href="https://www.cnblogs.com/ElEGenT/p/13158108.html" target="_blank" rel="noopener noreferrer">Java正则多次匹配和多次组匹配</a></li><li><a href="https://www.zhihu.com/people/rednaxelafx" target="_blank" rel="noopener noreferrer">https://www.zhihu.com/people/rednaxelafx</a></li><li><a href="https://segmentfault.com/a/1190000009162306" target="_blank" rel="noopener noreferrer">Java 正则表达式详解</a></li><li><a href="https://www.zhihu.com/question/28001771" target="_blank" rel="noopener noreferrer">java的native方法</a></li></ul><ul><li>JMH（Java Microbenchmark Harness）是专门用于代码微基准测试的工具套件</li><li><a href="https://blog.csdn.net/gybshen/article/details/82717578" target="_blank" rel="noopener noreferrer">什么是JNDI？</a></li><li><a href="https://www.cnblogs.com/Oliver1993/p/13630786.html" target="_blank" rel="noopener noreferrer">Web项目中Junit测试如何添加JNDI</a></li><li><a href="https://github.com/h-thurow/Simple-JNDI" target="_blank" rel="noopener noreferrer">https://github.com/h-thurow/Simple-JNDI</a></li></ul><blockquote><p>JNDI是Java Naming and Directory Interface（Java命名与目录接口）其实和Spring依赖注入差不多的效果， 就是我们可以将我们需要的类注册进去，然后一般我们都是使用该类的实例对象，这时候因为刚才我们已经给每个类按照JNDI的规范进行了注入， 这时候我们直接通过JNDI的使用规则取出来我们想要的数据（实例对象）即可。</p></blockquote><ul><li>有状态就是有数据存储功能。有状态对象(Stateful Bean)，就是有实例变量的对象，可以保存数据，是非线程安全的。在不同方法调用间不保留任何状态。</li><li>无状态就是一次操作，不能保存数据。无状态对象(Stateless Bean)，就是没有实例变量的对象 .不能保存数据，是不变类，是线程安全的。</li></ul><p><strong>Windows隐藏窗口后台运行jar包（推荐vbs可设置JVM参数）</strong></p><ul><li><a href="/files/hidden_run_jar.bat">hidden_run_jar.bat</a></li><li><a href="/files/hidden_run_jar.vbs">hidden_run_jar.vbs</a></li></ul><h2 id="代码块文档注释" tabindex="-1"><a class="header-anchor" href="#代码块文档注释"><span>代码块文档注释</span></a></h2><blockquote><p>一定要用<code>&lt;pre&gt;{@code }&lt;/pre&gt;</code>包裹代码块，或者进行HTML编码转义，否则将丢失格式</p></blockquote><ul><li><code>{@code ... }</code> 用来包裹代码块，这样可以在JavaDoc中保留代码的格式，并且正确处理HTML标签和相关的特殊字符，如小于号<code>&lt;</code>和大于号<code>&gt;</code>。</li><li><code>&lt;pre&gt;</code> 是预格式化文本的HTML标签，它告诉JavaDoc这里的文本应该按照预设格式显示，保留空白字符，如空格和换行符。</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">/**</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * &lt;pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * List&lt;Map&lt;String, Object&gt;&gt; n = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * {@code</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * List&lt;Map&lt;String, Object&gt;&gt; n = new ArrayList&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * Map&lt;String, Object&gt; map = new HashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * List&amp;lt;Map&amp;lt;String, Object&amp;gt;&amp;gt; n = new ArrayList&amp;lt;&amp;gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * Map&amp;lt;String, Object&amp;gt; map = new HashMap&amp;lt;&amp;gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> * &lt;/pre&gt;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> *</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;"> */</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="多行字符串" tabindex="-1"><a class="header-anchor" href="#多行字符串"><span>多行字符串</span></a></h2><ul><li>Multiline String 多行字符串</li><li>Template String 模板字符串</li><li>Text Blocks 文本块</li></ul><blockquote><p>Java 13 Text Blocks 第一次预览版，Java 14 Text Blocks 第二次预览版，Java 15 Text Blocks 正式版</p></blockquote><h2 id="函数重载" tabindex="-1"><a class="header-anchor" href="#函数重载"><span>函数重载</span></a></h2><ul><li>方法名相同,方法参数的个数和类型不同,通过个数和类型的不同来区分不同的函数;</li><li>方法的重载跟返回值类型和修饰符无关,Java的重载是发生在本类中的,重载的条件是在本类中有多个方法名相同;</li><li>参数列表不同(参数个数不同、参数类型不同)跟返回值无关;</li></ul><h2 id="关键保留字" tabindex="-1"><a class="header-anchor" href="#关键保留字"><span>关键保留字</span></a></h2><ul><li><a href="https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html" target="_blank" rel="noopener noreferrer">https://docs.oracle.com/javase/tutorial/java/nutsandbolts/_keywords.html</a></li></ul><table><thead><tr><th>名称</th><th>说明</th></tr></thead><tbody><tr><td>private</td><td>一种访问控制方式：私用模式</td></tr><tr><td>protected</td><td>一种访问控制方式：保护模式</td></tr><tr><td>public</td><td>一种访问控制方式：共用模式</td></tr><tr><td>abstract</td><td>表明类或者成员方法具有抽象属性</td></tr><tr><td>class</td><td>类</td></tr><tr><td>extends</td><td>表明一个类型是另一个类型的子类型，这里常见的类型有类和接口</td></tr><tr><td>final</td><td>用来说明最终属性，表明一个类不能派生出子类，或者成员方法不能被覆盖，或者成员域的值不能被改变</td></tr><tr><td>implements</td><td>表明一个类实现了给定的接口</td></tr><tr><td>interface</td><td>接口</td></tr><tr><td>native</td><td>用来声明一个方法是由与计算机相关的语言（如C/C++/FORTRAN语言）实现的</td></tr><tr><td>new</td><td>用来创建新实例对象</td></tr><tr><td>static</td><td>表明具有静态属性</td></tr><tr><td>strictfp</td><td>用来声明FP_strict（单精度或双精度浮点数）表达式遵循IEEE 754算术规范</td></tr><tr><td>synchronized</td><td>表明一段代码需要同步执行</td></tr><tr><td>transient</td><td>声明不用序列化的成员域</td></tr><tr><td>volatile</td><td>表明两个或者多个变量必须同步地发生变化</td></tr><tr><td>break</td><td>提前跳出一个块</td></tr><tr><td>continue</td><td>回到一个块的开始处</td></tr><tr><td>return</td><td>从成员方法中返回数据</td></tr><tr><td>do</td><td>用在do-while循环结构中</td></tr><tr><td>while</td><td>用在循环结构中</td></tr><tr><td>if</td><td>条件语句的引导词</td></tr><tr><td>else</td><td>用在条件语句中，表明当条件不成立时的分支</td></tr><tr><td>for</td><td>一种循环结构的引导词</td></tr><tr><td>instanceof</td><td>用来测试一个对象是否是指定类型的实例对象</td></tr><tr><td>switch</td><td>分支语句结构的引导词</td></tr><tr><td>case</td><td>用在switch语句之中，表示其中的一个分支</td></tr><tr><td>default</td><td>默认，例如，用在switch语句中，表明一个默认的分支</td></tr><tr><td>try</td><td>尝试一个可能抛出异常的程序块</td></tr><tr><td>catch</td><td>用在异常处理中，用来捕捉异常</td></tr><tr><td>throw</td><td>抛出一个异常</td></tr><tr><td>throws</td><td>声明在当前定义的成员方法中所有需要抛出的异常</td></tr><tr><td>import</td><td>表明要访问指定的类或包</td></tr><tr><td>package</td><td>包</td></tr><tr><td>boolean</td><td>基本数据类型之一，布尔类型</td></tr><tr><td>byte</td><td>基本数据类型之一，字节类型</td></tr><tr><td>char</td><td>基本数据类型之一，字符类型</td></tr><tr><td>double</td><td>基本数据类型之一，双精度浮点数类型</td></tr><tr><td>float</td><td>基本数据类型之一，单精度浮点数类型</td></tr><tr><td>int</td><td>基本数据类型之一，整数类型</td></tr><tr><td>long</td><td>基本数据类型之一，长整数类型</td></tr><tr><td>short</td><td>基本数据类型之一,短整数类型</td></tr><tr><td>super</td><td>表明当前对象的父类型的引用或者父类型的构造方法</td></tr><tr><td>this</td><td>指向当前实例对象的引用</td></tr><tr><td>void</td><td>声明当前成员方法没有返回值</td></tr><tr><td>goto</td><td>保留关键字，没有具体含义</td></tr><tr><td>const</td><td>保留关键字，没有具体含义</td></tr></tbody></table><h2 id="访问控制修饰符" tabindex="-1"><a class="header-anchor" href="#访问控制修饰符"><span>访问控制修饰符</span></a></h2><table><thead><tr><th>修饰符</th><th>当前类</th><th>同一包内</th><th>子孙类(同一包)</th><th>子孙类(不同包)</th><th>其他包</th></tr></thead><tbody><tr><td>public(interface default)</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td><td>Y</td></tr><tr><td>protected</td><td>Y</td><td>Y</td><td>Y</td><td>Y/N</td><td>N</td></tr><tr><td>default</td><td>Y</td><td>Y</td><td>Y</td><td>N</td><td>N</td></tr><tr><td>private</td><td>Y</td><td>N</td><td>N</td><td>N</td><td>N</td></tr></tbody></table><p><strong><code>protected</code>需要从以下两个点来分析说明</strong></p><blockquote><p>子类与基类在同一包中：被声明为<code>protected</code>的变量、方法和构造器能被同一个包中的任何其他类访问；</p></blockquote><blockquote><p>子类与基类不在同一包中：那么在子类中，子类实例可以访问其从基类继承而来的<code>protected</code>方法，而不能访问基类实例的<code>protected</code>方法。</p></blockquote><h2 id="classpath意义" tabindex="-1"><a class="header-anchor" href="#classpath意义"><span>classpath意义</span></a></h2><ul><li><a href="https://segmentfault.com/a/1190000015802324" target="_blank" rel="noopener noreferrer">java项目中的classpath到底是什么</a></li><li><a href="https://blog.csdn.net/qq_30038111/article/details/82116559" target="_blank" rel="noopener noreferrer">spring classpath:和classpath*:区别和实际应用</a></li><li><a href="https://blog.csdn.net/qq_33393542/article/details/80322141" target="_blank" rel="noopener noreferrer">java项目中的classpath到底指向的哪里</a></li><li><a href="https://blog.csdn.net/pengmm1990/article/details/68951389" target="_blank" rel="noopener noreferrer">eclipse项目中.classpath文件详解</a></li></ul><ul><li><code>classpath</code>：只会到你的<code>class</code>路径中查找文件，和<code>classpath:/</code>是等价的，都是相对于类的根路径 <ul><li><code>src</code>不是<code>classpath</code>，<code>WEB-INF/classes</code>和<code>lib</code>才是<code>classpath</code>，<code>WEB-INF/</code>是资源目录, 客户端不能直接访问</li><li><code>WEB-INF/classes</code>目录存放<code>src</code>目录<code>java</code>文件编译之后的<code>class</code>文件、<code>xml</code>、<code>properties</code>等资源配置文件</li><li><code>lib</code>和<code>classes</code>同属<code>classpath</code>，两者的访问优先级为: <code>lib</code> &gt; <code>classes</code></li></ul></li><li><code>classpath*</code>：不仅包含<code>class</code>路径，还包括<code>jar</code>文件中（<code>class</code>路径）进行查找</li></ul><blockquote><p>注意：用<code>classpath*</code>需要遍历所有的<code>classpath</code>，所以加载速度是很慢，尽量避免使用。 <code>**</code>表示在任意目录下，也就是说在<code>WEB-INF/classes/</code>下任意层的目录</p></blockquote><table><thead><tr><th>前缀</th><th>例子</th><th>说明</th></tr></thead><tbody><tr><td>classpath:</td><td>classpath:com/myapp/config.xml</td><td>从classpath中加载。</td></tr><tr><td>file:</td><td>file:/data/config.xml</td><td>作为 URL 从文件系统中加载。</td></tr><tr><td>http:</td><td>http://myserver/logo.png</td><td>作为 URL 加载。</td></tr><tr><td>(none)</td><td>/data/config.xml</td><td>根据 ApplicationContext 进行判断。</td></tr></tbody></table><h2 id="日期时间" tabindex="-1"><a class="header-anchor" href="#日期时间"><span>日期时间</span></a></h2><ul><li><a href="https://codertang.com/2018/12/24/jdk8-datetime" target="_blank" rel="noopener noreferrer">jdk8时间日期</a></li></ul><ul><li>可变性 : 像日期和时间这样的类应该是不可变的,返回一个值,原来的对象不变</li><li>偏移性 : Date中的年份是从1900开始的,而月份是从0开始的</li><li>日期表示需要减<code>new Date(2020-1900,9-1,8)</code> 这样才可以表示2020年9月8日</li><li>格式化: 格式化日期只对Date有用,Calendar则不行</li><li>线程不安全的,不能处理闰秒等</li><li>Java8吸收了<code>Joda-Time</code>（该项目作者参与了Java8的time包开发）精华，开启了新的API</li></ul><p><strong>java.lang.System类</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 用于返回当前时间与1970年1月1日0:0:0之间以毫秒为单位的时间戳</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> native</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> currentTimeMillis</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 返回正在运行的Java虚拟机的当前值,高分辨率时间源，以纳秒为单位</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> static</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> native</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> long</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> nanoTime</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><table><thead><tr><th>变量名</th><th>说明</th></tr></thead><tbody><tr><td>java.version</td><td>Java运行时环境版本</td></tr><tr><td>java.vendor</td><td>Java运行时环境供应商</td></tr><tr><td>java.vendor.url</td><td>Java供应商的 URL</td></tr><tr><td>java.home</td><td>Java安装目录</td></tr><tr><td>java.vm.specification.version</td><td>Java虚拟机规范版本</td></tr><tr><td>java.vm.specification.vendor</td><td>Java虚拟机规范供应商</td></tr><tr><td>java.vm.specification.name</td><td>Java虚拟机规范名称</td></tr><tr><td>java.vm.version</td><td>Java虚拟机实现版本</td></tr><tr><td>java.vm.vendor</td><td>Java虚拟机实现供应商</td></tr><tr><td>java.vm.name</td><td>Java虚拟机实现名称</td></tr><tr><td>java.specification.version</td><td>Java运行时环境规范版本</td></tr><tr><td>java.specification.vendor</td><td>Java运行时环境规范供应商</td></tr><tr><td>java.specification.name</td><td>Java运行时环境规范名称</td></tr><tr><td>java.class.version</td><td>Java类格式版本号</td></tr><tr><td>java.class.path</td><td>Java类路径</td></tr><tr><td>java.library.path</td><td>加载库时搜索的路径列表</td></tr><tr><td>java.io.tmpdir</td><td>默认的临时文件路径</td></tr><tr><td>java.compiler</td><td>要使用的JIT编译器的名称</td></tr><tr><td>java.ext.dirs</td><td>一个或多个扩展目录的路径</td></tr><tr><td>os.name</td><td>操作系统的名称</td></tr><tr><td>os.arch</td><td>操作系统的架构</td></tr><tr><td>os.version</td><td>操作系统的版本</td></tr><tr><td>file.separator</td><td>文件分隔符（在UNIX中是“/”）</td></tr><tr><td>path.separator</td><td>路径分隔符（在UNIX中是“:”）</td></tr><tr><td>line.separator</td><td>行分隔符（在UNIX中是“/n”）</td></tr><tr><td>user.name</td><td>用户的账户名称</td></tr><tr><td>user.home</td><td>用户的主目录</td></tr><tr><td>user.dir</td><td>用户的当前工作目录</td></tr></tbody></table><p><strong>java.util.Date类</strong></p><ul><li>两个构造器 <ul><li><code>new Date();</code> 当前时间</li><li><code>new Date(Long 毫秒数)</code> 根据毫秒数创建指定日期</li></ul></li><li>两个方法的使用 <ul><li><code>toString(</code>)\` 显示当前的年,月,日,时,分,秒</li><li><code>getTime()</code> 获取当前date对象的对应的毫秒数(时间戳)</li></ul></li></ul><ul><li><code>java.util.Date</code>和<code>java.sql.Date</code>互相转换</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> date </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">sql</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> date2 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">java</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">sql</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Date</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> date3 </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> java</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">sql</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> Date</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getTime</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p><strong>java.text.SimpleDateFormat类</strong></p><blockquote><p>Date类的API不易于国际化，大部分被废弃，并且不是线程安全的</p></blockquote><ul><li><code>format()</code> 方法 按照具体的格式格式化时间</li><li><code>parse()</code> 方法 将字符串解析成时间</li></ul><p><strong><code>java.time</code>的基础包</strong></p><table><thead><tr><th>java.time</th><th>包含值对象的基础包</th></tr></thead><tbody><tr><td>java.time.chrono</td><td>提供不同日历系统的访问</td></tr><tr><td>java.time.format</td><td>格式化和解析时间和日期</td></tr><tr><td>java.time.temporal</td><td>包含底层框架和扩展特性</td></tr><tr><td>java.time.zone</td><td>包含时区支持的类</td></tr></tbody></table><p><strong>新的<code>java.time</code>包含了如下子类</strong></p><table><thead><tr><th>类</th><th>作用</th><th>说明</th></tr></thead><tbody><tr><td>Instant</td><td>表示时刻</td><td>对应jdk7之前的Date</td></tr><tr><td>LocalDateTime</td><td>获取当前系统的日期时间(内部不记录时区)</td><td>可以认为由LocalDate和LocalTime组成</td></tr><tr><td>LocalDate</td><td>获取当前系统的日期</td><td></td></tr><tr><td>LocalTime</td><td>获取当前系统的时间</td><td></td></tr><tr><td>ZoneId</td><td>时区，&quot;5:00&quot;和&quot;Europe/Paris&quot;、&quot;Asia/Shanghai&quot;</td><td>除了处理与标准时间的时间差还处理地区时（夏令时，冬令时等）</td></tr><tr><td>ZoneOffset</td><td>时区，只处理 &quot;6:00&quot;</td><td>ZoneOffset是ZoneId的子类</td></tr><tr><td>ZoneDateTime</td><td>一个在ISO-8601日历系统特定时区的日期和时间</td><td>其中每个时区都有对应的Id,每个地区Id都有&quot;{区域}/{城市}&quot; 例如 Asia/Shanghai等</td></tr><tr><td>ZonedDateTime</td><td>处理日期和时间与相应的时区</td><td></td></tr><tr><td>Duration</td><td>持续时间,用于计算两个&quot;时间&quot;的间隔</td><td></td></tr><tr><td>Period</td><td>日期间隔,用于计算两个&quot;日期&quot;的间隔</td><td></td></tr><tr><td>Clock</td><td>使用时区提供对当前即时，日期和时间的访问</td><td></td></tr></tbody></table><p><strong>方法前缀</strong></p><table><thead><tr><th>前缀</th><th>含义</th><th>示例</th></tr></thead><tbody><tr><td>now</td><td>静态工厂方法, 用当前时间创建实例</td><td>LocalDate.now();</td></tr><tr><td>of</td><td>静态工厂方法</td><td>LocalDate.of(2018, 12, 20);</td></tr><tr><td>parse</td><td>静态工厂方法, 关注于解析</td><td>LocalDate.parse(&quot;2018-12-20&quot;);</td></tr><tr><td>get</td><td>获取某个字段的值</td><td>localDate.getYear();</td></tr><tr><td>is</td><td>比对判断</td><td>localDate.isAfter(LocalDate.now());</td></tr><tr><td>with</td><td>基于当前实例创建新的实例, 但部分字段被更新</td><td>localDate.withMonth(3);</td></tr><tr><td>plus</td><td>在当前实例基础上增加(值可负), 返回新实例</td><td>localDate.plusDays(1);</td></tr><tr><td>minus</td><td>在当前实例基础上减小(值可负), 返回新实例</td><td>localDate.minusDays(1);</td></tr><tr><td>to</td><td>基于当前实例转换出另一个类型的实例</td><td>localDateTime.toLocalDate();</td></tr><tr><td>at</td><td>把当前对象和另一个对象结合, 生成新的类型的实例</td><td>localDate.atTime(21, 30, 50)</td></tr><tr><td>format</td><td>格式化</td><td>localDate.format(DateTimeFormatter.ofPattern(&quot;yyyy-MM-dd&quot;));</td></tr></tbody></table><h2 id="roundingmode" tabindex="-1"><a class="header-anchor" href="#roundingmode"><span>RoundingMode</span></a></h2><blockquote><p><code>java.math.RoundingMode</code>是一个舍入枚举类</p></blockquote><ul><li><a href="https://blog.csdn.net/alanzyy/article/details/8465098" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/alanzyy/article/details/8465098</a></li><li><a href="https://my.oschina.net/sunchp/blog/670909" target="_blank" rel="noopener noreferrer">https://my.oschina.net/sunchp/blog/670909</a></li><li><a href="https://blog.csdn.net/chendaoqiu/article/details/45841283" target="_blank" rel="noopener noreferrer">https://blog.csdn.net/chendaoqiu/article/details/45841283</a></li></ul><h3 id="几个参数详解" tabindex="-1"><a class="header-anchor" href="#几个参数详解"><span>几个参数详解</span></a></h3><ul><li><code>RoundingMode.CEILING</code>(对应<code>BigDecimal.ROUND_CEILING</code>)：取右边最近的整数</li><li><code>RoundingMode.UP</code>(对应<code>BigDecimal.ROUND_UP</code>)：远离0取整，即负数向左取整，正数向右取整</li><li><code>RoundingMode.DOWN</code>(对应<code>BigDecimal.ROUND_DOWN</code>)：从不在舍弃(即截断)的小数之前增加数字（其实就是截断的意思）</li><li><code>RoundingMode.FLOOR</code>(对应<code>BigDecimal.ROUND_FLOOR</code>)：取左边最近的正数</li><li><code>RoundingMode.HALF_UP</code>(对应<code>BigDecimal.ROUND_HALF_UP</code>)：四舍五入，负数原理同上</li><li><code>RoundingMode.HALF_DOWN</code>(对应<code>BigDecimal.ROUND_HALF_DOWN</code>)：五舍六入，负数先取绝对值再五舍六入再负数</li><li><code>RoundingMode.HALF_EVEN</code>(对应<code>BigDecimal.ROUND_HALF_EVEN</code>)：这个比较绕，整数位若是奇数则四舍五入，若是偶数则五舍六入</li><li><code>RoundingMode.UNNECESSARY</code>(对应<code>BigDecimal.ROUND_UNNECESSARY</code>)：用于断言请求的操作具有精确结果的舍入模式，因此不需要舍入</li></ul><h2 id="java锁" tabindex="-1"><a class="header-anchor" href="#java锁"><span>Java锁</span></a></h2><h3 id="synchronized" tabindex="-1"><a class="header-anchor" href="#synchronized"><span>synchronized</span></a></h3><blockquote><p>synchronized(this)以及非static的synchronized方法，只能防止多个线程同时执行同一个对象的同步代码段。</p></blockquote><blockquote><p>synchronized锁住的是代码还是对象？</p><blockquote><p>答案是：synchronized锁住的是括号里的对象，而不是代码。对于非static的synchronized方法，锁的就是对象本身也就是this。</p></blockquote></blockquote><blockquote><p>当synchronized锁住一个对象后，别的线程如果也想拿到这个对象的锁，就必须等待这个线程执行完成释放锁，才能再次给对象加锁，这样才达到线程同步的目的。</p></blockquote><blockquote><p>即使两个不同的代码段，都要锁同一个对象，那么这两个代码段也不能在多线程环境下同时运行。</p></blockquote><blockquote><p>所以我们在用synchronized关键字的时候，尽量缩小代码段的范围，尽量不要在整个方法上加同步。这叫减小锁的粒度，使代码更大程度的并发。</p></blockquote><blockquote><p>static方法可以直接类名加方法名调用，方法中无法使用this，所以它锁的不是this，而是Class，所以static synchronized方法也相当于全局锁，相当于锁住了代码段。</p></blockquote><h2 id="java异常" tabindex="-1"><a class="header-anchor" href="#java异常"><span>Java异常</span></a></h2><ul><li><a href="https://blog.csdn.net/weixin_52566131/article/details/117132098" target="_blank" rel="noopener noreferrer">Java中的异常处理</a></li></ul><p><img src="`+p+`" alt=""></p><table><thead><tr><th>未经检查的异常</th><th>说明</th></tr></thead><tbody><tr><td>ArithmeticException</td><td>算术错误，如被0除</td></tr><tr><td>ArrayIndexOutOfBoundsException</td><td>数组下标出界</td></tr><tr><td>ArrayStoreException</td><td>数组元素赋值类型不兼容</td></tr><tr><td>ClassCastException</td><td>非法强制转换类型</td></tr><tr><td>EnumConstantNotPresentException</td><td>枚举常量不存在异常。</td></tr><tr><td>EOFException</td><td>文件已结束异常</td></tr><tr><td>Exception</td><td>根异常。用以描述应用程序希望捕获的情况。</td></tr><tr><td>FileNotFoundException</td><td>文件未找到异常</td></tr><tr><td>IllegalArgumentException</td><td>调用方法的参数非法</td></tr><tr><td>IllegalMonitorStateException</td><td>非法监控操作，如等待一个未锁定线程</td></tr><tr><td>IllegalStateException</td><td>环境或应用状态不正确</td></tr><tr><td>IllegalThreadStateException</td><td>请求操作与当前线程状态不兼容</td></tr><tr><td>IndexOutOfBoundsException</td><td>某些类型索引越界</td></tr><tr><td>IOException</td><td>输入输出异常</td></tr><tr><td>NegativeArrayException</td><td>数组负下标异常</td></tr><tr><td>NegativeArraySizeException</td><td>数组大小为负值异常。当使用负数大小值创建数组时抛出该异常。</td></tr><tr><td>NullPointerException</td><td>非法使用空引用</td></tr><tr><td>NumberFormatException</td><td>字符串到数字格式非法转换</td></tr><tr><td>RuntimeException</td><td>运行时异常。是所有Java虚拟机正常操作期间可以被抛出的异常的父类。</td></tr><tr><td>SecurityException</td><td>试图违反安全性</td></tr><tr><td>SQLException</td><td>操作数据库异常</td></tr><tr><td>StringIndexOutOfBoundsException</td><td>试图在字符串边界之外索引</td></tr><tr><td>TypeNotPresentException</td><td>类型不存在异常。</td></tr><tr><td>UnsupportedOperationException</td><td>遇到不支持的操作</td></tr></tbody></table><table><thead><tr><th>检查的异常</th><th>说明</th></tr></thead><tbody><tr><td>ClassNotFoundException</td><td>找不到类</td></tr><tr><td>CloneNotSupportedException</td><td>试图克隆一个不能实现Cloneable接口的对象</td></tr><tr><td>IllegalAccessException</td><td>对一个类的访问被拒绝</td></tr><tr><td>InstantiationException</td><td>试图创建一个抽象类或者抽象接口的对象</td></tr><tr><td>InterruptedException</td><td>一个线程被另一个线程中断</td></tr><tr><td>NoSuchFieldException</td><td>请求的字段不存在</td></tr><tr><td>NoSuchMethodException</td><td>请求的方法不存在</td></tr></tbody></table><table><thead><tr><th>错误</th><th>说明</th></tr></thead><tbody><tr><td>java.lang.AbstractMethodError</td><td>抽象方法错误</td></tr><tr><td>java.lang.AssertionError</td><td>断言错</td></tr><tr><td>java.lang.ClassCircularityError</td><td>类循环依赖错误</td></tr><tr><td>java.lang.ClassFormatError</td><td>类格式错误</td></tr><tr><td>java.lang.Error</td><td>错误</td></tr><tr><td>java.lang.ExceptionInInitializerError</td><td>初始化程序错误</td></tr><tr><td>java.lang.IllegalAccessError</td><td>违法访问错误</td></tr><tr><td>java.lang.IncompatibleClassChangeError</td><td>不兼容的类变化错误</td></tr><tr><td>java.lang.InstantiationError</td><td>实例化错误</td></tr><tr><td>java.lang.InternalError</td><td>内部错误</td></tr><tr><td>java.lang.LinkageError</td><td>链接错误</td></tr><tr><td>java.lang.NoClassDefFoundError</td><td>未找到类定义错误</td></tr><tr><td>java.lang.NoSuchFieldError</td><td>域不存在错误</td></tr><tr><td>java.lang.NoSuchMethodError</td><td>方法不存在错误</td></tr><tr><td>java.lang.OutOfMemoryError</td><td>内存不足错误</td></tr><tr><td>java.lang.StackOverflowError</td><td>堆栈溢出错误</td></tr><tr><td>java.lang.UnknownError</td><td>未知错误</td></tr><tr><td>java.lang.UnsatisfiedLinkError</td><td>未满足的链接错误</td></tr><tr><td>java.lang.UnsupportedClassVersionError</td><td>不支持的类版本错误</td></tr><tr><td>java.lang.VerifyError</td><td>验证错误</td></tr><tr><td>java.lang.VirtualMachineError</td><td>虚拟机错误</td></tr><tr><td>java.lang.ThreadDeath</td><td>线程结束</td></tr></tbody></table><h2 id="http" tabindex="-1"><a class="header-anchor" href="#http"><span>HTTP</span></a></h2><ul><li><a href="https://www.zhihu.com/question/596302946" target="_blank" rel="noopener noreferrer">在 Java 中下载的文件会出现乱码是为什么？</a></li></ul><p><strong>常量</strong></p><ul><li><code>java.net.HttpURLConnection</code></li><li><code>io.netty.handler.codec.http.HttpResponseStatus</code></li><li><code>org.springframework.http.HttpStatus</code></li><li><code>org.apache.http.HttpStatus</code></li><li><code>org.asynchttpclient.util.HttpConstants</code></li><li><code>org.apache.http.protocol.HTTP</code></li><li><code>org.springframework.http.HttpHeaders</code></li><li><code>javax.ws.rs.HttpMethod</code></li><li><code>org.springframework.http.HttpMethod</code></li></ul><p><strong>Mime/Content-Type/Media-Type</strong></p><ul><li><a href="https://github.com/search?q=mime" target="_blank" rel="noopener noreferrer">https://github.com/search?q=mime</a></li><li><a href="https://github.com/topics/mime" target="_blank" rel="noopener noreferrer">https://github.com/topics/mime</a></li><li><a href="https://github.com/mime-types" target="_blank" rel="noopener noreferrer">https://github.com/mime-types</a></li><li><a href="https://www.solvusoft.com/en/mime-multipurpose-internet-mail-extensions" target="_blank" rel="noopener noreferrer">https://www.solvusoft.com/en/mime-multipurpose-internet-mail-extensions</a></li></ul><ul><li><code>com.google.common.net.MediaType</code> guava</li><li><code>javax.ws.rs.core.MediaType</code> Jersey框架</li><li><code>org.springframework.http.MediaType</code>和<code>org.springframework.util.MimeTypeUtils</code> spring框架</li><li>在Tomcat配置文件<code>conf/web.xml</code>中的<code>Default MIME Type Mappings</code>部分定义</li><li>nginx配置文件<code>conf/mime.types</code>中定义</li></ul><p><strong>HTTP实现依赖库</strong></p><ul><li><code>HttpURLConnection</code> Java自带API</li><li><code>HttpClient</code> JDK11的API <a href="https://segmentfault.com/a/1190000016555671" target="_blank" rel="noopener noreferrer">Java11 HttpClient小试牛刀</a></li><li><code>RestTemplate</code> 默认实现是<code>HttpURLConnection</code>，默认使用HttpMessageConverter将Http消息转换成POJO 或POJO转化成Http消息 <ul><li><code>ForEntity</code>返回<code>ResponseEntity</code>响应码、响应消息体等</li><li><code>ForObject</code>只返回消息体</li><li><code>exchange</code> 配合<code>HttpEntity</code>或<code>RequestEntity</code>使用，返回<code>ResponseEntity</code></li></ul></li><li><code>WebClient</code> 是<code>Spring 5.0</code>开始提供的非阻塞响应式编程的Http工具。</li></ul><ul><li><a href="https://juejin.im/post/5e156c80f265da5d3c6de72a" target="_blank" rel="noopener noreferrer">HTTP客户端连接，选择HttpClient还是OkHttp？</a></li></ul><p><strong>Apache HttpClient GET拼接URL参数</strong></p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Map</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> params </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> HashMap</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;key1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;value1&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;key2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;value2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 方式一：使用setParameters</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NameValuePair</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nvps </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> ArrayList</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NameValuePair</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 通过map集成entrySet方法获取entity循环遍历，获取迭代器</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Iterator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Entry</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iterator </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> params</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">entrySet</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Entry</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Object</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> mapEntry </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    nvps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">add</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> BasicNameValuePair</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getKey</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">mapEntry</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getValue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">().</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()));</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 由于GET请求的参数都是拼装在URL地址后方，所以我们要构建一个URL，带参数</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">URIBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> uriBuilder </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> URIBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(url)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 封装请求参数</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">uriBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">setParameters</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nvps);</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">uriBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">// 方式二：转换参数并拼接</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;?&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> +</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> EntityUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UrlEncodedFormEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(nvps, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Consts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">URIBuilder</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> uriBuilder </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> URIBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(url)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">uriBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">build</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><ul><li>根据HttpGet反向获取键值对列表</li></ul><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">HttpGet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> request </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> HttpGet</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;http://example.com/?var=1&amp;var=2&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//获取键值对列表</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">NameValuePair</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> params </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> URIBuilder</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">request</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getURI</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getQueryParams</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//转换为键值对字符串</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> str </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> EntityUtils</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">toString</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> UrlEncodedFormEntity</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(params, </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Consts</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">UTF_8</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">));</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><h2 id="泛型generics" tabindex="-1"><a class="header-anchor" href="#泛型generics"><span>泛型generics</span></a></h2><ul><li><a href="https://www.jianshu.com/p/90948ff4a940" target="_blank" rel="noopener noreferrer">Java泛型的协变、逆变和不变</a></li><li><a href="https://blog.csdn.net/zy_jibai/article/details/90082239" target="_blank" rel="noopener noreferrer">图解java泛型的协变和逆变</a></li></ul><ul><li>协变(<code>&lt;? extends T&gt;</code>)</li><li>逆变(<code>&lt;? super T&gt;</code>)</li><li>不变(<code>T</code>)</li></ul><p><strong>泛型的通配符</strong></p><ul><li>? 表示不确定的类型</li><li>T (type) 表示具体的类型</li><li>K V (key value) 分别代表键值中的Key Value</li><li>E (element) 代表Element</li></ul><p><strong>泛型三种常用的使用方式：</strong></p><ul><li><a href="https://www.cnblogs.com/coprince/p/8603492.html" target="_blank" rel="noopener noreferrer">java 泛型详解-绝对是对泛型方法讲解最详细的，没有之一</a></li></ul><blockquote><p>可以有多个类型变量</p></blockquote><ul><li>泛型类：在类名后指定类型变量，如：<code>public class Pair&lt;T, U&gt; {</code></li><li>泛型接口：在接口名后指定类型变量，如：<code>public interface Generator&lt;T, U&gt; {</code></li><li>泛型方法：在修饰符后，返回类型前指定类型变量，如：<code>public static &lt;T extends Object, E&gt; T test(Class&lt;T&gt; a, Class&lt;E&gt; b) {</code></li></ul>`,92))])}const m=n(k,[["render",g],["__file","Java笔记.html.vue"]]),b=JSON.parse('{"path":"/Java/Java%E7%AC%94%E8%AE%B0.html","title":"Java笔记","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Flag","slug":"flag","link":"#flag","children":[]},{"level":2,"title":"代码块文档注释","slug":"代码块文档注释","link":"#代码块文档注释","children":[]},{"level":2,"title":"多行字符串","slug":"多行字符串","link":"#多行字符串","children":[]},{"level":2,"title":"函数重载","slug":"函数重载","link":"#函数重载","children":[]},{"level":2,"title":"关键保留字","slug":"关键保留字","link":"#关键保留字","children":[]},{"level":2,"title":"访问控制修饰符","slug":"访问控制修饰符","link":"#访问控制修饰符","children":[]},{"level":2,"title":"classpath意义","slug":"classpath意义","link":"#classpath意义","children":[]},{"level":2,"title":"日期时间","slug":"日期时间","link":"#日期时间","children":[]},{"level":2,"title":"RoundingMode","slug":"roundingmode","link":"#roundingmode","children":[{"level":3,"title":"几个参数详解","slug":"几个参数详解","link":"#几个参数详解","children":[]}]},{"level":2,"title":"Java锁","slug":"java锁","link":"#java锁","children":[{"level":3,"title":"synchronized","slug":"synchronized","link":"#synchronized","children":[]}]},{"level":2,"title":"Java异常","slug":"java异常","link":"#java异常","children":[]},{"level":2,"title":"HTTP","slug":"http","link":"#http","children":[]},{"level":2,"title":"泛型generics","slug":"泛型generics","link":"#泛型generics","children":[]}],"git":{"createdTime":1726030162000,"updatedTime":1726030162000,"contributors":[{"name":"onni-top","email":"admin@onni.top","commits":1}]},"readingTime":{"minutes":16.8,"words":5041},"filePathRelative":"Java/Java笔记.md","localizedDate":"2024年9月11日","excerpt":"\\n\\n<h2>Flag</h2>\\n<ul>\\n<li><a href=\\"https://www.yiibai.com/html/java\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://www.yiibai.com/html/java/</a></li>\\n</ul>\\n<ul>\\n<li><a href=\\"https://www.zhihu.com/question/26762707/answer/890181997\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">什么是 hash</a></li>\\n<li><a href=\\"https://www.jianshu.com/p/101c263cd93e\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">什么是散列表(Hash Table)</a></li>\\n<li><a href=\\"https://yuanrengu.com/2020/ba184259.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">HashMap在Jdk1.7和1.8中的实现</a></li>\\n<li><a href=\\"https://www.cnblogs.com/chengxiao/p/6059914.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">HashMap的底层结构和实现原理</a></li>\\n<li><a href=\\"https://www.cnblogs.com/chengxiao/p/6842045.html\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">ConcurrentHashMap实现原理及源码分析</a></li>\\n<li><a href=\\"https://www.zcfy.cc/article/data-structures-for-beginners-arrays-hashmaps-and-lists\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">初学者应该了解的数据结构：Array、HashMap 与 List</a></li>\\n</ul>"}');export{m as comp,b as data};
