import{_ as t}from"./plugin-vue_export-helper-DlAUqK2U.js";import{r as h,c as k,b as s,e as n,w as l,a as p,o as r,d as e}from"./app-CPE2FVww.js";const d={},g={class:"table-of-contents"};function c(o,i){const a=h("router-link");return r(),k("div",null,[i[8]||(i[8]=s("h1",{id:"spi",tabindex:"-1"},[s("a",{class:"header-anchor",href:"#spi"},[s("span",null,"SPI")])],-1)),s("nav",g,[s("ul",null,[s("li",null,[n(a,{to:"#flag"},{default:l(()=>i[0]||(i[0]=[e("Flag")])),_:1})]),s("li",null,[n(a,{to:"#什么是-spi"},{default:l(()=>i[1]||(i[1]=[e("什么是 SPI？")])),_:1})]),s("li",null,[n(a,{to:"#jdk-中的-spi"},{default:l(()=>i[2]||(i[2]=[e("JDK 中的 SPI")])),_:1}),s("ul",null,[s("li",null,[n(a,{to:"#实例以及测试"},{default:l(()=>i[3]||(i[3]=[e("实例以及测试")])),_:1})]),s("li",null,[n(a,{to:"#源码分析"},{default:l(()=>i[4]||(i[4]=[e("源码分析")])),_:1})])])]),s("li",null,[n(a,{to:"#spi-如何实现代码的解耦"},{default:l(()=>i[5]||(i[5]=[e("SPI 如何实现代码的解耦？")])),_:1})]),s("li",null,[n(a,{to:"#spi-适合什么场景下使用"},{default:l(()=>i[6]||(i[6]=[e("SPI 适合什么场景下使用？")])),_:1})]),s("li",null,[n(a,{to:"#使用-spi-的优势和劣势在哪里"},{default:l(()=>i[7]||(i[7]=[e("使用 SPI 的优势和劣势在哪里？")])),_:1})])])]),i[9]||(i[9]=p(`<h2 id="flag" tabindex="-1"><a class="header-anchor" href="#flag"><span>Flag</span></a></h2><ul><li><a href="https://github.com/McModLauncher/modlauncher" target="_blank" rel="noopener noreferrer">https://github.com/McModLauncher/modlauncher</a></li><li><a href="https://github.com/SpongePowered/Mixin" target="_blank" rel="noopener noreferrer">https://github.com/SpongePowered/Mixin</a></li><li><a href="https://github.com/FabricMC" target="_blank" rel="noopener noreferrer">https://github.com/FabricMC</a><ul><li><a href="https://blog.csdn.net/smildwind/article/details/120227376" target="_blank" rel="noopener noreferrer">Fabric 与Mixin 教程</a></li></ul></li><li><a href="https://github.com/MinecraftForge/MinecraftForge" target="_blank" rel="noopener noreferrer">https://github.com/MinecraftForge/MinecraftForge</a></li><li><a href="https://github.com/Chocohead/OptiFabric" target="_blank" rel="noopener noreferrer">https://github.com/Chocohead/OptiFabric</a><ul><li><a href="https://github.com/sp614x/optifine" target="_blank" rel="noopener noreferrer">https://github.com/sp614x/optifine</a></li></ul></li><li><a href="https://github.com/Mojang/brigadier" target="_blank" rel="noopener noreferrer">https://github.com/Mojang/brigadier</a></li><li><a href="https://github.com/osgi" target="_blank" rel="noopener noreferrer">https://github.com/osgi</a><ul><li>OSGI（Open Service Gateway Initiative），是一个由OSGi Alliance发起的以Java为技术平台的动态模块化规范</li><li><a href="https://github.com/bndtools/bnd" target="_blank" rel="noopener noreferrer">https://github.com/bndtools/bnd</a></li></ul></li><li><a href="https://github.com/eclipse-equinox" target="_blank" rel="noopener noreferrer">https://github.com/eclipse-equinox</a></li><li>Jigsaw Java9 modules</li><li>观察者设计模式 <a href="https://blog.csdn.net/wanggang514260663/article/details/86138144" target="_blank" rel="noopener noreferrer">Java设计模式之观察者模式</a></li><li>Spring 实现<code>ApplicationContextAware</code>接口获取到指定接口的所有实现</li></ul><ul><li><a href="https://github.com/Enaium/BullPlugin" target="_blank" rel="noopener noreferrer">https://github.com/Enaium/BullPlugin</a></li><li>springboot插件式开发框架 <a href="https://gitee.com/starblues/springboot-plugin-framework-parents" target="_blank" rel="noopener noreferrer">https://gitee.com/starblues/springboot-plugin-framework-parent</a></li></ul><ul><li><a href="https://blog.csdn.net/shang_xs/article/details/86560469" target="_blank" rel="noopener noreferrer">从Java SPI机制实现到Dubbo SPI扩展</a></li><li><a href="https://blog.csdn.net/shang_xs/article/details/86560691" target="_blank" rel="noopener noreferrer">从Java SPI机制实现到Spring Boot SPI扩展</a></li><li><a href="https://www.jianshu.com/p/25b3559ecc47" target="_blank" rel="noopener noreferrer">AVA SPI机制详解</a></li><li><a href="https://www.jianshu.com/p/3a3edbcd8f24" target="_blank" rel="noopener noreferrer">深入理解SPI机制</a></li></ul><p><strong>热插拔/热加载/热部署/热更新/HotSwap</strong></p><ul><li><a href="https://www.jrebel.com/products/jrebel/download" target="_blank" rel="noopener noreferrer">https://www.jrebel.com/products/jrebel/download</a><ul><li><a href="http://jrebel.cicoding.cn" target="_blank" rel="noopener noreferrer">http://jrebel.cicoding.cn</a></li><li><a href="http://jrebel.cicoding.cn/guid" target="_blank" rel="noopener noreferrer">http://jrebel.cicoding.cn/guid</a></li></ul></li><li><a href="https://github.com/spring-projects/spring-loaded" target="_blank" rel="noopener noreferrer">https://github.com/spring-projects/spring-loaded</a></li><li><a href="https://github.com/HotswapProjects" target="_blank" rel="noopener noreferrer">https://github.com/HotswapProjects</a></li><li><a href="https://github.com/dcevm" target="_blank" rel="noopener noreferrer">https://github.com/dcevm</a><ul><li><a href="https://ssw.jku.at/dcevm" target="_blank" rel="noopener noreferrer">https://ssw.jku.at/dcevm</a></li></ul></li><li><a href="https://github.com/fakereplace" target="_blank" rel="noopener noreferrer">https://github.com/fakereplace</a></li><li><a href="https://github.com/jmarranz/relproxy" target="_blank" rel="noopener noreferrer">https://github.com/jmarranz/relproxy</a></li><li><a href="https://github.com/cm4j" target="_blank" rel="noopener noreferrer">https://github.com/cm4j</a></li></ul><ul><li><a href="https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin#solution" target="_blank" rel="noopener noreferrer">https://github.com/dmitry-zhuravlev/hotswap-agent-intellij-plugin#solution</a></li><li><a href="https://mp.weixin.qq.com/s/ydupBExb2LLhtC2ZuBsInA" target="_blank" rel="noopener noreferrer">深入探索 Java 热部署</a></li><li><a href="https://segmentfault.com/q/1010000041393137" target="_blank" rel="noopener noreferrer">java热更新class如何实现？</a></li><li><a href="https://blog.csdn.net/qq_36434742/article/details/117227309" target="_blank" rel="noopener noreferrer">Java的类加载机制及热部署的原理</a></li><li><a href="https://www.cnblogs.com/zyl2016/p/13666945.html" target="_blank" rel="noopener noreferrer">JAVA热部署，通过agent进行代码增量热替换</a></li><li><a href="https://blog.csdn.net/java_dazhuzhu/article/details/119575060" target="_blank" rel="noopener noreferrer">Java 调试技术 JPDA 架构解读</a></li></ul><h2 id="什么是-spi" tabindex="-1"><a class="header-anchor" href="#什么是-spi"><span>什么是 SPI？</span></a></h2><p>SPI 全称为（Service Provider Interface），字面意思为服务提供者接口，是<strong>JDK 内置的一种服务提供发现机制</strong>。 这一机制为很多框架的扩展提供了可能，比如在 Dubbo、JDBC、Spring Boot 中都使用到了 SPI 机制。 说白了就是提供给“服务提供厂商”或者“插件开发者”使用的接口</p><p>SPI 是一种动态发现替换机制，例如我们在学习 Java Web 的时候连接数据库使用的 java.sql.Driver 接口，可以根据不同的驱动， 连接不同的数据库，如常用的 MySQL 或者 Oracle 数据库,，我们在使用 JDBC 连接数据库的时候首先需要的就是连接驱动：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;com.mysql.jdbc.Driver&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">)</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>加载 MySQL 驱动后，就会 执行其中的静态代码，把 Driver 注册到 DriverManager 中那么通过数据库的 url、用户名、密码， 我们就可以成功连接到你的 MySQL 数据库并可以进行相应的操作，如果你要更换成 Oracle 数据库，那么就需要更换对应的驱动， 下面是 JDBC 连接数据库的一个步骤，帮助大家回忆：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//声明数据库驱动，数据源的 url，用于登录数据库的账户和密码（将其他功能封装成方法的时候方便使用）</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> driver </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;数据库驱动名称&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">；</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> url </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;数据库连接地址&quot;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> user </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;用来连接数据库的用户名&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">；</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pwd </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;"> &quot;用来连接数据库的密码&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">；</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//加载数据库驱动  </span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(driver);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//根据 url 创建数据库连接对象 Connection </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Connection</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> con </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> DriverManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getConnection</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(url,user,pwd);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//用数据库连接对象创建 Statement 对象(或 PrepareStatement)</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Statement</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> s </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> con</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">createStatement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//或</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">PrepareStatement</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> ps </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> con</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">PrepareStatement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(sql);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//做数据库的增删改查工作</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">ResultSet</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> rs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ps</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">executeQuery</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//关闭结果集对象 Resultset，statement 对象，connection 对象，</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">rs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">s</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">con</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">close</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//各个步骤的异常处理</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>结合上面的代码和下面的图片来简单分析一下。</p><p>我们在使用 MySQL 的数据库时，需要导入一个 MySQL 的连接驱动包，打开这个驱动包，你会发现在下图的目录中有一个文件， <code>Class.forName(driver)</code> 它会去找到这个 com.mysql.jdbc.Driver 的类，然后用 DriverManager 加载这个类， 然后再去使用这个类中的方法，例如 <code>con.PrepareStatement(sql);</code> 就是使用的 com.mysql.jdbc.Driver 这个类中的方法， 同理如果你将驱动换成 Oracle，那么 DriverManager 就会得到 Oracle 的连接对象，那么 <code>con.PrepareStatement(sql);</code> 调用的就是 Oracle 对应驱动中的方法，也就是说，如果我们将数据库换成 Orale，理论上，上面的操作数据库的代码是不需要变动的， 只需要更换驱动、url 和账号密码，这部分我们后面都是以配置文件的形式写入，所以很好的将代码和数据库解耦了。</p><p>下图是我在网上找到图片：</p><p><img src="https://images.gitbook.cn/b15400e0-69bd-11eb-8f82-1d786eda1f74" alt="来源于博客员作者：架构之路"></p><p>如果你还是不能很好的理解，没有关系，接下来，我们就慢慢剖析这个 SPI。</p><h2 id="jdk-中的-spi" tabindex="-1"><a class="header-anchor" href="#jdk-中的-spi"><span>JDK 中的 SPI</span></a></h2><h3 id="实例以及测试" tabindex="-1"><a class="header-anchor" href="#实例以及测试"><span>实例以及测试</span></a></h3><p>我们先从 JDK 开始，通过一个很简单的例子来看下它是怎么用的。</p><p>这是例子的代码结构：</p><p><img src="https://images.gitbook.cn/5d9e7d50-6b47-11eb-b964-590e861bb8fd" alt="在这里插入图片描述"></p><p>首先，我们需要定义一个接口 SPIService。</p><p>这个接口只有一个打印的方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> interfaceSPIService {</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    voidprint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们再定义一个实现类，只做打印输出：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> classSPIServiceImplimplementsSPIService{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    publicvoidprint</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">out</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">println</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;print..............&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后我们需要在 resources 下创建文件夹：META-INF/services 然后在 services 文件夹下创建文件，文件名就是服务接口的全限定类名：</p><p><img src="https://images.gitbook.cn/de1d1820-6b4b-11eb-a8aa-992450a0658d" alt="在这里插入图片描述"></p><p>文件的内容就是该接口的实现类的全限定类名。</p><p>文件内容：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">com</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">spi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">impl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SPIServiceImpl</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div></div></div><p>然后我们就可以通过 ServiceLoader.load 方法拿到实现类的实例，并调用它的方法。</p><p>我们在启动类中测试：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">package</span><span style="--shiki-light:#383A42;--shiki-dark:#C678DD;"> com.spi</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> com.spi.service.SPIService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.Iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">import</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> java.util.ServiceLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">publicclassSPIApplication{</span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    publicstaticvoidmain</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">[] args){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //加载类</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        ServiceLoader</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SPIService</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> load </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ServiceLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SPIService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">        Iterator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SPIService</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> iterator </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> load</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            //获取类的实例</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            SPIService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> service </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">            service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>运行结果：</p><p><img src="https://images.gitbook.cn/ae4b5070-6b4c-11eb-9226-31bcf945eb52" alt="在这里插入图片描述"></p><h3 id="源码分析" tabindex="-1"><a class="header-anchor" href="#源码分析"><span>源码分析</span></a></h3><p>首先，我们先来了解下 ServiceLoader，看看它的类结构：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> finalclassServiceLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> implementsIterable</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //配置文件的路径privatestaticfinal String PREFIX = &quot;META-INF/services/&quot;;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //加载的服务类或接口privatefinal Class&lt;S&gt; service;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //已加载的服务类集合private LinkedHashMap&lt;String,S&gt; providers = new LinkedHashMap&lt;&gt;();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //类加载器privatefinal ClassLoader loader;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //内部类，真正加载服务类private LazyIterator lookupIterator;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>当我们调用 load 方法时，并没有真正的去加载和查找服务类。而是调用了 ServiceLoader 的构造方法， 在这里最重要的是实例化了内部类 LazyIterator，ServiceLoader 才是接下来的主角：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> ServiceLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Class</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> svc</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ClassLoadercl) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //要加载的接口</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    service </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">requireNonNull</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(svc, </span><span style="--shiki-light:#50A14F;--shiki-dark:#98C379;">&quot;Service interface cannot be null&quot;</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //类加载器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    loader </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (cl </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> ClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSystemClassLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> cl</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //访问控制器</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    acc </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">System</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSecurityManager</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> AccessController</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getContext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> :</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //先清空</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    providers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">clear</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //实例化内部类 </span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    LazyIterator</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> lookupIterator </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;"> new</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> LazyIterator</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> loader)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>查找实现类和创建实现类的过程，都在 LazyIterator 完成。当我们调用 iterator.hasNext 和 iterator.next 方法的时候， 实际上调用的都是 LazyIterator 的相应方法：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> Iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    returnnew </span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">Iterator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">        publicbooleanhasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> lookupIterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        public</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> S</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> next</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">            return</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> lookupIterator</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">        .......</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>因此，我们重点关注 <code>lookupIterator.hasNext()</code> 方法，它最终会调用到 <code>hasNextService</code>，在这里返回实现类名称：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> classLazyIteratorimplementsIterator</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&lt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">S</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">&gt;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">{</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">S</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    ClassLoader</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> loader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Enumeration</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">URL</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> configs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Iterator</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">String</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> pending </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> nextName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    </span></span>
<span class="line"><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">    privatebooleanhasNextService</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(){</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        // 第二次调用的时候，已经解析完成了，直接返回</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (nextName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">!=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            returntrue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (configs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // META-INF/services/ 加上接口的全限定类名，就是文件服务类的文件</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            // META-INF/services/com.viewscenes.netsupervisor.spi.SPIService</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">            String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> fullName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> PREFIX </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">+</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            //将文件路径转成 URL 对象</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            configs </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> loader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getResources</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(fullName);</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        while</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> ((pending </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">==</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">||</span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;"> !</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">pending</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">hasNext</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">            //解析 URL 文件对象，读取内容，最后返回</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">            pending </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> parse</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">(service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">,</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> configs</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">nextElement</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">()</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">)</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        }</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //拿到第一个实现类的类名</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        nextName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> pending</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">next</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">        returntrue</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>然后当我们调用 <code>next()</code> 方法的时候，调用到 <code>lookupIterator.nextService</code>，它通过反射的方式，创建实现类的实例并返回：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">private</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;"> S</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;"> nextService</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">() {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //全限定类名</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    String</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> cn </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> nextName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    nextName </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;"> null</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //创建类的 Class 对象</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    Class</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#C678DD;">?</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> c </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> Class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">forName</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cn, </span><span style="--shiki-light:#986801;--shiki-dark:#D19A66;">false</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">, loader);</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //通过 newInstance 实例化</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">    S</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> p </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">cast</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">c</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">newInstance</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">());</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //放入集合，返回实例</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">    providers</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">put</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(cn, p);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    return</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> p</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> </span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>到这为止，已经获取到了类的实例，这就是 SPI 机制的一个内部原理。</p><h2 id="spi-如何实现代码的解耦" tabindex="-1"><a class="header-anchor" href="#spi-如何实现代码的解耦"><span>SPI 如何实现代码的解耦？</span></a></h2><p>其实在前面提到 JDBC 的时候已经大致了解了 SPI 解耦，那么我们就再结合前面的实例，用通俗的语言概述一下吧。</p><p>我们可以通过下面这个简单的流程图来进一步理解 SPI 是如何解耦和扩展的。</p><p>首先需要定义一个标准化的服务接口，例如上面的实例 SPIService，里面有一些服务例如 print，然后实现这个接口， 我们暂定它为实现类 A（SPIServiceImpl），它实现的 print 方法里面可以自定义实现内容，如果现在要求说要再增加一种打印的方式， 但是保留之前的 print 的打印方式，那么我们就可以再定义一个实现类 B 去实现这个标准化的服务接口，如果后面再增加新的打印方式也一样， 直接加，或者某一种不需要了，直接去掉即可。</p><p>那么由此可见，它是将标准的服务接口与服务提供方实现类进行解耦的，我们可以思考一下，它进行扩展是非常方便的，只需要实现标准服务接口， 然后在 <code>META-INF/services</code> 对应的文件中添加该实现类的全限定类名，然后在实现类的方法中填充实现就可以了。</p><p>但如果你要是想修改标准服务接口的方法定义，那么就比较麻烦了，只要是实现这个接口的类都需要改，也就是软件设计原则提到的<strong>开闭原则</strong>， 因此我们需要一开始就设计好标准服务接口的内容，保证软件系统的稳定性和延续性。</p><p><img src="https://images.gitbook.cn/dd2c5030-7185-11eb-b964-590e861bb8fd" alt="在这里插入图片描述"></p><h2 id="spi-适合什么场景下使用" tabindex="-1"><a class="header-anchor" href="#spi-适合什么场景下使用"><span>SPI 适合什么场景下使用？</span></a></h2><p>比较常见的例子：</p><ol><li>数据库驱动加载接口实现类的加载：JDBC 加载不同类型数据库的驱动。</li><li>日志门面接口实现类加载：SLF4J 加载不同提供商的日志实现类。</li><li>Spring：Spring 中大量使用了 SPI，比如：对 servlet3.0 规范对 ServletContainerInitializer 的实现、 自动类型转换 Type Conversion SPI（Converter SPI、Formatter SPI）等。</li><li>Spring Boot 的自动配置：Spring Boot 的 Web 应用都能正常运行，Spring Boot 正是依靠自动配置来完成， 自动配置就是依靠 SpringFactoriesLoader 来加载的。</li><li>Dubbo：Dubbo 中也大量使用 SPI 的方式实现框架的扩展，不过它对 Java 提供的原生 SPI 做了封装，允许用户扩展实现 Filter 接口。</li></ol><p>概括地说，适用于：<strong>调用者根据实际使用需要，启用、扩展、或者替换方案（框架）的实现策略</strong>。</p><p>很多地方写的是替换框架，但是我在这里改成了方案，更方便理解（如果这里有一些争议的话，欢迎大家在评论区留言）， 实际上我们可以把每一个实现类都叫做一种方案，例如我们前面提到的 SPIService 的实现类 A 和 B，就是对 print 这个方法的两种方案， SLF4J 加载不同提供商的日志实现类实际上也是加载不同的日志方案，因此实际上如果我们想在自己的项目中运用到 SPI， 那么它最好的使用就是对某一个事件不同方案的处理，例如给公司员工计算月/年薪资（里面包含了绩效、KPI、考勤、奖金等等）， 公司针对不同的层级或者区域的员工有不同的方案，这个例子的事件就是薪资计算，不管你什么类型什么等级的员工， 计算薪资的总和都是这几项加起来的结果，不同的是每一项的根据不同的实现方案计算内容有一定的差别。</p><h2 id="使用-spi-的优势和劣势在哪里" tabindex="-1"><a class="header-anchor" href="#使用-spi-的优势和劣势在哪里"><span>使用 SPI 的优势和劣势在哪里？</span></a></h2><p><strong>优点：</strong></p><p>不用多说，优势就是实现解耦，使得第三方服务模块的装配控制的逻辑与调用者的业务代码分离，而不是耦合在一起。 应用程序可以根据实际业务情况启用框架扩展或替换框架组件，或者调整不同的方案。<strong>满足软件设计的开闭原则</strong>。</p><p><strong>缺点：</strong></p><ol><li><p>虽然 ServiceLoader 也算是使用的延迟加载，<strong>但是基本只能通过遍历全部获取</strong>，也就是接口的实现类全部加载并实例化一遍， 如果你并不想用某些实现类，它也被加载并实例化了，这就造成了浪费。</p></li><li><p><strong>获取某个实现类的方式不够灵活</strong>，只能通过 Iterator 形式获取，不能根据某个参数来获取对应的实现类。</p></li></ol><p>一般我们在实际项目开发的时候，会使用枚举来确定不同方案，然后每个方案都有一个 getSchemeId 的方法用于返回这个方案对应的 ID， 通过这个 id 去筛选当前需要的方案。</p><p>小例子：</p><div class="language-java line-numbers-mode" data-highlighter="shiki" data-ext="java" data-title="java" style="--shiki-light:#383A42;--shiki-dark:#abb2bf;--shiki-light-bg:#FAFAFA;--shiki-dark-bg:#282c34;"><pre class="shiki shiki-themes one-light one-dark-pro vp-code"><code><span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">//动态加载 SPIService 的所有方案实现类</span></span>
<span class="line"><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">List</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&lt;</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SPIService</span><span style="--shiki-light:#E45649;--shiki-dark:#ABB2BF;">&gt;</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> services </span><span style="--shiki-light:#383A42;--shiki-dark:#56B6C2;">=</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;"> SpiServiceLoader</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">SPIService</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">class</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">);</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">for</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#C18401;--shiki-dark:#E5C07B;">SPIService</span><span style="--shiki-light:#E45649;--shiki-dark:#E06C75;"> service</span><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">:</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> services) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">    //获取当前这个人对应方案的实现类</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">    if</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;"> (</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">Objects</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">equals</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(</span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSchemeId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">(), </span><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">person</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">getSchemeId</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">())</span><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">) {</span></span>
<span class="line"><span style="--shiki-light:#A0A1A7;--shiki-dark:#7F848E;--shiki-light-font-style:italic;--shiki-dark-font-style:italic;">        //使用这个方案的实现类</span></span>
<span class="line"><span style="--shiki-light:#E45649;--shiki-dark:#E5C07B;">        service</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">.</span><span style="--shiki-light:#4078F2;--shiki-dark:#61AFEF;">print</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">();</span></span>
<span class="line"><span style="--shiki-light:#A626A4;--shiki-dark:#C678DD;">        break</span><span style="--shiki-light:#383A42;--shiki-dark:#ABB2BF;">;</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">    }</span></span>
<span class="line"><span style="--shiki-light:#383A42;--shiki-dark:#E06C75;">}</span></span></code></pre><div class="line-numbers" aria-hidden="true" style="counter-reset:line-number 0;"><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div><div class="line-number"></div></div></div><p>这个里面 SpiServiceLoader 是自己封装的 SPI 加载器，相当于把前面实例中的 main 中的 ServiceLoader 和 Iterator 封装起来了。</p><ol start="3"><li><strong>多个并发多线程使用 ServiceLoader 类的实例是不安全的。</strong> 实际上这个可以解决，我们在第 2 点的基础上修改。</li></ol><p>自己封装的 SpiServiceLoader 在使用 getService 中会调用 ServiceLoader，那么我们给 getService 方法加上锁 <code>synchronized</code> 就可以解决并发的问题了。</p><p>这里至于为什么没有放 SpiServiceLoader，是因为这个代码是公司的代码，不能随便用来写文章，所以，这里提供了思路，实现就没有那么难了。</p><p>以上就是我对 SPI 机制的理解和总结，实际上真实的项目中远比这个要复杂。</p>`,75))])}const B=t(d,[["render",c],["__file","SPI.html.vue"]]),v=JSON.parse('{"path":"/Java/SPI.html","title":"SPI","lang":"zh-CN","frontmatter":{},"headers":[{"level":2,"title":"Flag","slug":"flag","link":"#flag","children":[]},{"level":2,"title":"什么是 SPI？","slug":"什么是-spi","link":"#什么是-spi","children":[]},{"level":2,"title":"JDK 中的 SPI","slug":"jdk-中的-spi","link":"#jdk-中的-spi","children":[{"level":3,"title":"实例以及测试","slug":"实例以及测试","link":"#实例以及测试","children":[]},{"level":3,"title":"源码分析","slug":"源码分析","link":"#源码分析","children":[]}]},{"level":2,"title":"SPI 如何实现代码的解耦？","slug":"spi-如何实现代码的解耦","link":"#spi-如何实现代码的解耦","children":[]},{"level":2,"title":"SPI 适合什么场景下使用？","slug":"spi-适合什么场景下使用","link":"#spi-适合什么场景下使用","children":[]},{"level":2,"title":"使用 SPI 的优势和劣势在哪里？","slug":"使用-spi-的优势和劣势在哪里","link":"#使用-spi-的优势和劣势在哪里","children":[]}],"git":{"createdTime":1726030162000,"updatedTime":1726030162000,"contributors":[{"name":"onni-top","email":"admin@onni.top","commits":1}]},"readingTime":{"minutes":11.67,"words":3500},"filePathRelative":"Java/SPI.md","localizedDate":"2024年9月11日","excerpt":"\\n\\n<h2>Flag</h2>\\n<ul>\\n<li><a href=\\"https://github.com/McModLauncher/modlauncher\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/McModLauncher/modlauncher</a></li>\\n<li><a href=\\"https://github.com/SpongePowered/Mixin\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/SpongePowered/Mixin</a></li>\\n<li><a href=\\"https://github.com/FabricMC\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/FabricMC</a>\\n<ul>\\n<li><a href=\\"https://blog.csdn.net/smildwind/article/details/120227376\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Fabric 与Mixin 教程</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"https://github.com/MinecraftForge/MinecraftForge\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/MinecraftForge/MinecraftForge</a></li>\\n<li><a href=\\"https://github.com/Chocohead/OptiFabric\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/Chocohead/OptiFabric</a>\\n<ul>\\n<li><a href=\\"https://github.com/sp614x/optifine\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/sp614x/optifine</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"https://github.com/Mojang/brigadier\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/Mojang/brigadier</a></li>\\n<li><a href=\\"https://github.com/osgi\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/osgi</a>\\n<ul>\\n<li>OSGI（Open Service Gateway Initiative），是一个由OSGi Alliance发起的以Java为技术平台的动态模块化规范</li>\\n<li><a href=\\"https://github.com/bndtools/bnd\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/bndtools/bnd</a></li>\\n</ul>\\n</li>\\n<li><a href=\\"https://github.com/eclipse-equinox\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">https://github.com/eclipse-equinox</a></li>\\n<li>Jigsaw Java9 modules</li>\\n<li>观察者设计模式 <a href=\\"https://blog.csdn.net/wanggang514260663/article/details/86138144\\" target=\\"_blank\\" rel=\\"noopener noreferrer\\">Java设计模式之观察者模式</a></li>\\n<li>Spring 实现<code>ApplicationContextAware</code>接口获取到指定接口的所有实现</li>\\n</ul>"}');export{B as comp,v as data};
